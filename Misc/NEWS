+++++++++++
Python News
+++++++++++

What's New in Python 3.3.7 final?
=================================

*Release date: 2017-09-19*

There were no new changes in version 3.3.7.



What's New in Python 3.3.7 release candidate 1?
===============================================

*Release date: 2017-09-05*

Security
--------

- bpo-30947: Upgrade libexpat embedded copy from version 2.2.1 to 2.2.3 to
  get security fixes.

- bpo-26657: Fix directory traversal vulnerability with http.server on
  Windows. This fixes a regression that was introduced in 3.3.4rc1 and
  3.4.0rc1. Based on patch by Philipp Hagemeister.

- bpo-30500: Fix urllib.parse.splithost() to correctly parse fragments. For
  example, ``splithost('//127.0.0.1#@evil.com/')`` now correctly returns the
  ``127.0.0.1`` host, instead of treating ``@evil.com`` as the host in an
  authentification (``login@host``).

- bpo-30730: Prevent environment variables injection in subprocess on
  Windows.  Prevent passing other invalid environment variables and command
  arguments.

- bpo-30585: Fix TLS stripping vulnerability in smptlib, CVE-2016-0772.
  Reported by Team Oststrom

- bpo-30694: Upgrade expat copy from 2.2.0 to 2.2.1 to get fixes of multiple
  security vulnerabilities including: CVE-2017-9233 (External entity
  infinite loop DoS), CVE-2016-9063 (Integer overflow, re-fix),
  CVE-2016-0718 (Fix regression bugs from 2.2.0's fix to CVE-2016-0718) and
  CVE-2012-0876 (Counter hash flooding with SipHash). Note: the
  CVE-2016-5300 (Use os- specific entropy sources like getrandom) doesn't
  impact Python, since Python already gets entropy from the OS to set the
  expat secret using ``XML_SetHashSalt()``.

- bpo-29591: Update expat copy from 2.1.0 to 2.2.0 to get fixes of
  CVE-2016-0718 and CVE-2016-4472. See
  https://sourceforge.net/p/expat/bugs/537/ for more information.

Core and Builtins
-----------------

- bpo-27945: Fixed various segfaults with dict when input collections are
  mutated during searching, inserting or comparing.  Based on patches by
  Duane Griffin and Tim Mitchell.

- bpo-28648: Fixed crash in Py_DecodeLocale() in debug build on Mac OS X
  when decode astral characters.  Patch by Xiang Zhang.

- bpo-26171: Fix possible integer overflow and heap corruption in
  zipimporter.get_data().

- bpo-25709: Fixed problem with in-place string concatenation and utf-8
  cache.

- bpo-24407: Fix crash when dict is mutated while being updated.

- bpo-24097: Fixed crash in object.__reduce__() if slot name is freed inside
  __getattr__.

- bpo-24096: Make warnings.warn_explicit more robust against mutation of the
  warnings.filters list.

- bpo-24044: Fix possible null pointer dereference in list.sort in out of
  memory conditions.

- bpo-23055: Fixed a buffer overflow in PyUnicode_FromFormatV.  Analysis and
  fix by Guido Vranken.

Library
-------

- bpo-31170: expat: Update libexpat from 2.2.3 to 2.2.4. Fix copying of
  partial characters for UTF-8 input (libexpat bug 115):
  https://github.com/libexpat/libexpat/issues/115

- bpo-22928: Disabled HTTP header injections in http.client. Original patch
  by Demian Brecht.

- bpo-30119: ftplib.FTP.putline() now throws ValueError on commands that
  contains CR or LF. Patch by Dong-hee Na

- bpo-28563: Fixed possible DoS and arbitrary code execution when handle
  plural form selections in the gettext module.  The expression parser now
  supports exact syntax supported by GNU gettext.

- bpo-27783: Fix possible usage of uninitialized memory in
  operator.methodcaller.

- bpo-27774: Fix possible Py_DECREF on unowned object in _sre.

- bpo-27760: Fix possible integer overflow in binascii.b2a_qp.

- bpo-27758: Fix possible integer overflow in the _csv module for large
  record lengths.

- bpo-27568: Prevent HTTPoxy attack (CVE-2016-1000110). Ignore the
  HTTP_PROXY variable when REQUEST_METHOD environment is set, which
  indicates that the script is in CGI mode.

- bpo-24521: Fix possible integer overflows in the pickle module.

- bpo-22931: Allow '[' and ']' in cookie values.

- bpo-24094: Fix possible crash in json.encode with poorly behaved dict
  subclasses.

- bpo-23367: Fix possible overflows in the unicodedata module.

- bpo-23361: Fix possible overflow in Windows subprocess creation code.

- bpo-23363: Fix possible overflow in itertools.permutations.

- bpo-23364: Fix possible overflow in itertools.product.

- bpo-23369: Fixed possible integer overflow in
  _json.encode_basestring_ascii.

- bpo-23366: Fixed possible integer overflow in itertools.combinations.

- bpo-23365: Fixed possible integer overflow in
  itertools.combinations_with_replacement.

Tests
-----

- bpo-27369: In test_pyexpat, avoid testing an error message detail that
  changed in Expat 2.2.0.

- bpo-25940: Changed test_ssl and test_httplib to use self-
  signed.pythontest.net.  This avoids relying on svn.python.org, which
  recently changed root certificate.

C API
-----

- bpo-23998: PyImport_ReInitLock() now checks for lock allocation error


What's New in Python 3.3.6 final?
=================================

*Release date: 11-Oct-2014*

Core and Builtins
-----------------

- bpo-22643: Fix integer overflow in Unicode case operations (upper, lower,
  title, swapcase, casefold).

- bpo-22518: Fixed integer overflow issues in "backslashreplace",
  "xmlcharrefreplace", and "surrogatepass" error handlers.

- bpo-22520: Fix overflow checking when generating the repr of a unicode
  object.

- bpo-22519: Fix overflow checking in PyBytes_Repr.

- bpo-22518: Fix integer overflow issues in latin-1 encoding.

- bpo-23165: Perform overflow checks before allocating memory in the
  _Py_char2wchar function.

Library
-------

- bpo-16043: Add a default limit for the amount of data
  xmlrpclib.gzip_decode will return. This resolves CVE-2013-1753.

- bpo-22517: When a io.BufferedRWPair object is deallocated, clear its
  weakrefs.

- bpo-22419: Limit the length of incoming HTTP request in wsgiref server to
  65536 bytes and send a 414 error code for higher lengths. Patch
  contributed by Devin Cook.

- Lax cookie parsing in http.cookies could be a security issue when combined
  with non-standard cookie handling in some Web browsers.  Reported by
  Sergey Bobrov.

- bpo-21766: Prevent a security hole in CGIHTTPServer by URL unquoting paths
  before checking for a CGI script at that path.

- bpo-20633: Replace relative import by absolute import.

- bpo-21082: In os.makedirs, do not set the process-wide umask. Note this
  changes behavior of makedirs when exist_ok=True.

- bpo-20875: Prevent possible gzip "'read' is not defined" NameError. Patch
  by Claudiu Popa.

- bpo-11599: When an external command (e.g. compiler) fails, distutils now
  prints out the whole command line (instead of just the command name) if
  the environment variable DISTUTILS_DEBUG is set.

- bpo-4931: distutils should not produce unhelpful "error: None" messages
  anymore. distutils.util.grok_environment_error is kept but doc-deprecated.

- bpo-20283: RE pattern methods now accept the string keyword parameters as
  documented. The pattern and source keyword parameters are left as
  deprecated aliases.

- bpo-21323: Fix http.server to again handle scripts in CGI subdirectories,
  broken by the fix for security issue #19435.  Patch by Zach Byrne.

- bpo-21529: Fix arbitrary memory access in JSONDecoder.raw_decode with a
  negative second parameter. Bug reported by Guido Vranken. (See also:
  CVE-2014-4616)

Tests
-----

- bpo-17752: Fix distutils tests when run from the installed location.

- bpo-20946: Correct alignment assumptions of some ctypes tests.

- bpo-20939: Fix test_geturl failure in test_urllibnet due to new redirect
  of http://www.python.org/ to https://www.python.org.


What's New in Python 3.3.5 final?
=================================

*Release date: 09-Mar-2014*

No changes from release candidate 2.



What's New in Python 3.3.5 release candidate 2?
===============================================

*Release date: 02-Mar-2014*

Core and Builtins
-----------------

- bpo-20731: Properly position in source code files even if they are opened
  in text mode. Patch by Serhiy Storchaka.

- bpo-19619: str.encode, bytes.decode and bytearray.decode now use an
  internal API to throw LookupError for known non-text encodings, rather
  than attempting the encoding or decoding operation and then throwing a
  TypeError for an unexpected output type. (The latter mechanism remains in
  place for third party non-text encodings)

Library
-------

- bpo-20778: Fix modulefinder to work with bytecode-only modules.

- bpo-20791: copy.copy() now doesn't make a copy when the input is a bytes
  object. Initial patch by Peter Otten.

- bpo-20621: Fixes a zipimport bug introduced in 3.3.4 that could cause
  spurious crashes or SystemErrors when importing modules or packages from a
  zip file.  The change causing the problem was reverted.

- bpo-20404: io.TextIOWrapper (and hence the open() builtin) now uses the
  internal codec marking system added for issue #19619 to throw LookupError
  for known non- text encodings at stream construction time. The existing
  output type checks remain in place to deal with unmarked third party
  codecs.

Tests
-----

- bpo-20743: Fix a reference leak in test_tcl.

Tools/Demos
-----------

- bpo-20535: PYTHONWARNING no longer affects the run_tests.py script. Patch
  by Arfrever Frehtes Taifersar Arahesis.


What's New in Python 3.3.5 release candidate 1?
===============================================

*Release date: 23-Feb-2014*

Core and Builtins
-----------------

- bpo-20588: Make Python-ast.c C89 compliant.

- bpo-20437: Fixed 21 potential bugs when deleting objects references.

- bpo-20538: UTF-7 incremental decoder produced inconsistant string when
  input was truncated in BASE64 section.

Library
-------

- bpo-20635: Fixed grid_columnconfigure() and grid_rowconfigure() methods of
  Tkinter widgets to work in wantobjects=True mode.

- bpo-19612: On Windows, subprocess.Popen.communicate() now ignores
  OSError(22, 'Invalid argument') when writing input data into stdin,
  whereas the process already exited.

- bpo-6815: os.path.expandvars() now supports non-ASCII environment
  variables names and values.

- bpo-17671: Fixed a crash when use non-initialized io.BufferedRWPair. Based
  on patch by Stephen Tu.

- bpo-8478: Untokenizer.compat processes first token from iterator input.
  Patch based on lines from Georg Brandl, Eric Snow, and Gareth Rees.

- bpo-20594: Avoid name clash with the libc function posix_close.

- bpo-19856: shutil.move() failed to move a directory to other directory on
  Windows if source name ends with os.altsep.

- bpo-14983: email.generator now always adds a line end after each MIME
  boundary marker, instead of doing so only when there is an epilogue.  This
  fixes an RFC compliance bug and solves an issue with signed MIME parts.

- bpo-20540: Fix a performance regression (vs. Python 3.2) when layering a
  multiprocessing Connection over a TCP socket.  For small payloads, Nagle's
  algorithm would introduce idle delays before the entire transmission of a
  message.

- bpo-16983: the new email header parsing code will now decode encoded words
  that are (incorrectly) surrounded by quotes, and register a defect.

- bpo-19772: email.generator no longer mutates the message object when doing
  a down- transform from 8bit to 7bit CTEs.

- bpo-18805: the netmask/hostmask parsing in ipaddress now more reliably
  filters out illegal values and correctly allows any valid prefix length.

- bpo-17369: get_filename was raising an exception if the filename
  parameter's RFC2231 encoding was broken in certain ways.  This was a
  regression relative to python2.

- bpo-20013: Some imap servers disconnect if the current mailbox is deleted,
  and imaplib did not handle that case gracefully.  Now it handles the 'bye'
  correctly.

- bpo-19920: TarFile.list() no longer fails when outputs a listing
  containing non- encodable characters.  Based on patch by Vajrasky Kok.

- bpo-20515: Fix NULL pointer dereference introduced by issue #20368.

- bpo-19186: Restore namespacing of expat symbols inside the pyexpat module.

- bpo-20426: When passing the re.DEBUG flag, re.compile() displays the debug
  output every time it is called, regardless of the compilation cache.

- bpo-20368: The null character now correctly passed from Tcl to Python.
  Improved error handling in variables-related commands.

- bpo-20435: Fix _pyio.StringIO.getvalue() to take into account newline
  translation settings.

- bpo-20288: fix handling of invalid numeric charrefs in HTMLParser.

- bpo-20424: Python implementation of io.StringIO now supports lone
  surrogates.

- bpo-19456: ntpath.join() now joins relative paths correctly when a drive
  is present.

- bpo-19077: tempfile.TemporaryDirectory cleanup is now most likely
  successful when called during nulling out of modules during shutdown.
  Misleading exception no longer raised when resource warning is emitted
  during shutdown.

- bpo-20367: Fix behavior of concurrent.futures.as_completed() for duplicate
  arguments. Patch by Glenn Langford.

- bpo-8260: The read(), readline() and readlines() methods of
  codecs.StreamReader returned incomplete data when were called after
  readline() or read(size). Based on patch by Amaury Forgeot d'Arc.

IDLE
----

- bpo-20406: Use Python application icons for Idle window title bars. Patch
  mostly by Serhiy Storchaka.

- Update the python.gif icon for the Idle classbrowser and pathbowser from
  the old green snake to the new new blue and yellow snakes.

- bpo-17721: Remove non-functional configuration dialog help button until we
  make it actually gives some help when clicked. Patch by Guilherme Simões.

Tests
-----

- bpo-20510: Rewrote test_exit in test_sys to match existing comments, use
  modern unittest features, and use helpers from test.script_helper instead
  of using subprocess directly.  Patch by Gareth Rees.

- bpo-20532: Tests which use _testcapi are now marked as CPython only.

- bpo-19920: Added tests for TarFile.list().  Based on patch by Vajrasky
  Kok.

- bpo-19990: Added tests for the imghdr module.  Based on patch by Claudiu
  Popa.

- bpo-20474: Fix test_socket "unexpected success" failures on OS X 10.7+.

- bpo-20605: Make test_socket getaddrinfo OS X segfault test more robust.

Documentation
-------------

- bpo-20488: Importlib is no longer *an* implementation of import, it's
  *the* implementation.

Build
-----

- bpo-20221: Removed conflicting (or circular) hypot definition when
  compiled with VS 2010 or above.  Initial patch by Tabrez Mohammed.

- bpo-20609: Restored the ability to build 64-bit Windows binaries on 32-bit
  Windows, which was broken by the change in issue #19788.


What's New in Python 3.3.4 final?
=================================

*Release date: 09-Feb-2014*

Library
-------

- bpo-20374: Fix build warnings of the readline module with libedit on Mac.


What's New in Python 3.3.4 release candidate 1?
===============================================

*Release date: 26-Jan-2014*

Core and Builtins
-----------------

- bpo-17825: Cursor "^" is correctly positioned for SyntaxError and
  IndentationError.

- bpo-2382: SyntaxError cursor "^" is now written at correct position in
  most cases when multibyte characters are in line (before "^").  This still
  not works correctly with wide East Asian characters.

- bpo-18960: The first line of Python script could be executed twice when
  the source encoding was specified on the second line.  Now the source
  encoding declaration on the second line isn't effective if the first line
  contains anything except a comment.  'python -x' works now again with
  files with the source encoding declarations, and can be used to make
  Python batch files on Windows.

- bpo-17432: Drop UCS2 from names of Unicode functions in python3.def.

- bpo-19969: PyBytes_FromFormatV() now raises an OverflowError if "%c"
  argument is not in range [0; 255].

- bpo-14432: Generator now clears the borrowed reference to the thread
  state. Fix a crash when a generator is created in a C thread that is
  destroyed while the generator is still used. The issue was that a
  generator contains a frame, and the frame kept a reference to the Python
  state of the destroyed C thread. The crash occurs when a trace function is
  setup.

- bpo-19932: Fix typo in import.h, missing whitespaces in function
  prototypes.

- bpo-19729: In str.format(), fix recursive expansion in format spec.

- bpo-19638: Fix possible crash / undefined behaviour from huge (more than 2
  billion characters) input strings in _Py_dg_strtod.

Library
-------

- bpo-16042: CVE-2013-1752: smtplib: Limit amount of data read by limiting
  the call to readline().  Original patch by Christian Heimes.

- bpo-20317: ExitStack.__exit__ could create a self-referential loop if an
  exception raised by a cleanup operation already had its context set
  correctly (for example, by the @contextmanager decorator). The infinite
  loop this caused is now avoided by checking if the expected context is
  already set before trying to fix it.

- bpo-20374: Fix build with GNU readline >= 6.3.

- bpo-20262: Warnings are raised now when duplicate names are added in the
  ZIP file or too long ZIP file comment is truncated.

- bpo-18574: Added missing newline in 100-Continue reply from
  http.server.BaseHTTPRequestHandler. Patch by Nikolaus Rath.

- bpo-20270: urllib.urlparse now supports empty ports.

- bpo-20243: TarFile no longer raise ReadError when opened in write mode.

- bpo-20238: TarFile opened with external fileobj and "w:gz" mode didn't
  write complete output on close.

- bpo-20245: The open functions in the tarfile module now correctly handle
  empty mode.

- bpo-20242: Fixed basicConfig() format strings for the alternative
  formatting styles. Thanks to kespindler for the bug report and patch.

- bpo-20246: Fix buffer overflow in socket.recvfrom_into.

- bpo-20206: Fix edge case in email.quoprimime.encode where it truncated
  lines ending in a character needing encoding but no newline by using a
  more efficient algorithm that doesn't have the bug. (See also: bpo-5803)

- bpo-19082: Working xmlrpc.server and xmlrpc.client examples. Both in
  modules and in documentation. Initial patch contributed by Vajrasky Kok.

- bpo-20138: The wsgiref.application_uri() and wsgiref.request_uri()
  functions now conform to PEP 3333 when handle non-ASCII URLs.

- bpo-19097: Raise the correct Exception when cgi.FieldStorage is given an
  invalid fileobj.

- bpo-20217: Fix build in SCHED_SPORADIC is defined.

- bpo-13107: argparse and optparse no longer raises an exception when output
  a help on environment with too small COLUMNS.  Based on patch by Elazar
  Gershuni.

- bpo-20207: Always disable SSLv2 except when PROTOCOL_SSLv2 is explicitly
  asked for.

- bpo-18960: The tokenize module now ignore the source encoding declaration
  on the second line if the first line contains anything except a comment.

- bpo-20078: Reading malformed zipfiles no longer hangs with 100% CPU
  consumption.

- bpo-20113: os.readv() and os.writev() now raise an OSError exception on
  error instead of returning -1.

- bpo-20072: Fixed multiple errors in tkinter with wantobjects is False.

- bpo-20108: Avoid parameter name clash in inspect.getcallargs().

- bpo-12692: Backport the fix for ResourceWarning in test_urllib2net. This
  also helps in closing the socket when Connection Close header is not sent.

- bpo-19422: Explicitly disallow non-SOCK_STREAM sockets in the ssl module,
  rather than silently let them emit clear text data.

- bpo-18116: getpass was always getting an error when testing /dev/tty, and
  thus was always falling back to stdin, and would then raise an exception
  if stdin could not be used (such as /dev/null).  It also leaked an open
  file. All of these issues are now fixed.

- bpo-20027: Fixed locale aliases for devanagari locales.

- bpo-20067: Tkinter variables now work when wantobjects is false.

- bpo-19020: Tkinter now uses splitlist() instead of split() in configure
  methods.

- Fix TypeError on "setup.py upload --show-response".

- bpo-12226: HTTPS is now used by default when connecting to PyPI.

- bpo-20045: Fix "setup.py register --list-classifiers".

- bpo-18879: When a method is looked up on a temporary file, avoid closing
  the file before the method is possibly called.

- bpo-20034: Updated alias mapping to most recent locale.alias file from
  X.org distribution using makelocalealias.py.

- bpo-5815: Fixed support for locales with modifiers.  Fixed support for
  locale encodings with hyphens.

- bpo-20026: Fix the sqlite module to handle correctly invalid isolation
  level (wrong type).

- bpo-18829: csv.Dialect() now checks type for delimiter, escapechar and
  quotechar fields.  Original patch by Vajrasky Kok.

- bpo-19855: uuid.getnode() on Unix now looks on the PATH for the
  executables used to find the mac address, with /sbin and /usr/sbin as
  fallbacks.

- bpo-20007: HTTPResponse.read(0) no more prematurely closes connection.
  Original patch by Simon Sapin.

- bpo-19912: Fixed numerous bugs in ntpath.splitunc().

- bpo-19911: ntpath.splitdrive() now correctly processes the 'İ' character
  (U+0130, LATIN CAPITAL LETTER I WITH DOT ABOVE).

- bpo-19532: python -m compileall with no filename/directory arguments now
  respects the -f and -q flags instead of ignoring them.

- bpo-19623: Fixed writing to unseekable files in the aifc module.

- bpo-17919: select.poll.register() again works with poll.POLLNVAL on AIX.
  Fixed integer overflow in the eventmask parameter.

- bpo-19063: if a Charset's body_encoding was set to None, the email package
  would generate a message claiming the Content-Transfer-Encoding was 7bit,
  and produce garbage output for the content.  This now works. A couple of
  other set_payload mishandlings of non-ASCII are also fixed.

- bpo-17200: telnetlib's read_until and expect timeout was broken by the fix
  to Issue #14635 in Python 3.3.0 to be interpreted as milliseconds instead
  of seconds when the platform supports select.poll (ie: everywhere). It is
  now treated as seconds once again.

- bpo-17429: platform.linux_distribution() now decodes files from the UTF-8
  encoding with the surrogateescape error handler, instead of decoding from
  the locale encoding in strict mode. It fixes the function on Fedora 19
  which is probably the first major distribution release with a non-ASCII
  name. Patch written by Toshio Kuratomi.

- bpo-19929: Call os.read with 32768 within subprocess.Popen.communicate
  rather than 4096 for efficiency.  A microbenchmark shows Linux and OS X
  both using ~50% less cpu time this way.

- bpo-19506: Use a memoryview to avoid a data copy when piping data to stdin
  within subprocess.Popen.communicate.  5-10% less cpu usage.

- bpo-19839: Fix regression in bz2 module's handling of non-bzip2 data at
  EOF, and analogous bug in lzma module.

- bpo-19138: doctest's IGNORE_EXCEPTION_DETAIL now allows a match when no
  exception detail exists (no colon following the exception's name, or a
  colon does follow but no text follows the colon).

- bpo-19834: Support unpickling of exceptions pickled by Python 2.

- bpo-15798: Fixed subprocess.Popen() to no longer fail if file descriptor
  0, 1 or 2 is closed.

- bpo-19088: Fixed incorrect caching of the copyreg module in
  object.__reduce__() and object.__reduce_ex__().

- Fixed _pickle.Unpickler to not fail when loading empty strings as
  persistent IDs.

- bpo-11480: Fixed copy.copy to work with classes with custom metaclasses.
  Patch by Daniel Urban.

- bpo-6477: Added support for pickling the types of built-in singletons
  (i.e., Ellipsis, NotImplemented, None).

- bpo-11508: Fixed uuid.getnode() and uuid.uuid1() on environment with
  virtual interface. Original patch by Kent Frazier.

- bpo-11489: JSON decoder now accepts lone surrogates.

- bpo-19545: Avoid chained exceptions while passing stray % to
  time.strptime().  Initial patch by Claudiu Popa.

- bpo-19633: Fixed writing not compressed 16- and 32-bit wave files on big-
  endian platforms.

- bpo-19449: in csv's writerow, handle non-string keys when generating the
  error message that certain keys are not in the 'fieldnames' list.

- Fix test.support.bind_port() to not cause an error when Python was
  compiled on a system with SO_REUSEPORT defined in the headers but run on a
  system with an OS kernel that does not support that reasonably new socket
  option.

- Fix compilation error under gcc of the ctypes module bundled libffi for
  arm.

- bpo-19523: Closed FileHandler leak which occurred when delay was set.

- bpo-13674: Prevented time.strftime from crashing on Windows when given a
  year before 1900 and a format of %y.

- bpo-19544: Restore use of urllib over http allowing use of http_proxy for
  Distutils upload command, a feature accidentally lost in the rollback of
  distutils2. (See also: bpo-6286)

- bpo-19544: Restore the read_pkg_file method to
  distutils.dist.DistributionMetadata accidentally removed in the undo of
  distutils2. (See also: bpo-7457)

- bpo-1575020: Fixed support of 24-bit wave files on big-endian platforms.

- bpo-19480: HTMLParser now accepts all valid start-tag names as defined by
  the HTML5 standard.

- bpo-6157: Fixed tkinter.Text.debug().  Original patch by Guilherme Polo.

- bpo-6160: The bbox() method of tkinter.Spinbox now returns a tuple of
  integers instead of a string.  Based on patch by Guilherme Polo.

- bpo-10197: Rework subprocess.get[status]output to use subprocess
  functionality and thus to work on Windows. Patch by Nick Coghlan.

- bpo-19286: Directories in ``package_data`` are no longer added to the
  filelist, preventing failure outlined in the ticket.

IDLE
----

- bpo-17390: Add Python version to Idle editor window title bar. Original
  patches by Edmond Burnett and Kent Johnson.

- bpo-18960: IDLE now ignores the source encoding declaration on the second
  line if the first line contains anything except a comment.

- bpo-20058: sys.stdin.readline() in IDLE now always returns only one line.

- bpo-19481: print() of string subclass instance in IDLE no longer hangs.

- bpo-18270: Prevent possible IDLE AttributeError on OS X when no initial
  shell window is present.

Tests
-----

- bpo-19804: The test_find_mac test in test_uuid is now skipped if the
  ifconfig executable is not available.

- bpo-19886: Use better estimated memory requirements for bigmem tests.

- bpo-20055: Fix test_shutil under Windows with symlink privileges held.
  Patch by Vajrasky Kok.

- bpo-19938: Re-enabled test_bug_1333982 in test_dis, which had been
  disabled since 3.0 due to the changes in listcomp handling.

- bpo-19320: test_tcl no longer fails when wantobjects is false.

- bpo-19683: Removed empty tests from test_minidom.  Patch by Ajitesh Gupta.

- bpo-19919: Fix flaky SSL test. connect_ex() sometimes returns EWOULDBLOCK
  on Windows or VMs hosted on Windows.

- bpo-19912: Added tests for ntpath.splitunc().

- bpo-19828: Fixed test_site when the whole suite is run with -S.

- bpo-19928: Implemented a test for repr() of cell objects.

- bpo-19535: Fixed test_docxmlrpc when python is run with -OO.

- bpo-19926: Removed unneeded test_main from test_abstract_numbers. Patch by
  Vajrasky Kok.

- bpo-19595: Re-enabled a long-disabled test in test_winsound. (See also:
  bpo-19987)

- bpo-19588: Fixed tests in test_random that were silently skipped most of
  the time. Patch by Julian Gindi.

- bpo-19596: Set untestable tests in test_importlib to None to avoid
  reporting success on empty tests.

- bpo-19440: Clean up test_capi by removing an unnecessary __future__
  import, converting from test_main to unittest.main, and running the
  _testcapi module tests within a unittest TestCase.

- bpo-18702: All skipped tests now reported as skipped. (See also:
  bpo-19572)

- bpo-19085: Added basic tests for all tkinter widget options.

Documentation
-------------

- bpo-20265: Updated some parts of the Using Windows document.

- bpo-20266: Updated some parts of the Windows FAQ.

- bpo-20255: Updated the about and bugs pages.

- bpo-20253: Fixed a typo in the ipaddress docs that advertised an illegal
  attribute name.  Found by INADA Naoki.

- bpo-19963: Document that importlib.import_module() no longer requires
  importing parent packages separately.

- bpo-18840: Introduce the json module in the tutorial, and de-emphasize the
  pickle module.

- bpo-19845: Updated the Compiling Python on Windows section.

- bpo-19795: Improved markup of True/False constants.

- bpo-18326: Clarify that list.sort's arguments are keyword-only.  Also,
  attempt to reduce confusion in the glossary by not saying there are
  different "types" of arguments and parameters.

Build
-----

- bpo-19788: kill_python(_d).exe is now run as a PreBuildEvent on the
  pythoncore sub- project.  This should prevent build errors due a previous
  build's python(_d).exe still running.

- Add workaround for VS 2010 nmake clean issue. VS 2010 doesn't set up PATH
  for nmake.exe correctly.

Tools/Demos
-----------

- bpo-19936: Added executable bits or shebang lines to Python scripts which
  requires them.  Disable executable bits and shebang lines in test and
  benchmark files in order to prevent using a random system python, and in
  source files of modules which don't provide command line interface.  Fixed
  shebang line to use python3 executable in the unittestgui script.

- bpo-18960: 2to3 and the findnocoding.py script now ignore the source
  encoding declaration on the second line if the first line contains
  anything except a comment.


What's New in Python 3.3.3 final?
=================================

*Release date: 17-Nov-2013*

No changes from release candidate 2.



What's New in Python 3.3.3 release candidate 2?
===============================================

*Release date: 11-Nov-2013*

Library
-------

- bpo-19227: Any re-seeding of the OpenSSL RNG on fork has been removed;
  this should be handled by OpenSSL itself or by the application.

- bpo-19435: Fix directory traversal attack on CGIHttpRequestHandler.

Tests
-----

- bpo-18964: Fix test_tcl when run with Tcl/Tk versions  < 8.5.

Build
-----

- bpo-15663: Revert OS X installer built-in Tcl/Tk support for 3.3.3. Some
  third-party projects, such as Matplotlib and PIL/Pillow, depended on being
  able to build with Tcl and Tk frameworks in /Library/Frameworks.


What's New in Python 3.3.3 release candidate 1?
===============================================

*Release date: 27-Oct-2013*

Core and Builtins
-----------------

- bpo-18603: Ensure that PyOS_mystricmp and PyOS_mystrnicmp are in the
  Python executable and not removed by the linker's optimizer.

- bpo-19279: UTF-7 decoder no more produces illegal strings.

- Fix macro expansion of _PyErr_OCCURRED(), and make sure to use it in at
  least one place so as to avoid regressions.

- bpo-19014: memoryview.cast() is now allowed on zero-length views.

- bpo-19098: Prevent overflow in the compiler when the recursion limit is
  set absurdly high.

- bpo-18942: sys._debugmallocstats() output was damaged on Windows.

- bpo-18667: Add missing "HAVE_FCHOWNAT" symbol to posix._have_functions.

- bpo-18368: PyOS_StdioReadline() no longer leaks memory when realloc()
  fails.

- bpo-16741: Fix an error reporting in int().

- bpo-17899: Fix rare file descriptor leak in os.listdir().

- bpo-18552: Check return value of PyArena_AddPyObject() in
  obj2ast_object().

- bpo-18560: Fix potential NULL pointer dereference in sum().

- bpo-15905: Fix theoretical buffer overflow in handling of sys.argv[0],
  prefix and exec_prefix if the operation system does not obey MAXPATHLEN.

- bpo-18344: Fix potential ref-leaks in _bufferedreader_read_all().

- bpo-17872: Fix a segfault in marshal.load() when input stream returns more
  bytes than requested.

- bpo-18426: Fix NULL pointer dereference in C extension import when
  PyModule_GetDef() returns an error.

- bpo-18328: Reorder ops in PyThreadState_Delete*() functions. Now the
  tstate is first removed from TLS and then deallocated.

- bpo-18184: PyUnicode_FromFormat() and PyUnicode_FromFormatV() now raise
  OverflowError when an argument of %c format is out of range.

- bpo-18137: Detect integer overflow on precision in float.__format__() and
  complex.__format__().

- bpo-18183: Fix various unicode operations on strings with large unicode
  codepoints.

- bpo-18180: Fix ref leak in _PyImport_GetDynLoadWindows().

- bpo-18038: SyntaxError raised during compilation sources with illegal
  encoding now always contains an encoding name.

- bpo-17644: Fix a crash in str.format when curly braces are used in square
  brackets.

- bpo-17983: Raise a SyntaxError for a ``global __class__`` statement in a
  class body.

- bpo-17927: Frame objects kept arguments alive if they had been copied into
  a cell, even if the cell was cleared.

Library
-------

- bpo-19395: Raise an exception when attempting to pickle a bz2 or lzma
  compressor/decompressor object, rather than creating a pickle that would
  cause a segfault when loaded and used.

- bpo-19227: Try to fix deadlocks caused by re-seeding then OpenSSL pseudo-
  random number generator on fork().

- bpo-16037: HTTPMessage.readheaders() raises an HTTPException when more
  than 100 headers are read.  Adapted from patch by Jyrki Pulliainen.

- bpo-16040: CVE-2013-1752: nntplib: Limit maximum line lengths to 2048 to
  prevent readline() calls from consuming too much memory.  Patch by Jyrki
  Pulliainen.

- bpo-16041: CVE-2013-1752: poplib: Limit maximum line lengths to 2048 to
  prevent readline() calls from consuming too much memory.  Patch by Jyrki
  Pulliainen.

- bpo-17997: Change behavior of ``ssl.match_hostname()`` to follow RFC 6125,
  for security reasons.  It now doesn't match multiple wildcards nor
  wildcards inside IDN fragments.

- bpo-16039: CVE-2013-1752: Change use of readline in imaplib module to
  limit line length.  Patch by Emil Lind.

- bpo-19393: Fix symtable.symtable function to not be confused when there
  are functions or classes named "top".

- bpo-19339: telnetlib module is now using time.monotonic() when available
  to compute timeout.

- bpo-19288: Fixed the "in" operator of dbm.gnu databases for string
  argument.  Original patch by Arfrever Frehtes Taifersar Arahesis.

- bpo-19287: Fixed the "in" operator of dbm.ndbm databases for string
  argument.  Original patch by Arfrever Frehtes Taifersar Arahesis.

- bpo-19327: Fixed the working of regular expressions with too big charset.

- bpo-19350: Increasing the test coverage of macurl2path. Patch by Colin
  Williams.

- bpo-19352: Fix unittest discovery when a module can be reached through
  several paths (e.g. under Debian/Ubuntu with virtualenv).

- bpo-15207: Fix mimetypes to read from correct part of Windows registry
  Original patch by Dave Chambers

- bpo-8964: fix platform._sys_version to handle IronPython 2.6+. Patch by
  Martin Matusiak.

- bpo-16038: CVE-2013-1752: ftplib: Limit amount of data read by limiting
  the call to readline().  Original patch by Michał Jastrzębski and
  Giampaolo Rodola.

- bpo-18235: Fix the sysconfig variables LDSHARED and BLDSHARED under AIX.
  Patch by David Edelsohn.

- bpo-19276: Fixed the wave module on 64-bit big-endian platforms.

- bpo-18776: atexit callbacks now display their full traceback when they
  raise an exception.

- bpo-17827: Add the missing documentation for ``codecs.encode`` and
  ``codecs.decode``.

- bpo-18458: Prevent crashes with newer versions of libedit.  Its readline
  emulation has changed from 0-based indexing to 1-based like gnu readline.
  Original patch by Ronald Oussoren.

- bpo-18919: If the close() method of a writer in the sunau or wave module
  failed, second invocation of close() and destructor no more raise an
  exception.

- bpo-19131: The aifc module now correctly reads and writes sampwidth of
  compressed streams.

- bpo-19158: a rare race in BoundedSemaphore could allow .release() too
  often.

- bpo-18037: 2to3 now escapes '\u' and '\U' in native strings.

- bpo-19137: The pprint module now correctly formats instances of set and
  frozenset subclasses.

- bpo-19092: contextlib.ExitStack now correctly reraises exceptions from the
  __exit__ callbacks of inner context managers (Patch by Hrvoje Nikšić)

- bpo-12641: Avoid passing "-mno-cygwin" to the mingw32 compiler, except
  when necessary. Patch by Oscar Benjamin.

- bpo-18594: The fast path for collections.Counter() was never taken due to
  an over- restrictive type check.  And the fallback path did not implement
  the same algorithm as the pure python code.

- Properly initialize all fields of a SSL object after allocation.

- bpo-4366: Fix building extensions on all platforms when --enable-shared is
  used.

- bpo-18950: Fix miscellaneous bugs in the sunau module.
  Au_read.readframes() now updates current file position and reads correct
  number of frames from multichannel stream.  Au_write.writeframesraw() now
  correctly updates current file position.  Au_read.getnframes() now returns
  an integer (as in Python 2). Au_read and Au_write now correctly works with
  file object if start file position is not a zero.

- bpo-19053: ZipExtFile.read1() with non-zero argument no more returns empty
  bytes until end of data.

- bpo-19028: Fixed tkinter.Tkapp.merge() for non-string arguments.

- bpo-3015: Fixed tkinter with wantobject=False.  Any Tcl command call
  returned empty string.

- bpo-18050: Fixed an incompatibility of the re module with Python 3.3.0
  binaries.

- bpo-19037: The mailbox module now makes all changes to maildir files
  before moving them into place, to avoid race conditions with other
  programs that may be accessing the maildir directory.

- bpo-14984: On POSIX systems, when netrc is called without a filename
  argument (and therefore is reading the user's $HOME/.netrc file), it now
  enforces the same security rules as typical ftp clients: the .netrc file
  must be owned by the user that owns the process and must not be readable
  by any other user.

- bpo-18873: The tokenize module now detects Python source code encoding
  only in comment lines.

- bpo-17324: Fix http.server's request handling case on trailing '/'. Patch
  contributed by Vajrasky Kok.

- bpo-19018: The heapq.merge() function no longer suppresses IndexError in
  the underlying iterables.

- bpo-18784: The uuid module no more attempts to load libc via ctypes.CDLL,
  if all necessary functions are already found in libuuid. Patch by Evgeny
  Sologubov.

- bpo-18672: Fixed format specifiers for Py_ssize_t in debugging output in
  the _sre module.

- bpo-18830: inspect.getclasstree() no more produces duplicated entries even
  when input list contains duplicates.

- bpo-18909: Fix _tkinter.tkapp.interpaddr() on Windows 64-bit, don't cast
  64-bit pointer to long (32 bits).

- bpo-18876: The FileIO.mode attribute now better reflects the actual mode
  under which the file was opened.  Patch by Erik Bray.

- bpo-18418: After fork(), reinit all threads states, not only active ones.
  Patch by A. Jesse Jiryu Davis.

- bpo-16611: http.cookie now correctly parses the 'secure' and 'httponly'
  cookie flags.

- bpo-11973: Fix a problem in kevent. The flags and fflags fields are now
  properly handled as unsigned.

- bpo-17702: On error, os.environb now removes suppress the except context
  when raising a new KeyError with the original key.

- bpo-18755: Fixed the loader used in imp to allow get_data() to be called
  multiple times.

- bpo-16809: Fixed some tkinter incompabilities with Tcl/Tk 8.6.

- bpo-16809: Tkinter's splitlist() and split() methods now accept Tcl_Obj
  argument.

- bpo-18324: set_payload now correctly handles binary input.  This also
  supersedes the previous fixes for #14360, #1717, and #16564.

- bpo-17119: Fixed integer overflows when processing large strings and
  tuples in the tkinter module.

- bpo-18747: Re-seed OpenSSL's pseudo-random number generator after fork. A
  pthread_atfork() parent handler is used to seed the PRNG with pid, time
  and some stack data.

- bpo-8865: Concurrent invocation of select.poll.poll() now raises a
  RuntimeError exception.  Patch by Christian Schubert.

- bpo-13461: Fix a crash in the TextIOWrapper.tell method on 64-bit
  platforms.  Patch by Yogesh Chaudhari.

- bpo-18777: The ssl module now uses the new CRYPTO_THREADID API of OpenSSL
  1.0.0+ instead of the deprecated CRYPTO id callback function.

- bpo-18768: Correct doc string of RAND_edg(). Patch by Vajrasky Kok.

- bpo-18178: Fix ctypes on BSD. dlmalloc.c was compiled twice which broke
  malloc weak symbols.

- bpo-18709: Fix CVE-2013-4238. The SSL module now handles NULL bytes inside
  subjectAltName correctly. Formerly the module has used OpenSSL's
  GENERAL_NAME_print() function to get the string represention of ASN.1
  strings for ``rfc822Name`` (email), ``dNSName`` (DNS) and
  ``uniformResourceIdentifier`` (URI).

- bpo-18756: Improve error reporting in os.urandom() when the failure is due
  to something else than /dev/urandom not existing (for example, exhausting
  the file descriptor limit).

- bpo-18405: Improve the entropy of crypt.mksalt().

- bpo-19151: Fix docstring and use of _get_supported_file_loaders() to
  reflect 2-tuples.

- bpo-18676: Change 'positive' to 'non-negative' in queue.py put and get
  docstrings and ValueError messages. Patch by Zhongyue Luo

- bpo-18681: Fix a NameError in imp.reload() (noticed by Weizhao Li).

- bpo-8112: xlmrpc.server's DocXMLRPCServer server no longer raises an error
  if methods have annotations; it now correctly displays the annotations.

- bpo-17998: Fix an internal error in regular expression engine.

- bpo-17557: Fix os.getgroups() to work with the modified behavior of
  getgroups(2) on OS X 10.8.  Original patch by Mateusz Lenik.

- bpo-18599: Fix name attribute of _sha1.sha1() object. It now returns
  'SHA1' instead of 'SHA'.

- bpo-18561: Skip name in ctypes' _build_callargs() if name is NULL.

- bpo-18559: Fix NULL pointer dereference error in _pickle module

- bpo-18556: Check the return value of a PyUnicode_AsWideChar() call in
  ctypes' U_set().

- bpo-18549: Eliminate dead code in socket_ntohl()

- bpo-18514: Fix unreachable Py_DECREF() call in PyCData_FromBaseObj()

- bpo-18513: Fix behaviour of cmath.rect w.r.t. signed zeros on OS X 10.8 +
  gcc.

- bpo-18480: Add missing call to PyType_Ready to the _elementtree extension.

- bpo-17778: Fix test discovery for test_multiprocessing. (Patch by Zachary
  Ware.)

- bpo-18431: The new email header parser now decodes RFC2047 encoded words
  in structured headers.

- bpo-18432: The sched module's queue method was incorrectly returning an
  iterator instead of a list.

- bpo-18044: The new email header parser was mis-parsing encoded words where
  an encoded character immediately followed the '?' that follows the CTE
  character, resulting in a decoding failure.  They are now decoded
  correctly.

- bpo-18101: Tcl.split() now process strings nested in a tuple as it do with
  byte strings.

- bpo-17198: Fix a NameError in the dbm module.  Patch by Valentina
  Mukhamedzhanova.

- bpo-18013: Fix cgi.FieldStorage to parse the W3C sample form.

- bpo-18347: ElementTree's html serializer now preserves the case of closing
  tags.

- bpo-17261: Ensure multiprocessing's proxies use proper address.

- bpo-18343: faulthandler.register() now keeps the previous signal handler
  when the function is called twice, so faulthandler.unregister() restores
  correctly the original signal handler.

- bpo-17097: Make multiprocessing ignore EINTR.

- bpo-18339: Negative ints keys in unpickler.memo dict no longer cause a
  segfault inside the _pickle C extension.

- bpo-18224: Removed pydoc script from created venv, as it causes problems
  on Windows and adds no value over and above python -m pydoc ...

- bpo-18155: The csv module now correctly handles csv files that use a
  delimter character that has a special meaning in regexes, instead of
  throwing an exception.

- bpo-14360: encode_quopri can now be successfully used as an encoder when
  constructing a MIMEApplication object.

- bpo-18135: ssl.SSLSocket.write() now raises an OverflowError if the input
  string in longer than 2 gigabytes, and ssl.SSLContext.load_cert_chain()
  raises a ValueError if the password is longer than 2 gigabytes. The ssl
  module does not support partial write.

- bpo-18248: Fix libffi build on AIX.

- bpo-18259: Declare sethostname in socketmodule.c for AIX

- bpo-18167: cgi.FieldStorage no longer fails to handle multipart/form-data
  when \r\n appears at end of 65535 bytes without other newlines.

- subprocess: Prevent a possible double close of parent pipe fds when the
  subprocess exec runs into an error.  Prevent a regular multi-close of the
  /dev/null fd when any of stdin, stdout and stderr was set to DEVNULL.

- bpo-16102: Make uuid._netbios_getnode() work again on Python 3.

- bpo-18109: os.uname() now decodes fields from the locale encoding, and
  socket.gethostname() now decodes the hostname from the locale encoding,
  instead of using the UTF-8 encoding in strict mode.

- bpo-17403: urllib.parse.robotparser normalizes the urls before adding to
  ruleline. This helps in handling certain types invalid urls in a
  conservative manner.

- bpo-18025: Fixed a segfault in io.BufferedIOBase.readinto() when raw
  stream's read() returns more bytes than requested.

- bpo-18011: As was originally intended, base64.b32decode() now raises a
  binascii.Error if there are non-b32-alphabet characters present in the
  input string, instead of a TypeError.

- bpo-13772: Restored directory detection of targets in ``os.symlink`` on
  Windows, which was temporarily removed in Python 3.2.3 due to an
  incomplete implementation. The implementation now works even if the
  symlink is created in a location other than the current directory.

- bpo-16986: ElementTree now correctly parses a string input not only when
  an internal XML encoding is UTF-8 or US-ASCII.

- bpo-17812: Fixed quadratic complexity of base64.b32encode().

- bpo-17980: Fix possible abuse of ssl.match_hostname() for denial of
  service using certificates with many wildcards (CVE-2013-2099).

- bpo-17981: Closed socket on error in SysLogHandler.

- Fix typos in the multiprocessing module.

- bpo-17754: Make ctypes.util.find_library() independent of the locale.

- bpo-17968: Fix memory leak in os.listxattr().

- bpo-17269: Workaround for socket.getaddrinfo crash on MacOS X with port
  None or "0" and flags AI_NUMERICSERV.

- bpo-18698: Ensure imp.reload() returns the module out of sys.modules.

- bpo-18080: When building a C extension module on OS X, if the compiler is
  overriden with the CC environment variable, use the new compiler as the
  default for linking if LDSHARED is not also overriden.  This restores
  Distutils behavior introduced in 3.2.3 and inadvertently dropped in 3.3.0.

- bpo-18113: Fixed a refcount leak in the curses.panel module's
  set_userptr() method. Reported by Atsuo Ishimoto.

- bpo-18849: Fixed a Windows-specific tempfile bug where collision with an
  existing directory caused mkstemp and related APIs to fail instead of
  retrying. Report and fix by Vlad Shcherbina.

- bpo-19400: Prevent extension module build failures with Xcode 5 on OS X
  10.8+ when using a universal Python that included a PPC architecture, such
  as with a python.org 32-bit-only binary installer.

C API
-----

- bpo-18351: Fix various issues with a helper function in importlib used by
  PyImport_ExecCodeModuleWithPathnames() (and thus by extension
  PyImport_ExecCodeModule() and PyImport_ExecCodeModuleEx()).

IDLE
----

- bpo-18873: IDLE now detects Python source code encoding only in comment
  lines.

- bpo-18988: The "Tab" key now works when a word is already autocompleted.

- bpo-18489: Add tests for SearchEngine. Original patch by Phil Webster.

- bpo-18429: Format / Format Paragraph, now works when comment blocks are
  selected. As with text blocks, this works best when the selection only
  includes complete lines.

- bpo-18226: Add docstrings and unittests for FormatParagraph.py. Original
  patches by Todd Rovito and Phil Webster.

- bpo-18279: Format - Strip trailing whitespace no longer marks a file as
  changed when it has not been changed. This fix followed the addition of a
  test file originally written by Phil Webster (the issue's main goal).

- bpo-7136: In the Idle File menu, "New Window" is renamed "New File". Patch
  by Tal Einat, Roget Serwy, and Todd Rovito.

- Remove dead imports of imp.

- bpo-18196: Avoid displaying spurious SystemExit tracebacks.

- bpo-5492: Avoid traceback when exiting IDLE caused by a race condition.

- bpo-17511: Keep IDLE find dialog open after clicking "Find Next". Original
  patch by Sarah K.

- bpo-18055: Move IDLE off of imp and on to importlib.

- bpo-15392: Create a unittest framework for IDLE. Initial patch by
  Rajagopalasarma Jayakrishnan. See Lib/idlelib/idle_test/README.txt for how
  to run Idle tests.

- bpo-14146: Highlight source line while debugging on Windows.

- bpo-17532: Always include Options menu for IDLE on OS X. Patch by
  Guilherme Simões.

Tests
-----

- bpo-14407: Fix unittest test discovery in test_concurrent_futures.

- bpo-18919: Unified and extended tests for audio modules: aifc, sunau and
  wave.

- bpo-18952: Fix regression in support data downloads introduced when
  test.support was converted to a package. Regression noticed by Zachary
  Ware.

- bpo-12037: Fix test_email for desktop Windows.

- bpo-15507: test_subprocess's test_send_signal could fail if the test
  runner were run in an environment where the process inherited an ignore
  setting for SIGINT. Restore the SIGINT handler to the desired
  KeyboardInterrupt raising one during that test.

- bpo-18792: Use "127.0.0.1" or "::1" instead of "localhost" as much as
  possible, since "localhost" goes through a DNS lookup under recent Windows
  versions.

- bpo-1666318: Add a test that shutil.copytree() retains directory
  permissions.  Patch by Catherine Devlin.

- bpo-18357: add tests for dictview set difference. Patch by Fraser
  Tweedale.

- bpo-18273: move the tests in Lib/test/json_tests to Lib/test/test_json and
  make them discoverable by unittest.  Patch by Zachary Ware.

- Fix a fcntl test case on KFreeBSD, Debian #708653 (Petr Salinger).

- bpo-18396: Fix spurious test failure in test_signal on Windows when
  faulthandler is enabled (Patch by Jeremy Kloth)

- bpo-17046: Fix broken test_executable_without_cwd in test_subprocess.

- bpo-15415: Add new temp_dir() and change_cwd() context managers to
  test.support, and refactor temp_cwd() to use them.  Patch by Chris
  Jerdonek.

- bpo-15494: test.support is now a package rather than a module (Initial
  patch by Indra Talip)

- bpo-17944: test_zipfile now discoverable and uses subclassing to generate
  tests for different compression types.  Fixed a bug with skipping some
  tests due to use of exhausted iterators.

- bpo-18266: test_largefile now works with unittest test discovery and
  supports running only selected tests.  Patch by Zachary Ware.

- bpo-17767: test_locale now works with unittest test discovery. Original
  patch by Zachary Ware.

- bpo-18375: Assume --randomize when --randseed is used for running the
  testsuite.

- bpo-11185: Fix test_wait4 under AIX.  Patch by Sébastien Sablé.

- bpo-17691: test_univnewlines now works with unittest test discovery. Patch
  by Zachary Ware.

- bpo-18094: test_uuid no more reports skipped tests as passed.

- bpo-11995: test_pydoc doesn't import all sys.path modules anymore.

Documentation
-------------

- bpo-19392: Document that `imp.reload()` now also requires `__loader__` to
  be set on the module being reloaded.

- bpo-18758: Fixed and improved cross-references.

- bpo-18743: Fix references to non-existant "StringIO" module.

- bpo-18783: Removed existing mentions of Python long type in docstrings,
  error messages and comments.

- bpo-17701: Improving strftime documentation.

- bpo-18440: Clarify that `hash()` can truncate the value returned from an
  object's custom `__hash__()` method.

- bpo-17953: Mention that you shouldn't replace sys.modules and deleting key
  items will cause Python to not be happy.

- bpo-17844: Add links to encoders and decoders for bytes-to-bytes codecs.

- bpo-14097: improve the "introduction" page of the tutorial.

- bpo-17977: The documentation for the cadefault argument's default value in
  urllib.request.urlopen() is fixed to match the code.

Tools/Demos
-----------

- bpo-18873: 2to3 and the findnocoding.py script now detect Python source
  code encoding only in comment lines.

- bpo-18817: Fix a resource warning in Lib/aifc.py demo.

- bpo-18439: Make patchcheck work on Windows for ACKS, NEWS.

- bpo-18448: Fix a typo in Tools/demo/eiffel.py.

- bpo-18457: Fixed saving of formulas and complex numbers in
  Tools/demo/ss1.py.

- bpo-18449: Make Tools/demo/ss1.py work again on Python 3.  Patch by Févry
  Thibault.

- bpo-15239: Make mkstringprep.py work again on Python 3.

- bpo-12990: The "Python Launcher" on OSX could not launch python scripts
  that have paths that include wide characters.

Build
-----

- bpo-19356: Avoid using a C variabled named "_self", it's a reserved word
  in some C compilers.

- bpo-19130: Correct PCbuild/readme.txt, Python 3.3 and 3.4 require VS 2010.

- bpo-16067: Add description into MSI file to replace installer's temporary
  name.

- bpo-18256: Compilation fix for recent AIX releases.  Patch by David
  Edelsohn.

- bpo-15172: Document NASM 2.10+ as requirement for building OpenSSL 1.0.1
  on Windows.

- bpo-1584: Provide options to override default search paths for Tcl and Tk
  when building _tkinter.

- bpo-15663: Tcl/Tk 8.5.15 is now included with the OS X 10.6+ 64-bit/32-bit
  installer for 10.6+.  It is no longer necessary to install a third-party
  version of Tcl/Tk 8.5 to work around the problems in the Apple-supplied
  Tcl/Tk 8.5 shipped in OS X 10.6 and later releases.

- bpo-19019: Change the OS X installer build script to use CFLAGS instead of
  OPT for special build options.  By setting OPT, some compiler-specific
  options like -fwrapv were overridden and thus not used, which could result
  in broken interpreters when building with clang.


What's New in Python 3.3.2 final?
=================================

*Release date: 13-May-2013*

Core and Builtins
-----------------

- bpo-17237: Fix crash in the ASCII decoder on m68k.

- bpo-17408: Avoid using an obsolete instance of the copyreg module when the
  interpreter is shutdown and then started again.

- bpo-17863: In the interactive console, don't loop forever if the encoding
  can't be fetched from stdin.

- bpo-17867: Raise an ImportError if __import__ is not found in
  __builtins__.

- bpo-17857: Prevent build failures with pre-3.5.0 versions of sqlite3, such
  as was shipped with Centos 5 and Mac OS X 10.4.

- bpo-17413: sys.settrace callbacks were being passed a string instead of an
  exception instance for the 'value' element of the arg tuple if the
  exception originated from C code; now an exception instance is always
  provided.

- bpo-17782: Fix undefined behaviour on platforms where ``struct
  timespec``'s "tv_nsec" member is not a C long.

- bpo-17715: Fix segmentation fault from raising an exception in a __trunc__
  method.

- bpo-16447: Fixed potential segmentation fault when setting __name__ on a
  class.

- bpo-17669: Fix crash involving finalization of generators using yield
  from.

- bpo-17619: Make input() check for Ctrl-C correctly on Windows.

- bpo-17610: Don't rely on non-standard behavior of the C qsort() function.

- bpo-17357: Add missing verbosity output when using -v/-vv.

Library
-------

- bpo-17606: Fixed support of encoded byte strings in the XMLGenerator
  characters() and ignorableWhitespace() methods.  Original patch by
  Sebastian Ortiz Vasquez.

- bpo-17732: Ignore distutils.cfg options pertaining to install paths if a
  virtual environment is active.

- bpo-1159051: Back out a fix for handling corrupted gzip files that broke
  backwards compatibility.

- bpo-17915: Fix interoperability of xml.sax with file objects returned by
  codecs.open().

- bpo-16601: Restarting iteration over tarfile no more continues from where
  it left off. Patch by Michael Birtwell.

- bpo-17289: The readline module now plays nicer with external modules or
  applications changing the rl_completer_word_break_characters global
  variable.  Initial patch by Bradley Froehle.

- bpo-12181: select module: Fix struct kevent definition on OpenBSD 64-bit
  platforms. Patch by Federico Schwindt.

- bpo-14173: Avoid crashing when reading a signal handler during interpreter
  shutdown.

- bpo-16316: mimetypes now recognizes the .xz and .txz (.tar.xz) extensions.

- bpo-15902: Fix imp.load_module() accepting None as a file when loading an
  extension module.

- bpo-17802: Fix an UnboundLocalError in html.parser.  Initial tests by
  Thomas Barlow.

- bpo-15535: Fix namedtuple pickles which were picking up the OrderedDict
  instead of just the underlying tuple.

- bpo-17192: Restore the patch for Issue #11729 which was ommitted in 3.3.1
  when updating the bundled version of libffi used by ctypes.  Update many
  libffi files that were missed in 3.3.1's update to libffi-3.0.13.

- bpo-17358: Modules loaded by imp.load_source() and load_compiled() (and by
  extention load_module()) now have a better chance of working when
  reloaded.

- bpo-17353: Plistlib emitted empty data tags with deeply nested
  datastructures

- bpo-11714: Use 'with' statements to assure a Semaphore releases a
  condition variable. Original patch by Thomas Rachel.

- bpo-17795: Reverted backwards-incompatible change in SysLogHandler with
  Unix domain sockets.

- bpo-17555: Fix ForkAwareThreadLock so that size of after fork registry
  does not grow exponentially with generation of process.

- bpo-17707: multiprocessing.Queue's get() method does not block for short
  timeouts.

- Isuse #17720: Fix the Python implementation of pickle.Unpickler to
  correctly process the APPENDS opcode when it is used on non-list objects.

- bpo-17012: shutil.which() no longer fallbacks to the PATH environment
  variable if empty path argument is specified.  Patch by Serhiy Storchaka.

- bpo-17710: Fix pickle raising a SystemError on bogus input.

- bpo-17341: Include the invalid name in the error messages from re about
  invalid group names.

- bpo-17702: os.environ now raises KeyError with the original environment
  variable name (str on UNIX), instead of using the encoded name (bytes on
  UNIX).

- bpo-16163: Make the importlib based version of pkgutil.iter_importers work
  for submodules. Initial patch by Berker Peksag.

- bpo-16804: Fix a bug in the 'site' module that caused running 'python -S
  -m site' to incorrectly throw an exception.

- bpo-17016: Get rid of possible pointer wraparounds and integer overflows
  in the re module.  Patch by Nickolai Zeldovich.

- bpo-16658: add missing return to HTTPConnection.send() Patch by Jeff
  Knupp.

- bpo-14971: unittest test discovery no longer gets confused when a function
  has a different __name__ than its name in the TestCase class dictionary.

- bpo-17678: Fix DeprecationWarning in the http/cookiejar.py by changing the
  usage of get_origin_req_host() to origin_req_host.

- bpo-17666: Fix reading gzip files with an extra field.

- bpo-17502: Process DEFAULT values in mock side_effect that returns
  iterator. Patch by Michael Foord.

- bpo-17572: Avoid chained exceptions while passing bad directives to
  time.strptime(). Initial patch by Claudiu Popa.

- bpo-17435: threading.Timer's __init__ method no longer uses mutable
  default values for the args and kwargs parameters.

- bpo-17526: fix an IndexError raised while passing code without filename to
  inspect.findsource().  Initial patch by Tyler Doyle.

- bpo-16550: Update the opcode descriptions of pickletools to use unsigned
  integers where appropriate.  Initial patch by Serhiy Storchaka.

IDLE
----

- bpo-17838: Allow sys.stdin to be reassigned.

- bpo-13495: Avoid loading the color delegator twice in IDLE.

- bpo-17798: Allow IDLE to edit new files when specified on command line.

- bpo-14735: Update IDLE docs to omit "Control-z on Windows".

- bpo-17585: Fixed IDLE regression. Now closes when using exit() or quit().

- bpo-17657: Show full Tk version in IDLE's about dialog. Patch by Todd
  Rovito.

- bpo-17613: Prevent traceback when removing syntax colorizer in IDLE.

- bpo-1207589: Backwards-compatibility patch for right-click menu in IDLE.

- bpo-16887: IDLE now accepts Cancel in tabify/untabify dialog box.

- bpo-17625: In IDLE, close the replace dialog after it is used.

- bpo-14254: IDLE now handles readline correctly across shell restarts.

- bpo-17614: IDLE no longer raises exception when quickly closing a file.

- bpo-6698: IDLE now opens just an editor window when configured to do so.

- bpo-8900: Using keyboard shortcuts in IDLE to open a file no longer raises
  an exception.

- bpo-6649: Fixed missing exit status in IDLE. Patch by Guilherme Polo.

Tests
-----

- bpo-17833: Fix test_gdb failures seen on machines where debug symbols for
  glibc are available (seen on PPC64 Linux).

- bpo-7855: Add tests for ctypes/winreg for issues found in IronPython.
  Initial patch by Dino Viehland.

- bpo-17712: Fix test_gdb failures on Ubuntu 13.04.

- bpo-17835: Fix test_io when the default OS pipe buffer size is larger than
  one million bytes.

- bpo-17065: Use process-unique key for winreg tests to avoid failures if
  test is run multiple times in parallel (eg: on a buildbot host).

- bpo-12820: add tests for the xml.dom.minicompat module. Patch by John
  Chandler and Phil Connell.

- bpo-17790: test_set now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17789: test_random now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17779: test_osx_env now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17766: test_iterlen now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17690: test_time now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17692: test_sqlite now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17843: Removed bz2 test data file that was triggering false-positive
  virus warnings with certain antivirus software.

Documentation
-------------

- bpo-15940: Specify effect of locale on time functions.

- bpo-6696: add documentation for the Profile objects, and improve
  profile/cProfile docs.  Patch by Tom Pinckney.

- bpo-17915: Fix interoperability of xml.sax with file objects returned by
  codecs.open().

Build
-----

- bpo-17547: In configure, explicitly pass -Wformat for the benefit for GCC
  4.8.

- bpo-17962: Build with OpenSSL 1.0.1e on Windows.


What's New in Python 3.3.1 final?
=================================

*Release date: 07-Apr-2013*

Build
-----

- bpo-17550: Fix the --enable-profiling configure switch.

IDLE
----

- bpo-17625: In IDLE, close the replace dialog after it is used.


What's New in Python 3.3.1 release candidate 1?
===============================================

*Release date: 24-Mar-2013*

Core and Builtins
-----------------

- bpo-17328: Fix possible refleak in dict.setdefault.

- bpo-17223: Fix PyUnicode_FromUnicode() for string of 1 character outside
  the range U+0000-U+10ffff.

- bpo-1692335: Move initial args assignment to BaseException.__new__ to help
  pickling of naive subclasses.

- bpo-17275: Corrected class name in init error messages of the C version of
  BufferedWriter and BufferedRandom.

- bpo-7963: Fixed misleading error message that issued when object is called
  without arguments.

- bpo-5308: Raise ValueError when marshalling too large object (a sequence
  with size >= 2**31), instead of producing illegal marshal data.

- bpo-12983: Bytes literals with invalid \x escape now raise a SyntaxError
  and a full traceback including line number.

- bpo-17173: Remove uses of locale-dependent C functions (isalpha() etc.) in
  the interpreter.

- bpo-17137: When an Unicode string is resized, the internal wide character
  string (wstr) format is now cleared.

- bpo-17043: The unicode-internal decoder no longer read past the end of
  input buffer.

- bpo-17098: All modules now have __loader__ set even if they pre-exist the
  bootstrapping of importlib.

- bpo-16979: Fix error handling bugs in the unicode-escape-decode decoder.

- bpo-10156: In the interpreter's initialization phase, unicode globals are
  now initialized dynamically as needed.

- bpo-16980: Fix processing of escaped non-ascii bytes in the unicode-
  escape-decode decoder.

- bpo-16975: Fix error handling bug in the escape-decode bytes decoder.

- bpo-14850: Now a charmap decoder treats U+FFFE as "undefined mapping" in
  any mapping, not only in a string.

- bpo-16730: importlib.machinery.FileFinder now no longers raises an
  exception when trying to populate its cache and it finds out the directory
  is unreadable or has turned into a file. Reported and diagnosed by David
  Pritchard.

- bpo-16906: Fix a logic error that prevented most static strings from being
  cleared.

- bpo-11461: Fix the incremental UTF-16 decoder. Original patch by Amaury
  Forgeot d'Arc.

- bpo-16856: Fix a segmentation fault from calling repr() on a dict with a
  key whose repr raise an exception.

- bpo-16367: Fix FileIO.readall() on Windows for files larger than 2 GB.

- bpo-16455: On FreeBSD and Solaris, if the locale is C, the
  ASCII/surrogateescape codec is now used, instead of the locale encoding,
  to decode the command line arguments. This change fixes inconsistencies
  with os.fsencode() and os.fsdecode() because these operating systems
  announces an ASCII locale encoding, whereas the ISO-8859-1 encoding is
  used in practice.

- bpo-16761: Calling int() with base argument only now raises TypeError.

- bpo-16759: Support the full DWORD (unsigned long) range in Reg2Py when
  retrieving a REG_DWORD value. This corrects functions like
  winreg.QueryValueEx that may have been returning truncated values.

- bpo-14420: Support the full DWORD (unsigned long) range in Py2Reg when
  passed a REG_DWORD value. Fixes OverflowError in winreg.SetValueEx.

- bpo-16597: In buffered and text IO, call close() on the underlying stream
  if invoking flush() fails.

- bpo-16722: In the bytes() constructor, try to call __bytes__ on the
  argument before __index__.

- bpo-16602: When a weakref's target was part of a long deallocation chain,
  the object could remain reachable through its weakref even though its
  refcount had dropped to zero.

- bpo-16416: On Mac OS X, operating system data are now always
  encoded/decoded to/from UTF-8/surrogateescape, instead of the locale
  encoding (which may be ASCII if no locale environment variable is set), to
  avoid inconsistencies with os.fsencode() and os.fsdecode() functions which
  are already using UTF-8/surrogateescape.

- bpo-16588: Silence unused-but-set warnings in Python/thread_pthread

- bpo-16546: Fix: ast.YieldFrom argument is now mandatory.

- bpo-16514: Fix regression causing a traceback when sys.path[0] is None
  (actually, any non-string or non-bytes type).

- bpo-16306: Fix multiple error messages when unknown command line
  parameters where passed to the interpreter.  Patch by Hieu Nguyen.

- bpo-16215: Fix potential double memory free in str.replace().  Patch by
  Serhiy Storchaka.

- bpo-16453: Fix equality testing of dead weakref objects.

- bpo-9535: Fix pending signals that have been received but not yet handled
  by Python to not persist after os.fork() in the child process.

- bpo-15001: fix segfault on "del sys.modules['__main__']". Patch by Victor
  Stinner.

- bpo-8271: the utf-8 decoder now outputs the correct number of U+FFFD
  characters when used with the 'replace' error handler on invalid utf-8
  sequences.  Patch by Serhiy Storchaka, tests by Ezio Melotti.

- bpo-5765: Apply a hard recursion limit in the compiler instead of blowing
  the stack and segfaulting. Initial patch by Andrea Griffini.

- bpo-16402: When slicing a range, fix shadowing of exceptions from
  __index__.

- bpo-16336: fix input checking in the surrogatepass error handler. Patch by
  Serhiy Storchaka.

- bpo-8401: assigning an int to a bytearray slice (e.g. b[3:4] = 5) now
  raises an error.

- Fix segfaults on setting __qualname__ on builtin types and attempting to
  delete it on any type.

- bpo-16345: Fix an infinite loop when ``fromkeys`` on a dict subclass
  received a nonempty dict from the constructor.

- bpo-16271: Fix strange bugs that resulted from __qualname__ appearing in a
  class's __dict__ and on type.

- bpo-6074: Ensure cached bytecode files can always be updated by the user
  that created them, even when the source file is read-only.

- bpo-14783: Improve int() docstring and switch docstrings for str(),
  range(), and slice() to use multi-line signatures.

- bpo-16160: Subclass support now works for types.SimpleNamespace.

- bpo-15379: Fix passing of non-BMP characters as integers for the charmap
  decoder (already working as unicode strings).  Patch by Serhiy Storchaka.

- bpo-15144: Fix possible integer overflow when handling pointers as integer
  values, by using `Py_uintptr_t` instead of `size_t`.  Patch by Serhiy
  Storchaka.

- bpo-15965: Explicitly cast `AT_FDCWD` as (int).  Required on Solaris 10
  (which defines `AT_FDCWD` as ``0xffd19553``), harmless on other platforms.

- bpo-15839: Convert SystemErrors in `super()` to RuntimeErrors.

- bpo-15846: Fix SystemError which happened when using `ast.parse()` in an
  exception handler on code with syntax errors.

- bpo-15801: Make sure mappings passed to '%' formatting are actually
  subscriptable.

- bpo-15111: __import__ should let ImportError propagate when a module that
  is imported as a side-effect of using fromlist tries to import a module
  that cannot be found.

Library
-------

- bpo-17540: Added style to formatter configuration by dict.

- bpo-17536: Add to webbrowser's browser list: www-browser, x-www-browser,
  iceweasel, iceape.

- bpo-17488: Change the subprocess.Popen bufsize parameter default value
  from unbuffered (0) to buffering (-1) to match the behavior existing code
  expects and match the behavior of the subprocess module in Python 2 to
  avoid introducing hard to track down bugs.

- bpo-17521: Corrected non-enabling of logger following two calls to
  fileConfig().

- bpo-17508: Corrected MemoryHandler configuration in dictConfig() where the
  target handler wasn't configured first.

- bpo-17209: curses.window.get_wch() now handles correctly KeyboardInterrupt
  (CTRL+c).

- bpo-5713: smtplib now handles 421 (closing connection) error codes when
  sending mail by closing the socket and reporting the 421 error code via
  the exception appropriate to the command that received the error response.

- bpo-17192: Update the ctypes module's libffi to v3.0.13.  This
  specifically addresses a stack misalignment issue on x86 and issues on
  some more recent platforms.

- bpo-8862: Fixed curses cleanup when getkey is interrputed by a signal.

- bpo-17443: imaplib.IMAP4_stream was using the default unbuffered IO in
  subprocess, but the imap code assumes buffered IO.  In Python2 this worked
  by accident. IMAP4_stream now explicitly uses buffered IO.

- bpo-17476: Fixed regression relative to Python2 in undocumented pydoc
  'allmethods'; it was missing unbound methods on the class.

- bpo-16880: Do not assume _imp.load_dynamic() is defined in the imp module.

- bpo-16389: Fixed a performance regression relative to Python 3.1 in the
  caching of compiled regular expressions.

- bpo-17431: Fix missing import of BytesFeedParser in email.parser.

- bpo-1285086: Get rid of the refcounting hack and speed up
  urllib.parse.unquote() and urllib.parse.unquote_to_bytes().

- bpo-17368: Fix an off-by-one error in the Python JSON decoder that caused
  a failure while decoding empty object literals when object_pairs_hook was
  specified.

- bpo-14645: The email generator classes now produce output using the
  specified linesep throughout.  Previously if the prolog, epilog, or body
  were stored with a different linesep, that linesep was used.  This fix
  corrects an RFC non- compliance issue with smtplib.send_message.

- bpo-17278: Fix a crash in heapq.heappush() and heapq.heappop() when the
  list is being resized concurrently.

- bpo-16962: Use getdents64 instead of the obsolete getdents syscall in the
  subprocess module on Linux.

- bpo-17018: Make Process.join() retry if os.waitpid() fails with EINTR.

- bpo-17223: array module: Fix a crasher when converting an array containing
  invalid characters (outside range [U+0000; U+10ffff]) to Unicode:
  repr(array), str(array) and array.tounicode(). Patch written by Manuel
  Jacob.

- bpo-14720: sqlite3: Convert datetime microseconds correctly. Patch by Lowe
  Thiderman.

- bpo-17225: JSON decoder now counts columns in the first line starting with
  1, as in other lines.

- bpo-13700: Fix byte/string handling in imaplib authentication when an
  authobject is specified.

- bpo-13153: Tkinter functions now raise TclError instead of ValueError when
  a string argument contains non-BMP character.

- bpo-9669: Protect re against infinite loops on zero-width matching in non-
  greedy repeat.  Patch by Matthew Barnett.

- bpo-13169: The maximal repetition number in a regular expression has been
  increased from 65534 to 2147483647 (on 32-bit platform) or 4294967294 (on
  64-bit).

- bpo-17143: Fix a missing import in the trace module.  Initial patch by
  Berker Peksag.

- bpo-16743: Fix mmap overflow check on 32 bit Windows.

- bpo-16800: tempfile.gettempdir() no longer left temporary files when the
  disk is full. Original patch by Amir Szekely.

- bpo-16564: Fixed regression relative to Python2 in the operation of
  email.encoders.encode_7or8bit when used with binary data.

- bpo-17052: unittest discovery should use self.testLoader.

- bpo-4591: Uid and gid values larger than 2**31 are supported now.

- bpo-17141: random.vonmisesvariate() no more hangs for large kappas.

- bpo-17149: Fix random.vonmisesvariate to always return results in [0,
  2*math.pi].

- bpo-1470548: XMLGenerator now works with binary output streams.

- bpo-6975: os.path.realpath() now correctly resolves multiple nested
  symlinks on POSIX platforms.

- bpo-16564: Fixed regression relative to Python2 in the operation of
  email.encoders.encode_noop when used with binary data.

- bpo-10355: The mode, name, encoding and newlines properties now work on
  SpooledTemporaryFile objects even when they have not yet rolled over.
  Obsolete method xreadline (which has never worked in Python 3) has been
  removed.

- bpo-16686: Fixed a lot of bugs in audioop module.  Fixed crashes in
  avgpp(), maxpp() and ratecv().  Fixed an integer overflow in add(),
  bias(), and ratecv(). reverse(), lin2lin() and ratecv() no more lose
  precision for 32-bit samples. max() and rms() no more returns a negative
  result and various other functions now work correctly with 32-bit sample
  -0x80000000.

- bpo-17073: Fix some integer overflows in sqlite3 module.

- bpo-16723: httplib.HTTPResponse no longer marked closed when the
  connection is automatically closed.

- bpo-16948: Fix quoted printable body encoding for non-latin1 character
  sets in the email package.

- bpo-16811: Fix folding of headers with no value in the provisional email
  policies.

- bpo-17132: Update symbol for "yield from" grammar changes.

- bpo-17076: Make copying of xattrs more permissive of missing FS support.
  Patch by Thomas Wouters.

- bpo-17089: Expat parser now correctly works with string input not only
  when an internal XML encoding is UTF-8 or US-ASCII.  It now accepts bytes
  and strings larger than 2 GiB.

- bpo-6083: Fix multiple segmentation faults occured when PyArg_ParseTuple
  parses nested mutating sequence.

- bpo-5289: Fix ctypes.util.find_library on Solaris.

- bpo-17106: Fix a segmentation fault in io.TextIOWrapper when an underlying
  stream or a decoder produces data of an unexpected type (i.e. when
  io.TextIOWrapper initialized with text stream or use bytes-to-bytes
  codec).

- bpo-15633: httplib.HTTPResponse is now mark closed when the server sends
  less than the advertised Content-Length.

- bpo-12268: The io module file object write methods no longer abort early
  when one of its write system calls is interrupted (EINTR).

- bpo-6972: The zipfile module no longer overwrites files outside of its
  destination path when extracting malicious zip files.

- bpo-4844: ZipFile now raises BadZipFile when opens a ZIP file with an
  incomplete "End of Central Directory" record.  Original patch by Guilherme
  Polo and Alan McIntyre.

- bpo-17071: Signature.bind() now works when one of the keyword arguments is
  named ``self``.

- bpo-12004: Fix an internal error in PyZipFile when writing an invalid
  Python file. Patch by Ben Morgan.

- bpo-1602133: on Mac OS X a shared library build (``--enable-shared``) now
  fills the ``os.environ`` variable correctly.

- bpo-15505: `unittest.installHandler` no longer assumes SIGINT handler is
  set to a callable object.

- bpo-13454: Fix a crash when deleting an iterator created by
  itertools.tee() if all other iterators were very advanced before.

- bpo-12411: Fix to cgi.parse_multipart to correctly use bytes boundaries
  and bytes data. Patch by Jonas Wagner.

- bpo-16957: shutil.which() no longer searches a bare file name in the
  current directory on Unix and no longer searches a relative file path with
  a directory part in PATH directories.  Patch by Thomas Kluyver.

- bpo-16993: shutil.which() now preserves the case of the path and extension
  on Windows.

- bpo-16992: On Windows in signal.set_wakeup_fd, validate the file
  descriptor argument.

- bpo-16422: For compatibility with the Python version, the C version of
  decimal now uses strings instead of integers for rounding mode constants.

- bpo-15861: tkinter now correctly works with lists and tuples containing
  strings with whitespaces, backslashes or unbalanced braces.

- bpo-10527: Use poll() instead of select() for multiprocessing pipes.

- bpo-9720: zipfile now writes correct local headers for files larger than 4
  GiB.

- bpo-16955: Fix the poll() method for multiprocessing's socket connections
  on Windows.

- SSLContext.load_dh_params() now properly closes the input file.

- bpo-16900: Issue a ResourceWarning when an ssl socket is left unclosed.

- bpo-13899: \A, \Z, and \B now correctly match the A, Z, and B literals
  when used inside character classes (e.g. '[\A]').  Patch by Matthew
  Barnett.

- bpo-15545: Fix regression in sqlite3's iterdump method where it was
  failing if the connection used a row factory (such as sqlite3.Row) that
  produced unsortable objects. (Regression was introduced by fix for 9750).

- bpo-15972: Fix error messages when os functions expecting a file name or
  file descriptor receive the incorrect type.

- bpo-16828: Fix error incorrectly raised by bz2.compress(b'') and
  bz2.BZ2Compressor.compress(b''). Initial patch by Martin Packman.

- bpo-16541: tk_setPalette() now works with keyword arguments.

- bpo-16820: In configparser, `parser.popitem()` no longer raises
  ValueError. This makes `parser.clean()` work correctly.

- bpo-16820: In configparser, ``parser['section'] = {}`` now preserves
  section order within the parser. This makes `parser.update()` preserve
  section order as well.

- bpo-16820: In configparser, ``parser['DEFAULT'] = {}`` now correctly
  clears previous values stored in the default section. Same goes for
  ``parser.update({'DEFAULT': {}})``.

- bpo-9586: Redefine SEM_FAILED on MacOSX to keep compiler happy.

- bpo-10527: make multiprocessing use poll() instead of select() if
  available.

- bpo-16688: Now regexes contained backreferences correctly work with non-
  ASCII strings. Patch by Matthew Barnett.

- bpo-16485: Now file descriptors are closed if file header patching failed
  on closing an aifc file.

- bpo-16165: sched.scheduler.run() no longer blocks a scheduler for other
  threads.

- bpo-16641: Default values of sched.scheduler.enter() are no longer
  modifiable.

- bpo-16618: Make glob.glob match consistently across strings and bytes
  regarding leading dots.  Patch by Serhiy Storchaka.

- bpo-16713: Parsing of 'tel' urls using urlparse separates params from
  path.

- bpo-16443: Add docstrings to regular expression match objects. Patch by
  Anton Kasyanov.

- bpo-15701: Fix HTTPError info method call to return the headers
  information.

- bpo-16752: Add a missing import to modulefinder. Patch by Berker Peksag.

- bpo-16646: ftplib.FTP.makeport() might lose socket error details. (patch
  by Serhiy Storchaka)

- bpo-16626: Fix infinite recursion in glob.glob() on Windows when the
  pattern contains a wildcard in the drive or UNC path.  Patch by Serhiy
  Storchaka.

- bpo-15783: Except for the number methods, the C version of decimal now
  supports all None default values present in decimal.py. These values were
  largely undocumented.

- bpo-16298: In HTTPResponse.read(), close the socket when there is no
  Content-Length and the incoming stream is finished.  Patch by Eran
  Rundstein.

- bpo-15872: Fix 3.3 regression introduced by the new fd-based shutil.rmtree
  that caused it to not ignore certain errors when ignore_errors was set.
  Patch by Alessandro Moura and Serhiy Storchaka.

- bpo-16248: Disable code execution from the user's home directory by
  tkinter when the -E flag is passed to Python.  Patch by Zachary Ware.

- bpo-16628: Fix a memory leak in ctypes.resize().

- bpo-13614: Fix setup.py register failure with invalid rst in description.
  Patch by Julien Courteau and Pierre Paul Lefebvre.

- bpo-13512: Create ~/.pypirc securely (CVE-2011-4944).  Initial patch by
  Philip Jenvey, tested by Mageia and Debian.

- bpo-7719: Make distutils ignore ``.nfs*`` files instead of choking later
  on.  Initial patch by SilentGhost and Jeff Ramnani.

- bpo-13120: Allow to call pdb.set_trace() from thread. Patch by Ilya
  Sandler.

- bpo-16585: Make CJK encoders support error handlers that return bytes per
  PEP 383.

- bpo-10182: The re module doesn't truncate indices to 32 bits anymore.
  Patch by Serhiy Storchaka.

- bpo-16573: In 2to3, treat enumerate() like a consuming call, so
  superfluous list() calls aren't added to filter(), map(), and zip() which
  are directly passed enumerate().

- bpo-12848: The pure Python pickle implementation now treats object lengths
  as unsigned 32-bit integers, like the C implementation does. Patch by
  Serhiy Storchaka.

- bpo-16408: Fix file descriptors not being closed in error conditions in
  the zipfile module.  Patch by Serhiy Storchaka.

- bpo-16481: multiprocessing no longer leaks process handles on Windows.

- bpo-16140: The subprocess module no longer double closes its child
  subprocess.PIPE parent file descriptors on child error prior to exec().

- Remove a bare print to stdout from the subprocess module that could have
  happened if the child process wrote garbage to its pre-exec error pipe.

- bpo-16327: The subprocess module no longer leaks file descriptors used for
  stdin/stdout/stderr pipes to the child when fork() fails.

- bpo-14396: Handle the odd rare case of waitpid returning 0 when not
  expected in subprocess.Popen.wait().

- bpo-16411: Fix a bug where zlib.decompressobj().flush() might try to
  access previously- freed memory. Patch by Serhiy Storchaka.

- bpo-16357: fix calling accept() on a SSLSocket created through
  SSLContext.wrap_socket().  Original patch by Jeff McNeil.

- bpo-16409: The reporthook callback made by the legacy
  urllib.request.urlretrieve API now properly supplies a constant non-zero
  block_size as it did in Python 3.2 and 2.7.  This matches the behavior of
  urllib.request.URLopener.retrieve.

- bpo-16431: Use the type information when constructing a Decimal subtype
  from a Decimal argument.

- bpo-16350: zlib.decompressobj().decompress() now accumulates data from
  successive calls after EOF in unused_data, instead of only saving the
  argument to the last call. decompressobj().flush() now correctly sets
  unused_data and unconsumed_tail. A bug in the handling of MemoryError when
  setting the unconsumed_tail attribute has also been fixed. Patch by Serhiy
  Storchaka.

- bpo-12759: sre_parse now raises a proper error when the name of the group
  is missing. Initial patch by Serhiy Storchaka.

- bpo-16152: fix tokenize to ignore whitespace at the end of the code when
  no newline is found.  Patch by Ned Batchelder.

- bpo-16230: Fix a crash in select.select() when one the lists changes size
  while iterated on.  Patch by Serhiy Storchaka.

- bpo-16228: Fix a crash in the json module where a list changes size while
  it is being encoded.  Patch by Serhiy Storchaka.

- bpo-14897: Enhance error messages of struct.pack and struct.pack_into.
  Patch by Matti Mäki.

- bpo-12890: cgitb no longer prints spurious <p> tags in text mode when the
  logdir option is specified.

- bpo-16307: Fix multiprocessing.Pool.map_async not calling its callbacks.
  Patch by Janne Karila.

- bpo-16250: Fix URLError invocation with proper args.

- bpo-16116: Fix include and library paths to be correct when building C
  extensions in venvs.

- bpo-16245: Fix the value of a few entities in html.entities.html5.

- bpo-14398: Fix size truncation and overflow bugs in the bz2 module.

- bpo-16220: wsgiref now always calls close() on an iterable response. Patch
  by Brent Tubbs.

- bpo-16270: urllib may hang when used for retrieving files via FTP by using
  a context manager.  Patch by Giampaolo Rodola'.

- bpo-16461: Wave library should be able to deal with 4GB wav files, and
  sample rate of 44100 Hz.

- bpo-16176: Properly identify Windows 8 via platform.platform()

- bpo-16114: The subprocess module no longer provides a misleading error
  message stating that args[0] did not exist when either the cwd or
  executable keyword arguments specified a path that did not exist.

- bpo-16169: Fix ctypes.WinError()'s confusion between errno and winerror.

- bpo-16076: Made _elementtree.Element pickleable in a way that is
  compatible with the Python Element. Pickling/unpickling of
  xml.etree.ElementTree.Element works again - this was a temporary
  regression from 3.2 where the by-default imported _elementtree had no
  pickling capability.

- bpo-16089: Allow ElementTree.TreeBuilder to work again with a non-Element
  element_factory (fixes a regression in SimpleTAL).

- bpo-16913: Fix Element.itertext()'s handling of text with XML entities.,

- bpo-16034: Fix performance regressions in the new `bz2.BZ2File`
  implementation. Initial patch by Serhiy Storchaka.

- bpo-16112: platform.architecture does not correctly escape argument to
  /usr/bin/file. Patch by David Benjamin.

- bpo-15756: `subprocess.poll()` now properly handles `errno.ECHILD` to
  return a returncode of 0 when the child has already exited or cannot be
  waited on.

- bpo-15323: Improve failure message of `Mock.assert_called_once_with()`.

- bpo-16064: ``unittest -m`` claims executable is "python", not "python3".

- bpo-12376: Pass on parameters in `TextTestResult.__init__()` super call.

- bpo-15222: Insert blank line after each message in mbox mailboxes.

- bpo-16013: Fix `csv.Reader` parsing issue with ending quote characters.
  Patch by Serhiy Storchaka.

- bpo-15421: Fix an OverflowError in `Calendar.itermonthdates()` after
  `datetime.MAXYEAR`.  Patch by Cédric Krier.

- bpo-15970: `xml.etree.ElementTree` now serializes correctly the empty HTML
  elements 'meta' and 'param'.

- bpo-15842: The `SocketIO.{readable,writable,seekable}` methods now raise
  ValueError when the file-like object is closed.  Patch by Alessandro
  Moura.

- bpo-15876: Fix a refleak in the `curses` module: window.encoding.

- bpo-15881: Fix `atexit` hook in `multiprocessing`.  Original patch by
  Chris McDonough.

- bpo-15841: The readable(), writable() and seekable() methods of
  `io.BytesIO` and `io.StringIO` objects now raise ValueError when the
  object has been closed. Patch by Alessandro Moura.

- bpo-15447: Use `subprocess.DEVNULL` in webbrowser, instead of opening
  `os.devnull` explicitly and leaving it open.

- bpo-15509: `webbrowser.UnixBrowser` no longer passes empty arguments to
  Popen when ``%action`` substitutions produce empty strings.

- bpo-12776: Call `argparse` type function (specified by add_argument) only
  once. Before, the type function was called twice in the case where the
  default was specified and the argument was given as well.  This was
  especially problematic for the FileType type, as a default file would
  always be opened, even if a file argument was specified on the command
  line. (See also: bpo-11839)

- bpo-15906: Fix a regression in `argparse` caused by the preceding change,
  when ``action='append'``, ``type='str'`` and ``default=[]``.

IDLE
----

- bpo-17114: IDLE now uses non-strict config parser.

- bpo-9290: In IDLE the sys.std* streams now implement io.TextIOBase
  interface and support all mandatory methods and properties.

- bpo-16829: IDLE printing no longer fails if there are spaces or other
  special characters in the file path.

- bpo-16491: IDLE now prints chained exception tracebacks.

- bpo-16819: IDLE method completion now correctly works for bytes literals.

- bpo-16504: IDLE now catches SyntaxErrors raised by tokenizer. Patch by
  Roger Serwy.

- bpo-16511: Use default IDLE width and height if config param is not valid.
  Patch Serhiy Storchaka.

- bpo-1207589: Add Cut/Copy/Paste items to IDLE right click Context Menu
  Patch by Todd Rovito.

Tests
-----

- bpo-17448: test_sax now skips if there are no xml parsers available
  instead of raising an ImportError.

- bpo-11420: make test suite pass with -B/DONTWRITEBYTECODE set. Initial
  patch by Thomas Wouters.

- bpo-10652: make tcl/tk tests run after __all__ test, patch by Zachary
  Ware.

- bpo-11963: remove human verification from test_parser and test_subprocess.

- bpo-11732: add a new suppress_crash_popup() context manager to
  test.support that disables crash popups on Windows and use it in
  test_faulthandler and test_capi.

- bpo-13898: test_ssl no longer prints a spurious stack trace on Ubuntu.

- bpo-17249: convert a test in test_capi to use unittest and reap threads.

- bpo-17041: Fix testing when Python is configured with the --without-doc-
  strings.

- bpo-16923: Fix ResourceWarnings in test_ssl.

- bpo-15539: Added regression tests for Tools/scripts/pindent.py.

- bpo-17479: test_io now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17066: test_robotparser now works with unittest test discovery. Patch
  by Zachary Ware.

- bpo-17334: test_index now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17333: test_imaplib now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17082: test_dbm* now work with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17079: test_ctypes now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17304: test_hash now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17303: test_future* now work with unittest test discovery. Patch by
  Zachary Ware.

- bpo-17163: test_file now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16925: test_configparser now works with unittest test discovery. Patch
  by Zachary Ware.

- bpo-16918: test_codecs now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16919: test_crypt now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16910: test_bytes, test_unicode, and test_userstring now work with
  unittest test discovery.  Patch by Zachary Ware.

- bpo-16905: test_warnings now works with unittest test discovery. Initial
  patch by Berker Peksag.

- bpo-16898: test_bufio now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16888: test_array now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16896: test_asyncore now works with unittest test discovery. Patch by
  Zachary Ware.

- bpo-16897: test_bisect now works with unittest test discovery. Initial
  patch by Zachary Ware.

- bpo-16852: test_genericpath, test_posixpath, test_ntpath, and test_macpath
  now work with unittest test discovery.  Patch by Zachary Ware.

- bpo-16748: test_heapq now works with unittest test discovery.

- bpo-15324: Fix regrtest parsing of --fromfile, --match, and --randomize
  options.

- bpo-16702: test_urllib2_localnet tests now correctly ignores proxies for
  localhost tests.

- bpo-16664: Add regression tests for glob's behaviour concerning entries
  starting with a ".".  Patch by Sebastian Kreft.

- bpo-16559: Add more tests for the json module, including some from the
  official test suite at json.org.  Patch by Serhiy Storchaka.

- bpo-16661: Fix the `os.getgrouplist()` test by not assuming that it gives
  the same output as :command:`id -G`.

- bpo-16115: Add some tests for the executable argument to
  subprocess.Popen().  Initial patch by Kushal Das.

- bpo-16126: PyErr_Format format mismatch in _testcapimodule.c. Patch by
  Serhiy Storchaka.

- bpo-15304: Fix warning message when `os.chdir()` fails inside
  `test.support.temp_cwd()`.  Patch by Chris Jerdonek.

- bpo-15802: Fix test logic in `TestMaildir.test_create_tmp()`. Patch by
  Serhiy Storchaka.

- bpo-15557: Add a test suite for the `webbrowser` module, thanks to Anton
  Barkovsky.

- bpo-16698: Skip posix test_getgroups when built with OS X deployment
  target prior to 10.6.

Build
-----

- bpo-17550: Fix the --enable-profiling configure switch.

- bpo-17425: Build with openssl 1.0.1d on Windows.

- bpo-16754: Fix the incorrect shared library extension on linux. Introduce
  two makefile macros SHLIB_SUFFIX and EXT_SUFFIX. SO now has the value of
  SHLIB_SUFFIX again (as in 2.x and 3.1). The SO macro is removed in 3.4.

- bpo-5033: Fix building of the sqlite3 extension module when the SQLite
  library version has "beta" in it. Patch by Andreas Pelme.

- bpo-17228: Fix building without pymalloc.

- bpo-3718: Use AC_ARG_VAR to set MACHDEP in configure.ac.

- bpo-17031: Fix running regen in cross builds.

- bpo-3754: fix typo in pthread AC_CACHE_VAL.

- bpo-15484: Fix _PYTHON_PROJECT_BASE for srcdir != builddir builds; use
  _PYTHON_PROJECT_BASE in distutils/sysconfig.py.

- bpo-17029: Let h2py search the multiarch system include directory.

- bpo-16953: Fix socket module compilation on platforms with
  HAVE_BROKEN_POLL. Patch by Jeffrey Armstrong.

- bpo-16836: Enable IPv6 support even if IPv6 is disabled on the build host.

- Cross compiling needs host and build settings. configure no longer creates
  a broken PYTHON_FOR_BUILD variable when --build is missing.

- Fix cross compiling issue in setup.py, ensure that lib_dirs and inc_dirs
  are defined in cross compiling mode, too.

- bpo-16593: Have BSD 'make -s' do the right thing, thanks to Daniel Shahaf

- bpo-16262: fix out-of-src-tree builds, if mercurial is not installed.

- bpo-15298: ensure _sysconfigdata is generated in build directory, not
  source directory.

- bpo-15833: Fix a regression in 3.3 that resulted in exceptions being
  raised if importlib failed to write byte-compiled files.  This affected
  attempts to build Python out-of-tree from a read-only source directory.

- bpo-15923: Fix a mistake in ``asdl_c.py`` that resulted in a TypeError
  after 2801bf875a24 (see #15801).

- bpo-15819: Make sure we can build Python out-of-tree from a read-only
  source directory. (Somewhat related to issue #9860.)

- bpo-15587: Enable Tk high-resolution text rendering on Macs with Retina
  displays. Applies to Tkinter apps, such as IDLE, on OS X framework builds
  linked with Cocoa Tk 8.5.

- bpo-17161: make install now also installs a python3 man page.

C API
-----

- bpo-16881: Fix Py_ARRAY_LENGTH macro for GCC < 3.1.

Documentation
-------------

- bpo-17538: Document XML vulnerabilties

- bpo-16642: sched.scheduler timefunc initial default is time.monotonic.
  Patch by Ramchandra Apte

- bpo-17047: remove doubled words in docs and docstrings reported by Serhiy
  Storchaka and Matthew Barnett.

- bpo-15465: Document the versioning macros in the C API docs rather than
  the standard library docs. Patch by Kushal Das.

- bpo-16406: Combine the pages for uploading and registering to PyPI.

- bpo-16403: Document how distutils uses the maintainer field in PKG-INFO.
  Patch by Jyrki Pulliainen.

- bpo-16695: Document how glob handles filenames starting with a dot.
  Initial patch by Jyrki Pulliainen.

- bpo-8890: Stop advertising an insecure practice by replacing uses of the
  /tmp directory with better alternatives in the documentation. Patch by
  Geoff Wilson.

- bpo-17203: add long option names to unittest discovery docs.

- bpo-13094: add "Why do lambdas defined in a loop with different values all
  return the same result?" programming FAQ.

- bpo-14901: Update portions of the Windows FAQ. Patch by Ashish Nitin
  Patil.

- bpo-16267: Better document the 3.3+ approach to combining @abstractmethod
  with @staticmethod, @classmethod and @property

- bpo-15209: Clarify exception chaining description in exceptions module
  documentation

- bpo-15990: Improve argument/parameter documentation.

- bpo-16209: Move the documentation for the str built-in function to a new
  str class entry in the "Text Sequence Type" section.

- bpo-13538: Improve str() and object.__str__() documentation.

- bpo-16489: Make it clearer that importlib.find_loader() requires any and
  all packages to be separately imported.

- bpo-16400: Update the description of which versions of a given package
  PyPI displays.

- bpo-15677: Document that zlib and gzip accept a compression level of 0 to
  mean 'no compression'. Patch by Brian Brazil.

- bpo-16197: Update winreg docstrings and documentation to match code. Patch
  by Zachary Ware.

- bpo-8040: added a version switcher to the documentation.  Patch by Yury
  Selivanov.

- bpo-16241: Document -X faulthandler command line option. Patch by Marek
  Šuppa.

- Additional comments and some style changes in the concurrent.futures URL
  retrieval example

- bpo-16115: Improve subprocess.Popen() documentation around args, shell,
  and executable arguments.

- bpo-15533: Clarify docs and add tests for `subprocess.Popen()`'s cwd
  argument.

- bpo-15979: Improve timeit documentation.

- bpo-16036: Improve documentation of built-in `int()`'s signature and
  arguments.

- bpo-15935: Clarification of `argparse` docs, re: add_argument() type and
  default arguments.  Patch contributed by Chris Jerdonek.

- bpo-11964: Document a change in v3.2 to the behavior of the indent
  parameter of json encoding operations.

- bpo-15116: Remove references to appscript as it is no longer being
  supported.

Tools/Demos
-----------

- bpo-17156: pygettext.py now uses an encoding of source file and correctly
  writes and escapes non-ascii characters.

- bpo-15539: Fix a number of bugs in Tools/scripts/pindent.py.  Now
  pindent.py works with a "with" statement.  pindent.py no longer produces
  improper indentation. pindent.py now works with continued lines broken
  after "class" or "def" keywords and with continuations at the start of
  line.

- bpo-15378: Fix Tools/unicode/comparecodecs.py.  Patch by Serhiy Storchaka.

- bpo-16476: Fix json.tool to avoid including trailing whitespace.

- bpo-16549: Make json.tool work again on Python 3 and add tests. Initial
  patch by Berker Peksag and Serhiy Storchaka.

- bpo-13301: use ast.literal_eval() instead of eval() in
  Tools/i18n/msgfmt.py Patch by Serhiy Storchaka.


What's New in Python 3.3.0 final?
=================================

*Release date: 29-Sep-2012*

Core and Builtins
-----------------

- bpo-16046: Fix loading sourceless legacy .pyo files.

- bpo-16060: Fix refcounting bug when `__trunc__()` returns an object whose
  `__int__()` gives a non-integer.  Patch by Serhiy Storchaka.

Library
-------

- bpo-16012: Fix a regression in pyexpat. The parser's `UseForeignDTD()`
  method doesn't require an argument again.


What's New in Python 3.3.0 release candidate 3?
===============================================

*Release date: 23-Sep-2012*

Core and Builtins
-----------------

- bpo-15900: Fix reference leak in `PyUnicode_TranslateCharmap()`.

- bpo-15926: Fix crash after multiple reinitializations of the interpreter.

- bpo-15895: Fix FILE pointer leak in one error branch of
  `PyRun_SimpleFileExFlags()` when filename points to a pyc/pyo file,
  closeit is false an and set_main_loader() fails.

- Fixes for a few crash and memory leak regressions found by Coverity.

Library
-------

- bpo-15882: Change `_decimal` to accept any coefficient tuple when
  constructing infinities. This is done for backwards compatibility with
  decimal.py: Infinity coefficients are undefined in _decimal (in accordance
  with the specification).

- bpo-15925: Fix a regression in `email.util` where the `parsedate()` and
  `parsedate_tz()` functions did not return None anymore when the argument
  could not be parsed.

- bpo-15973: Fix a segmentation fault when comparing datetime timezone
  objects.

- bpo-15977: Fix memory leak in Modules/_ssl.c when the function
  _set_npn_protocols() is called multiple times, thanks to Daniel
  Sommermann.

- bpo-15969: `faulthandler` module: rename dump_tracebacks_later() to
  dump_traceback_later() and cancel_dump_tracebacks_later() to
  cancel_dump_traceback_later().

- _decimal module: use only C 89 style comments.


What's New in Python 3.3.0 release candidate 2?
===============================================

*Release date: 09-Sep-2012*

Core and Builtins
-----------------

- bpo-13992: The trashcan mechanism is now thread-safe.  This eliminates
  sporadic crashes in multi-thread programs when several long deallocator
  chains ran concurrently and involved subclasses of built-in container
  types.

- bpo-15784: Modify `OSError`.__str__() to better distinguish between errno
  error numbers and Windows error numbers.

- bpo-15781: Fix two small race conditions in import's module locking.

Library
-------

- bpo-15847: Fix a regression in argparse, which did not accept tuples as
  argument lists anymore.

- bpo-15828: Restore support for C extensions in `imp.load_module()`.

- bpo-15340: Fix importing the random module when ``/dev/urandom`` cannot be
  opened. This was a regression caused by the hash randomization patch.

- bpo-10650: Deprecate the watchexp parameter of the `Decimal.quantize()`
  method.

- bpo-15785: Modify `window.get_wch()` API of the curses module: return a
  character for most keys, and an integer for special keys, instead of
  always returning an integer. So it is now possible to distinguish special
  keys like keypad keys.

- bpo-14223: Fix `window.addch()` of the curses module for special
  characters like curses.ACS_HLINE: the Python function addch(int) and
  addch(bytes) is now calling the C function waddch()/mvwaddch() (as it was
  done in Python 3.2), instead of wadd_wch()/mvwadd_wch(). The Python
  function addch(str) is still calling the C function
  wadd_wch()/mvwadd_wch() if the Python curses is linked to libncursesw.

Build
-----

- bpo-15822: Really ensure 2to3 grammar pickles are properly installed
  (replaces fixes for Issue #15645).

Documentation
-------------

- bpo-15814: The memoryview enhancements in 3.3.0 accidentally permitted the
  hashing of multi-dimensional memorviews and memoryviews with multi-byte
  item formats. The intended restrictions have now been documented - they
  will be correctly enforced in 3.3.1.


What's New in Python 3.3.0 release candidate 1?
===============================================

*Release date: 25-Aug-2012*

Core and Builtins
-----------------

- bpo-15573: memoryview comparisons are now performed by value with full
  support for any valid struct module format definition.

- bpo-15316: When an item in the fromlist for `__import__()` doesn't exist,
  don't raise an error, but if an exception is raised as part of an import
  do let that propagate.

- bpo-15778: Ensure that ``str(ImportError(msg))`` returns a str even when
  msg isn't a str.

- bpo-2051: Source file permission bits are once again correctly copied to
  the cached bytecode file. (The migration to importlib reintroduced this
  problem because these was no regression test. A test has been added as
  part of this patch)

- bpo-15761: Fix crash when ``PYTHONEXECUTABLE`` is set on Mac OS X.

- bpo-15726: Fix incorrect bounds checking in PyState_FindModule.  Patch by
  Robin Schreiber.

- bpo-15604: Update uses of `PyObject_IsTrue()` to check for and handle
  errors correctly. Patch by Serhiy Storchaka.

- bpo-14846: `importlib.FileFinder` now handles the case where the directory
  being searched is removed after a previous import attempt.

Library
-------

- bpo-13370: Ensure that ctypes works on Mac OS X when Python is compiled
  using the clang compiler.

- bpo-13072: The array module's 'u' format code is now deprecated and will
  be removed in Python 4.0.

- bpo-15544: Fix Decimal.__float__ to work with payload-carrying NaNs.

- bpo-15776: Allow pyvenv to work in existing directory with --clean.

- bpo-15249: email's BytesGenerator now correctly mangles From lines (when
  requested) even if the body contains undecodable bytes.

- bpo-15777: Fix a refleak in _posixsubprocess.

- bpo-665194: Update `email.utils.localtime` to use datetime.astimezone and
  correctly handle historic changes in UTC offsets.

- bpo-15199: Fix JavaScript's default MIME type to application/javascript.
  Patch by Bohuslav Kabrda.

- bpo-12643: `code.InteractiveConsole` now respects `sys.excepthook` when
  displaying exceptions.  Patch by Aaron Iles.

- bpo-13579: `string.Formatter` now understands the 'a' conversion
  specifier.

- bpo-15595: Fix ``subprocess.Popen(universal_newlines=True)`` for certain
  locales (utf-16 and utf-32 family). Patch by Chris Jerdonek.

- bpo-15477: In cmath and math modules, add workaround for platforms whose
  system- supplied log1p function doesn't respect signs of zeros.

- bpo-15715: `importlib.__import__()` will silence an ImportError when the
  use of fromlist leads to a failed import.

- bpo-14669: Fix pickling of connections and sockets on Mac OS X by
  sending/receiving an acknowledgment after file descriptor transfer.
  TestPicklingConnection has been reenabled for Mac OS X.

- bpo-11062: Fix adding a message from file to Babyl mailbox.

- bpo-15646: Prevent equivalent of a fork bomb when using `multiprocessing`
  on Windows without the ``if __name__ == '__main__'`` idiom.

IDLE
----

- bpo-15678: Fix IDLE menus when started from OS X command line (3.3.0b2
  regression).

Documentation
-------------

- Touched up the Python 2 to 3 porting guide.

- bpo-14674: Add a discussion of the `json` module's standard compliance.
  Patch by Chris Rebert.

- Create a 'Concurrent Execution' section in the docs, and split up the
  'Optional Operating System Services' section to use a more user-centric
  classification scheme (splitting them across the new CE section, IPC and
  text processing). Operating system limitations can be reflected with the
  Sphinx ``:platform:`` tag, it doesn't make sense as part of the Table of
  Contents.

- bpo-4966: Bring the sequence docs up to date for the Py3k transition and
  the many language enhancements since they were original written.

- The "path importer" misnomer has been replaced with Eric Snow's more-
  awkward-but-at-least-not-wrong suggestion of "path based finder" in the
  import system reference docs.

- bpo-15640: Document `importlib.abc.Finder` as deprecated.

- bpo-15630: Add an example for "continue" stmt in the tutorial.  Patch by
  Daniel Ellis.

Tests
-----

- bpo-15747: ZFS always returns EOPNOTSUPP when attempting to set the
  UF_IMMUTABLE flag (via either chflags or lchflags); refactor affected
  tests in test_posix.py to account for this.

- bpo-15285: Refactor the approach for testing connect timeouts using two
  external hosts that have been configured specifically for this type of
  test.

- bpo-15743: Remove the deprecated method usage in `urllib` tests. Patch by
  Jeff Knupp.

- bpo-15615: Add some tests for the `json` module's handling of invalid
  input data. Patch by Kushal Das.

Build
-----

- Output lib files for PGO build into PGO directory.

- Pick up 32-bit launcher from PGO directory on 64-bit PGO build.

- Drop ``PC\python_nt.h`` as it's not used.  Add input dependency on custom
  build step.

- bpo-15511: Drop explicit dependency on pythonxy.lib from _decimal amd64
  configuration.

- Add missing PGI/PGO configurations for pywlauncher.

- bpo-15645: Ensure 2to3 grammar pickles are properly installed.


What's New in Python 3.3.0 beta 2?
==================================

*Release date: 12-Aug-2012*

Core and Builtins
-----------------

- bpo-15568: Fix the return value of ``yield from`` when StopIteration is
  raised by a custom iterator.

- bpo-13119: `sys.stdout` and `sys.stderr` are now using "\r\n" newline on
  Windows, as Python 2.

- bpo-15534: Fix the fast-search function for non-ASCII Unicode strings.

- bpo-15508: Fix the docstring for `__import__()` to have the proper default
  value of 0 for 'level' and to not mention negative levels since they are
  not supported.

- bpo-15425: Eliminated traceback noise from more situations involving
  importlib.

- bpo-14578: Support modules registered in the Windows registry again.

- bpo-15466: Stop using TYPE_INT64 in marshal, to make importlib.h (and
  other byte code files) equal between 32-bit and 64-bit systems.

- bpo-1692335: Move initial exception args assignment to
  `BaseException.__new__()` to help pickling of naive subclasses.

- bpo-12834: Fix `PyBuffer_ToContiguous()` for non-contiguous arrays.

- bpo-15456: Fix code `__sizeof__()` after #12399 change.  Patch by Serhiy
  Storchaka.

- bpo-15404: Refleak in PyMethodObject repr.

- bpo-15394: An issue in `PyModule_Create()` that caused references to be
  leaked on some error paths has been fixed.  Patch by Julia Lawall.

- bpo-15368: An issue that caused bytecode generation to be non-
  deterministic has been fixed.

- bpo-15202: Consistently use the name "follow_symlinks" for new parameters
  in os and shutil functions.

- bpo-15314: ``__main__.__loader__`` is now set correctly during interpreter
  startup.

- bpo-15111: When a module imported using 'from import' has an ImportError
  inside itself, don't mask that fact behind a generic ImportError for the
  module itself.

- bpo-15293: Add GC support to the AST base node type.

- bpo-15291: Fix a memory leak where AST nodes where not properly
  deallocated.

- bpo-15110: Fix the tracebacks generated by "import xxx" to not show the
  importlib stack frames.

- bpo-16369: Global PyTypeObjects not initialized with PyType_Ready(...).

- bpo-15020: The program name used to search for Python's path is now
  "python3" under Unix, not "python".

- bpo-15897: zipimport.c doesn't check return value of fseek(). Patch by
  Felipe Cruz.

- bpo-15033: Fix the exit status bug when modules invoked using -m switch,
  return the proper failure return value (1). Patch contributed by Jeff
  Knupp.

- bpo-15229: An `OSError` subclass whose __init__ doesn't call back
  OSError.__init__ could produce incomplete instances, leading to crashes
  when calling str() on them.

- bpo-15307: Virtual environments now use symlinks with framework builds on
  Mac OS X, like other POSIX builds.

Library
-------

- bpo-14590: configparser now correctly strips inline comments when
  delimiter occurs earlier without preceding space.

- bpo-15424: Add a `__sizeof__()` implementation for array objects.  Patch
  by Ludwig Hähne.

- bpo-15576: Allow extension modules to act as a package's __init__ module.

- bpo-15502: Have `importlib.invalidate_caches()` work on `sys.meta_path`
  instead of `sys.path_importer_cache`.

- bpo-15163: Pydoc shouldn't list __loader__ as module data.

- bpo-15471: Do not use mutable objects as defaults for
  `importlib.__import__()`.

- bpo-15559: To avoid a problematic failure mode when passed to the bytes
  constructor, objects in the ipaddress module no longer implement
  `__index__()` (they still implement `__int__()` as appropriate).

- bpo-15546: Fix handling of pathological input data in the peek() and
  read1() methods of the BZ2File, GzipFile and LZMAFile classes.

- bpo-12655: Instead of requiring a custom type, `os.sched_getaffinity()`
  and `os.sched_setaffinity()` now use regular sets of integers to represent
  the CPUs a process is restricted to.

- bpo-15538: Fix compilation of the `socket.getnameinfo()` /
  `socket.getaddrinfo()` emulation code.  Patch by Philipp Hagemeister.

- bpo-15519: Properly expose WindowsRegistryFinder in importlib (and use the
  correct term for it).  Original patch by Eric Snow.

- bpo-15502: Bring the importlib ABCs into line with the current state of
  the import protocols given PEP 420.  Original patch by Eric Snow.

- bpo-15499: Launching a webbrowser in Unix used to sleep for a few seconds.
  Original patch by Anton Barkovsky.

- bpo-15463: The faulthandler module truncates strings to 500 characters,
  instead of 100, to be able to display long file paths.

- bpo-6056: Make `multiprocessing` use setblocking(True) on the sockets it
  uses. Original patch by J Derek Wilson.

- bpo-15364: Fix sysconfig.get_config_var('srcdir') to be an absolute path.

- bpo-15413: `os.times()` had disappeared under Windows.

- bpo-15402: An issue in the struct module that caused `sys.getsizeof()` to
  return incorrect results for struct.Struct instances has been fixed.
  Initial patch by Serhiy Storchaka.

- bpo-15232: When mangle_from is True, `email.Generator` now correctly
  mangles lines that start with 'From ' that occur in a MIME preamble or
  epilogue.

- bpo-15094: Incorrectly placed #endif in _tkinter.c.  Patch by Serhiy
  Storchaka.

- bpo-13922: `argparse` no longer incorrectly strips '--'s that appear after
  the first one.

- bpo-12353: `argparse` now correctly handles null argument values.

- bpo-10017: Fix TypeError using pprint on dictionaries with user-defined
  types as keys or other unorderable keys. (See also: bpo-14998)

- bpo-15397: `inspect.getmodulename()` is now based directly on importlib
  via a new `importlib.machinery.all_suffixes()` API.

- bpo-14635: `telnetlib` will use poll() rather than select() when possible
  to avoid failing due to the select() file descriptor limit.

- bpo-15180: Clarify posixpath.join() error message when mixing str & bytes.

- bpo-15343: pkgutil now includes an iter_importer_modules implementation
  for importlib.machinery.FileFinder (similar to the way it already handled
  zipimport.zipimporter).

- bpo-15314: runpy now sets __main__.__loader__ correctly.

- bpo-15357: The import emulation in pkgutil is now deprecated. pkgutil uses
  importlib internally rather than the emulation.

- bpo-15233: Python now guarantees that callables registered with the atexit
  module will be called in a deterministic order.

- bpo-15238: `shutil.copystat()` now copies Linux "extended attributes".

- bpo-15230: runpy.run_path now correctly sets __package__ as described in
  the documentation.

- bpo-15315: Support VS 2010 in distutils cygwincompiler.

- bpo-15294: Fix a regression in pkgutil.extend_path()'s handling of nested
  namespace packages.

- bpo-15056: `imp.cache_from_source()` and `imp.source_from_cache()` raise
  NotImplementedError when `sys.implementation.cache_tag` is set to None.

- bpo-15256: Grammatical mistake in exception raised by `imp.find_module()`.

- bpo-5931: `wsgiref` environ variable SERVER_SOFTWARE will specify an
  implementation specific term like CPython, Jython instead of generic
  "Python".

- bpo-13248: Remove obsolete argument "max_buffer_size" of BufferedWriter
  and BufferedRWPair, from the io module.

- bpo-13248: Remove obsolete argument "version" of
  `argparse.ArgumentParser`.

- bpo-14814: Implement more consistent ordering and sorting behaviour for
  ipaddress objects.

- bpo-14814: `ipaddress` network objects correctly return NotImplemented
  when compared to arbitrary objects instead of raising TypeError.

- bpo-14990: Correctly fail with SyntaxError on invalid encoding
  declaration.

- bpo-14814: `ipaddress` now provides more informative error messages when
  constructing instances directly (changes permitted during beta due to
  provisional API status).

- bpo-15247: `io.FileIO` now raises an error when given a file descriptor
  pointing to a directory.

- bpo-15261: Stop os.stat(fd) crashing on Windows when fd not open.

- bpo-15166: Implement `imp.get_tag()` using `sys.implementation.cache_tag`.

- bpo-15210: Catch KeyError when `importlib.__init__()` can't find
  _frozen_importlib in sys.modules, not ImportError.

- bpo-15030: `importlib.abc.PyPycLoader` now supports the new source size
  header field in .pyc files.

- bpo-5346: Preserve permissions of mbox, MMDF and Babyl mailbox files on
  flush().

- bpo-10571: Fix the "--sign" option of distutils' upload command.  Patch by
  Jakub Wilk.

- bpo-9559: If messages were only added, a new file is no longer created and
  renamed over the old file when flush() is called on an mbox, MMDF or Babyl
  mailbox.

- bpo-10924: Fixed `crypt.mksalt()` to use a RNG that is suitable for
  cryptographic purpose.

- bpo-15184: Ensure consistent results of OS X configuration tailoring for
  universal builds by factoring out common OS X-specific customizations from
  sysconfig, distutils.sysconfig, distutils.util, and
  distutils.unixccompiler into a new module _osx_support.

C API
-----

- bpo-15610: `PyImport_ImportModuleEx()` now uses a 'level' of 0 instead of
  -1.

- bpo-15169: Strip out the C implementation of `imp.source_from_cache()`
  used by PyImport_ExecCodeModuleWithPathnames() and used the Python code
  instead. Leads to PyImport_ExecCodeModuleObject() to not try to infer the
  source path from the bytecode path as
  PyImport_ExecCodeModuleWithPathnames() does. (See also: bpo-14599)

Library
-------

- bpo-6493: An issue in ctypes on Windows that caused structure bitfields of
  type `ctypes.c_uint32` and width 32 to incorrectly be set has been fixed.

- bpo-15194: Update libffi to the 3.0.11 release.

IDLE
----

- bpo-13052: Fix IDLE crashing when replace string in Search/Replace dialog
  ended with ``\``.  Patch by Roger Serwy.

Tools/Demos
-----------

- bpo-15458: python-config gets a new option --configdir to print the $LIBPL
  value.

- Move importlib.test.benchmark to Tools/importbench.

- bpo-12605: The gdb hooks for debugging CPython (within Tools/gdb) have
  been enhanced to show information on more C frames relevant to CPython
  within the "py-bt" and "py-bt-full" commands:

  * C frames that are waiting on the GIL
  * C frames that are garbage-collecting
  * C frames that are due to the invocation of a PyCFunction

Documentation
-------------

- bpo-15041: Update "see also" list in tkinter documentation.

- bpo-15444: Use proper spelling for non-ASCII contributor names.  Patch by
  Serhiy Storchaka.

- bpo-15295: Reorganize and rewrite the documentation on the import system.

- bpo-15230: Clearly document some of the limitations of the runpy module
  and nudge readers towards importlib when appropriate.

- bpo-15053: Copy Python 3.3 import lock change notice to all relevant
  functions in imp instead of just at the top of the relevant section.

- bpo-15288: Link to the term "loader" in notes in pkgutil about how things
  won't work as expected in Python 3.3 and mark the requisite functions as
  "changed" since they will no longer work with modules directly imported by
  import itself.

- bpo-13557: Clarify effect of giving two different namespaces to `exec()`
  or `execfile()`.

- bpo-15250: Document that `filecmp.dircmp()` compares files shallowly.
  Patch contributed by Chris Jerdonek.

Tests
-----

- bpo-15467: Move helpers for `__sizeof__()` tests into test_support.  Patch
  by Serhiy Storchaka.

- bpo-15320: Make iterating the list of tests thread-safe when running tests
  in multiprocess mode. Patch by Chris Jerdonek.

- bpo-15168: Move `importlib.test` to `test.test_importlib`.

- bpo-15091: Reactivate a test on UNIX which was failing thanks to a
  forgotten `importlib.invalidate_caches()` call.

- bpo-15230: Adopted a more systematic approach in the runpy tests.

- bpo-15300: Ensure the temporary test working directories are in the same
  parent folder when running tests in multiprocess mode from a Python build.
  Patch by Chris Jerdonek.

- bpo-15284: Skip {send,recv}msg tests in test_socket when IPv6 is not
  enabled. Patch by Brian Brazil.

- bpo-15277: Fix a resource leak in support.py when IPv6 is disabled.  Patch
  by Brian Brazil.

Build
-----

- bpo-11715: Fix multiarch detection without having Debian development tools
  (dpkg-dev) installed.

- bpo-15037: Build OS X installers with local copy of ncurses 5.9 libraries
  to avoid curses.unget_wch bug present in older versions of ncurses such as
  those shipped with OS X.

- bpo-15560: Fix building _sqlite3 extension on OS X with an SDK.  Also, for
  OS X installers, ensure consistent sqlite3 behavior and feature
  availability by building a local copy of libsqlite3 rather than depending
  on the wide range of versions supplied with various OS X releases.

- bpo-8847: Disable COMDAT folding in Windows PGO builds.

- bpo-14018: Fix OS X Tcl/Tk framework checking when using OS X SDKs.

- bpo-16256: OS X installer now sets correct permissions for doc directory.

- bpo-15431: Add _freeze_importlib project to regenerate importlib.h on
  Windows. Patch by Kristján Valur Jónsson.

- bpo-14197: For OS X framework builds, ensure links to the shared library
  are created with the proper ABI suffix.

- bpo-14330: For cross builds, don't use host python, use host search paths
  for host compiler.

- bpo-15235: Allow Berkley DB versions up to 5.3 to build the dbm module.

- bpo-15268: Search curses.h in /usr/include/ncursesw.


What's New in Python 3.3.0 beta 1?
==================================

*Release date: 27-Jun-2012*

Core and Builtins
-----------------

- Fix a (most likely) very rare memory leak when calling main() and not
  being able to decode a command-line argument.

- bpo-14815: Use Py_ssize_t instead of long for the object hash, to preserve
  all 64 bits of hash on Win64.

- bpo-12268: File readline, readlines and read() or readall() methods no
  longer lose data when an underlying read system call is interrupted.
  IOError is no longer raised due to a read system call returning EINTR from
  within these methods.

- bpo-11626: Add _SizeT functions to stable ABI.

- bpo-15142: Fix reference leak when deallocating instances of types created
  using PyType_FromSpec().

- bpo-10053: Don't close FDs when FileIO.__init__ fails. Loosely based on
  the work by Hirokazu Yamamoto.

- bpo-15096: Removed support for ur'' as the raw notation isn't compatible
  with Python 2.x's raw unicode strings.

- bpo-13783: Generator objects now use the identifier APIs internally

- bpo-14874: Restore charmap decoding speed to pre-PEP 393 levels. Patch by
  Serhiy Storchaka.

- bpo-15026: utf-16 encoding is now significantly faster (up to 10x). Patch
  by Serhiy Storchaka.

- bpo-11022: open() and io.TextIOWrapper are now calling
  locale.getpreferredencoding(False) instead of
  locale.getpreferredencoding() in text mode if the encoding is not
  specified. Don't change temporary the locale encoding using
  locale.setlocale(), use the current locale encoding instead of the user
  preferred encoding.

- bpo-14673: Add Eric Snow's sys.implementation implementation.

- bpo-15038: Optimize python Locks on Windows.

Library
-------

- bpo-16305: Fix a segmentation fault occurring when interrupting
  math.factorial.

- bpo-12288: Consider '0' and '0.0' as valid initialvalue for tkinter
  SimpleDialog.

- bpo-15512: Add a __sizeof__ implementation for parser. Patch by Serhiy
  Storchaka.

- bpo-15469: Add a __sizeof__ implementation for deque objects. Patch by
  Serhiy Storchaka.

- bpo-15489: Add a __sizeof__ implementation for BytesIO objects. Patch by
  Serhiy Storchaka.

- bpo-15487: Add a __sizeof__ implementation for buffered I/O objects. Patch
  by Serhiy Storchaka.

- bpo-15514: Correct __sizeof__ support for cpu_set. Patch by Serhiy
  Storchaka.

- bpo-15177: Added dir_fd parameter to os.fwalk().

- bpo-15061: Re-implemented hmac.compare_digest() in C to prevent further
  timing analysis and to support all buffer protocol aware objects as well
  as ASCII only str instances safely.

- bpo-15164: Change return value of platform.uname() from a plain tuple to a
  collections.namedtuple.

- Support Mageia Linux in the platform module.

- bpo-11678: Support Arch linux in the platform module.

- bpo-15118: Change return value of os.uname() and os.times() from plain
  tuples to immutable iterable objects with named attributes (structseq
  objects).

- Speed up _decimal by another 10-15% by caching the thread local context
  that was last accessed. In the pi benchmark (64-bit platform, prec=9),
  _decimal is now only 1.5x slower than float.

- Remove the packaging module, which is not ready for prime time.

- bpo-15154: Add "dir_fd" parameter to os.rmdir, remove "rmdir" parameter
  from os.remove / os.unlink.

- bpo-4489: Add a shutil.rmtree that isn't susceptible to symlink attacks.
  It is used automatically on platforms supporting the necessary os.openat()
  and os.unlinkat() functions. Main code by Martin von Löwis.

- bpo-15156: HTMLParser now uses the new "html.entities.html5" dictionary.

- bpo-11113: add a new "html5" dictionary containing the named character
  references defined by the HTML5 standard and the equivalent Unicode
  character(s) to the html.entities module.

- bpo-15114: the strict mode of HTMLParser and the HTMLParseError exception
  are deprecated now that the parser is able to parse invalid markup.

- bpo-3665: \u and \U escapes are now supported in unicode regular
  expressions.  Patch by Serhiy Storchaka.

- bpo-15153: Added inspect.getgeneratorlocals to simplify white box testing
  of generator state updates

- bpo-13062: Added inspect.getclosurevars to simplify testing stateful
  closures

- bpo-11024: Fixes and additional tests for Time2Internaldate.

- bpo-14626: Large refactoring of functions / parameters in the os module.
  Many functions now support "dir_fd" and "follow_symlinks" parameters; some
  also support accepting an open file descriptor in place of a path string.
  Added os.support_* collections as LBYL helpers.  Removed many functions
  only previously seen in 3.3 alpha releases (often starting with "f" or
  "l", or ending with "at").  Originally suggested by Serhiy Storchaka;
  implemented by Larry Hastings.

- bpo-15008: Implement PEP 362 "Signature Objects". Patch by Yury Selivanov.

- bpo-15138: base64.urlsafe_{en,de}code() are now 3-4x faster.

- bpo-444582: Add shutil.which, for finding programs on the system path.
  Original patch by Erik Demaine, with later iterations by Jan Killian and
  Brian Curtin.

- bpo-14837: SSL errors now have ``library`` and ``reason`` attributes
  describing precisely what happened and in which OpenSSL submodule.  The
  str() of a SSLError is also enhanced accordingly.

- bpo-9527: datetime.astimezone() method will now supply a class timezone
  instance corresponding to the system local timezone when called with no
  arguments.

- bpo-14653: email.utils.mktime_tz() no longer relies on system mktime()
  when timezone offest is supplied.

- bpo-14684: zlib.compressobj() and zlib.decompressobj() now support the use
  of predefined compression dictionaries. Original patch by Sam Rushing.

- Fix GzipFile's handling of filenames given as bytes objects.

- bpo-14772: Return destination values from some shutil functions.

- bpo-15064: Implement context manager protocol for multiprocessing types

- bpo-15101: Make pool finalizer avoid joining current thread.

- bpo-14657: The frozen instance of importlib used for bootstrap is now also
  the module imported as importlib._bootstrap.

- bpo-14055: Add __sizeof__ support to _elementtree.

- bpo-15054: A bug in tokenize.tokenize that caused string literals with 'b'
  prefixes to be incorrectly tokenized has been fixed. Patch by Serhiy
  Storchaka.

- bpo-15006: Allow equality comparison between naive and aware time or
  datetime objects.

- bpo-15036: Mailbox no longer throws an error if a flush is done between
  operations when removing or changing multiple items in mbox, MMDF, or
  Babyl mailboxes.

- bpo-14059: Implement multiprocessing.Barrier.

- bpo-15061: The inappropriately named hmac.secure_compare has been renamed
  to hmac.compare_digest, restricted to operating on bytes inputs only and
  had its documentation updated to more accurately reflect both its intent
  and its limitations

- bpo-13841: Make child processes exit using sys.exit() on Windows.

- bpo-14936: curses_panel was converted to PEP 3121 and PEP 384 API. Patch
  by Robin Schreiber.

- bpo-1667546: On platforms supporting tm_zone and tm_gmtoff fields in
  struct tm, time.struct_time objects returned by time.gmtime(),
  time.localtime() and time.strptime() functions now have tm_zone and
  tm_gmtoff attributes. Original patch by Paul Boddie.

- Rename adjusted attribute to adjustable in time.get_clock_info() result.

- bpo-3518: Remove references to non-existent BaseManager.from_address()
  method.

- bpo-13857: Added textwrap.indent() function (initial patch by Ezra Berch)

- bpo-2736: Added datetime.timestamp() method.

- bpo-13854: Make multiprocessing properly handle non-integer non-string
  argument to SystemExit.

- bpo-12157: Make pool.map() empty iterables correctly.  Initial patch by
  mouad.

- bpo-11823: disassembly now shows argument counts on calls with keyword
  args.

- bpo-14711: os.stat_float_times() has been deprecated.

- LZMAFile now accepts the modes "rb"/"wb"/"ab" as synonyms of "r"/"w"/"a".

- The bz2 and lzma modules now each contain an open() function, allowing
  compressed files to readily be opened in text mode as well as binary mode.

- BZ2File.__init__() and LZMAFile.__init__() now accept a file object as
  their first argument, rather than requiring a separate "fileobj" argument.

- gzip.open() now accepts file objects as well as filenames.

- bpo-14992: os.makedirs(path, exist_ok=True) would raise an OSError when
  the path existed and had the S_ISGID mode bit set when it was not
  explicitly asked for.  This is no longer an exception as mkdir cannot
  control if the OS sets that bit for it or not.

- bpo-14989: Make the CGI enable option to http.server available via command
  line.

- bpo-14987: Add a missing import statement to inspect.

- bpo-1079: email.header.decode_header now correctly parses all the examples
  in RFC2047. There is a necessary visible behavior change: the leading
  and/or trailing whitespace on ASCII parts is now preserved.

- bpo-14969: Better handling of exception chaining in contextlib.ExitStack

- bpo-14963: Convert contextlib.ExitStack.__exit__ to use an iterative
  algorithm (Patch by Alon Horev)

- bpo-14785: Add sys._debugmallocstats() to help debug low-level memory
  allocation issues

- bpo-14443: Ensure that .py files are byte-compiled with the correct Python
  executable within bdist_rpm even on older versions of RPM

C API
-----

- bpo-15146: Add PyType_FromSpecWithBases. Patch by Robin Schreiber.

- bpo-15042: Add PyState_AddModule and PyState_RemoveModule. Add version
  guard for Py_LIMITED_API additions. Patch by Robin Schreiber.

- bpo-13783: Inadvertent additions to the public C API in the PEP 380
  implementation have either been removed or marked as private interfaces.

Library
-------

- bpo-15000: Support the "unique" x32 architecture in _posixsubprocess.c.

IDLE
----

- bpo-9803: Don't close IDLE on saving if breakpoint is open. Patch by Roger
  Serwy.

- bpo-14962: Update text coloring in IDLE shell window after changing
  options.  Patch by Roger Serwy.

Documentation
-------------

- bpo-15176: Clarified behavior, documentation, and implementation of
  os.listdir().

- bpo-14982: Document that pkgutil's iteration functions require the non-
  standard iter_modules() method to be defined by an importer (something the
  importlib importers do not define).

- bpo-15081: Document PyState_FindModule. Patch by Robin Schreiber.

- bpo-14814: Added first draft of ipaddress module API reference

Tests
-----

- bpo-15187: Bugfix: remove temporary directories test_shutil was leaving
  behind.

- bpo-14769: test_capi now has SkipitemTest, which cleverly checks for
  "parity" between PyArg_ParseTuple() and the Python/getargs.c static
  function skipitem() for all possible "format units".

- test_nntplib now tolerates being run from behind NNTP gateways that add
  "X-Antivirus" headers to articles

- bpo-15043: test_gdb is now skipped entirely if gdb security settings block
  loading of the gdb hooks

- bpo-14963: Add test cases for exception handling behaviour in
  contextlib.ExitStack (Initial patch by Alon Horev)

Build
-----

- bpo-13590: Improve support for OS X Xcode 4:   * Try to avoid building
  Python or extension modules with problematic     llvm-gcc compiler.   *
  Since Xcode 4 removes ppc support, extension module builds now     check
  for ppc compiler support and automatically remove ppc and     ppc64 archs
  when not available. * Since Xcode 4 no longer install SDKs in default
  locations,     extension module builds now revert to using installed
  headers     and libs if the SDK used to build the interpreter is not
  available.   * Update ./configure to use better defaults for universal
  builds;     in particular, --enable- universalsdk=yes uses the Xcode
  default     SDK and --with-universal-archs now defaults to "intel" if ppc
  not available.

- bpo-14225: Fix Unicode support for curses (#12567) on OS X

- bpo-14928: Fix importlib bootstrap issues by using a custom executable
  (Modules/_freeze_importlib) to build Python/importlib.h.


What's New in Python 3.3.0 alpha 4?
===================================

*Release date: 31-May-2012*

Core and Builtins
-----------------

- bpo-14835: Make plistlib output empty arrays & dicts like OS X. Patch by
  Sidney San Martín.

- bpo-14744: Use the new _PyUnicodeWriter internal API to speed up str%args
  and str.format(args).

- bpo-14930: Make memoryview objects weakrefable.

- bpo-14775: Fix a potential quadratic dict build-up due to the garbage
  collector repeatedly trying to untrack dicts.

- bpo-14857: fix regression in references to PEP 3135 implicit __class__
  closure variable (Reopens issue #12370)

- bpo-14712: Virtual environments. Implemented by Vinay Sajip. (See also:
  PEP 405)

- bpo-14660: Namespace packages. Implemented by Eric Smith. (See also: PEP
  420)

- bpo-14494: Fix __future__.py and its documentation to note that absolute
  imports are the default behavior in 3.0 instead of 2.7. Patch by Sven
  Marnach.

- bpo-9260: A finer-grained import lock.  Most of the import sequence now
  uses per- module locks rather than the global import lock, eliminating
  well-known issues with threads and imports.

- bpo-14624: UTF-16 decoding is now 3x to 4x faster on various inputs. Patch
  by Serhiy Storchaka.

- asdl_seq and asdl_int_seq are now Py_ssize_t sized.

- bpo-14133: Implement suppression of __context__ display with an attribute
  on BaseException. This replaces the original mechanism of PEP 409. (See
  also: PEP 415)

- bpo-14417: Mutating a dict during lookup now restarts the lookup instead
  of raising a RuntimeError (undoes issue #14205).

- bpo-14738: Speed-up UTF-8 decoding on non-ASCII data.  Patch by Serhiy
  Storchaka.

- bpo-14700: Fix two broken and undefined-behaviour-inducing overflow checks
  in old-style string formatting.

Library
-------

- bpo-14690: Use monotonic clock instead of system clock in the sched,
  subprocess and trace modules.

- bpo-14443: Tell rpmbuild to use the correct version of Python in
  bdist_rpm. Initial patch by Ross Lagerwall.

- bpo-12515: email now registers a defect if it gets to EOF while parsing a
  MIME part without seeing the closing MIME boundary.

- bpo-1672568: email now always decodes base64 payloads, adding padding and
  ignoring non- base64-alphabet characters if needed, and registering
  defects for any such problems.

- bpo-14925: email now registers a defect when the parser decides that there
  is a missing header/body separator line.  MalformedHeaderDefect, which the
  existing code would never actually generate, is deprecated.

- bpo-10365: File open dialog now works instead of crashing even when the
  parent window is closed before the dialog. Patch by Roger Serwy.

- bpo-8739: Updated smtpd to support RFC 5321, and added support for the RFC
  1870 SIZE extension.

- bpo-665194: Added a localtime function to email.utils to provide an aware
  local datetime for use in setting Date headers.

- bpo-12586: Added new provisional policies that implement convenient
  unicode support for email headers.  See What's New for details.

- bpo-14731: Refactored email Policy framework to support full backward
  compatibility with Python 3.2 by default yet allow for the introduction of
  new features through new policies.  Note that Policy.must_be_7bit is
  renamed to cte_type.

- bpo-14876: Use user-selected font for highlight configuration.

- bpo-14920: Fix the help(urllib.parse) failure on locale C on terminals.
  Have ascii characters in help.

- bpo-14548: Make multiprocessing finalizers check pid before running to
  cope with possibility of gc running just after fork.

- bpo-14036: Add an additional check to validate that port in urlparse does
  not go in illegal range and returns None.

- bpo-14862: Add missing names to os.__all__

- bpo-14875: Use float('inf') instead of float('1e66666') in the json
  module.

- bpo-13585: Added contextlib.ExitStack

- PEP 3144, Issue #14814: Added the ipaddress module

- bpo-14426: Correct the Date format in Expires attribute of Set-Cookie
  Header in Cookie.py.

- bpo-14588: The types module now provide new_class() and prepare_class()
  functions to support PEP 3115 compliant dynamic class creation. Patch by
  Daniel Urban and Nick Coghlan.

- bpo-13152: Allow to specify a custom tabsize for expanding tabs in
  textwrap. Patch by John Feuerstein.

- bpo-14721: Send the correct 'Content-length: 0' header when the body is an
  empty string ''. Initial Patch contributed by Arve Knudsen.

- bpo-14072: Fix parsing of 'tel' URIs in urlparse by making the check for
  ports stricter.

- bpo-9374: Generic parsing of query and fragment portions of url for any
  scheme. Supported both by RFC3986 and RFC2396.

- bpo-14798: Fix the functions in pyclbr to raise an ImportError when the
  first part of a dotted name is not a package. Patch by Xavier de Gaye.

- bpo-12098: multiprocessing on Windows now starts child processes using the
  same sys.flags as the current process.  Initial patch by Sergey Mezentsev.

- bpo-13031: Small speed-up for tarfile when unzipping tarfiles. Patch by
  Justin Peel.

- bpo-14780: urllib.request.urlopen() now has a ``cadefault`` argument to
  use the default certificate store.  Initial patch by James Oakley.

- bpo-14829: Fix bisect and range() indexing with large indices (>= 2 ** 32)
  under 64-bit Windows.

- bpo-14732: The _csv module now uses PEP 3121 module initialization. Patch
  by Robin Schreiber.

- bpo-14809: Add HTTP status codes introduced by RFC 6585 to http.server and
  http.client. Patch by EungJun Yi.

- bpo-14777: tkinter may return undecoded UTF-8 bytes as a string when
  accessing the Tk clipboard.  Modify clipboad_get() to first request type
  UTF8_STRING when no specific type is requested in an X11 windowing
  environment, falling back to the current default type STRING if that
  fails. Original patch by Thomas Kluyver.

- bpo-14773: Fix os.fwalk() failing on dangling symlinks.

- bpo-12541: Be lenient with quotes around Realm field of HTTP Basic
  Authentation in urllib2.

- bpo-14807: move undocumented tarfile.filemode() to stat.filemode() and add
  doc entry. Add tarfile.filemode alias with deprecation warning.

- bpo-13815: TarFile.extractfile() now returns io.BufferedReader objects.

- bpo-14532: Add a secure_compare() helper to the hmac module, to mitigate
  timing attacks. Patch by Jon Oberheide.

- Add importlib.util.resolve_name().

- bpo-14366: Support lzma compression in zip files. Patch by Serhiy
  Storchaka.

- bpo-13959: Introduce importlib.find_loader() and document
  imp.find_module/load_module as deprecated.

- bpo-14082: shutil.copy2() now copies extended attributes, if possible.
  Patch by Hynek Schlawack.

- bpo-13959: Make importlib.abc.FileLoader.load_module()/get_filename() and
  importlib.machinery.ExtensionFileLoader.load_module() have their single
  argument be optional. Allows for the replacement (and thus deprecation) of
  imp.load_source()/load_package()/load_compiled().

- bpo-13959: imp.get_suffixes() has been deprecated in favour of the new
  attributes on importlib.machinery: SOURCE_SUFFIXES,
  DEBUG_BYTECODE_SUFFIXES, OPTIMIZED_BYTECODE_SUFFIXES, BYTECODE_SUFFIXES,
  and EXTENSION_SUFFIXES. This led to an indirect deprecation of
  inspect.getmoduleinfo().

- bpo-14662: Prevent shutil failures on OS X when destination does not
  support chflag operations.  Patch by Hynek Schlawack.

- bpo-14157: Fix time.strptime failing without a year on February 29th.
  Patch by Hynek Schlawack.

- bpo-14753: Make multiprocessing's handling of negative timeouts the same
  as it was in Python 3.2.

- bpo-14583: Fix importlib bug when a package's __init__.py would first
  import one of its modules then raise an error.

- bpo-14741: Fix missing support for Ellipsis ('...') in parser module.

- bpo-14697: Fix missing support for set displays and set comprehensions in
  parser module.

- bpo-14701: Fix missing support for 'raise ... from' in parser module.

- Add support for timeouts to the acquire() methods of multiprocessing's
  lock/semaphore/condition proxies.

- bpo-13989: Add support for text mode to gzip.open().

- bpo-14127: The os.stat() result object now provides three additional
  fields: st_ctime_ns, st_mtime_ns, and st_atime_ns, providing those times
  as an integer with nanosecond resolution.  The functions os.utime(),
  os.lutimes(), and os.futimes() now accept a new parameter, ns, which
  accepts mtime and atime as integers with nanosecond resolution.

- bpo-14127: shutil.copystat now preserves exact mtime and atime on
  filesystems providing nanosecond resolution. (See also: bpo-10148)

IDLE
----

- bpo-14958: Change IDLE systax highlighting to recognize all string and
  byte literals supported in Python 3.3.

- bpo-10997: Prevent a duplicate entry in IDLE's "Recent Files" menu.

- bpo-14929: Stop IDLE 3.x from closing on Unicode decode errors when
  grepping. Patch by Roger Serwy.

- bpo-12510: Attempting to get invalid tooltip no longer closes IDLE. Other
  tooltipss have been corrected or improved and the number of tests has been
  tripled. Original patch by Roger Serwy.

Tools/Demos
-----------

- bpo-14695: Bring Tools/parser/unparse.py support up to date with the
  Python 3.3 Grammar.

Build
-----

- bpo-14472: Update .gitignore. Patch by Matej Cepl.

- Upgrade Windows library versions: bzip 1.0.6, OpenSSL 1.0.1c.

- bpo-14693: Under non-Windows platforms, hashlib's fallback modules are
  always compiled, even if OpenSSL is present at build time.

- bpo-13210: Windows build now uses VS2010, ported from VS2008.

C API
-----

- bpo-14705: The PyArg_Parse() family of functions now support the 'p'
  format unit, which accepts a "boolean predicate" argument.  It converts
  any Python value into an integer--0 if it is "false", and 1 otherwise.

Documentation
-------------

- bpo-14863: Update the documentation of os.fdopen() to reflect the fact
  that it's only a thin wrapper around open() anymore.

- bpo-14588: The language reference now accurately documents the Python 3
  class definition process. Patch by Nick Coghlan.

- bpo-14943: Correct a default argument value for winreg.OpenKey and
  correctly list the argument names in the function's explanation.


What's New in Python 3.3.0 alpha 3?
===================================

*Release date: 01-May-2012*

Core and Builtins
-----------------

- bpo-14699: Fix calling the classmethod descriptor directly.

- bpo-14433: Prevent msvcrt crash in interactive prompt when stdin is
  closed.

- bpo-14521: Make result of float('nan') and float('-nan') more consistent
  across platforms.

- bpo-14646: __import__() sets __loader__ if the loader did not.

- bpo-14605: No longer have implicit entries in sys.meta_path. If
  sys.meta_path is found to be empty, raise ImportWarning.

- bpo-14605: No longer have implicit entries in sys.path_hooks. If
  sys.path_hooks is found to be empty, a warning will be raised. None is now
  inserted into sys.path_importer_cache if no finder was discovered. This
  also means imp.NullImporter is no longer implicitly used.

- bpo-13903: Implement PEP 412. Individual dictionary instances can now
  share their keys with other dictionaries. Classes take advantage of this
  to share their instance dictionary keys for improved memory and
  performance.

- bpo-11603: Setting __repr__ to __str__ now raises a RuntimeError when
  repr() or str() is called on such an object.

- bpo-14658: Fix binding a special method to a builtin implementation of a
  special method with a different name.

- bpo-14630: Fix a memory access bug for instances of a subclass of int with
  value 0.

- bpo-14339: Speed improvements to bin, oct and hex functions.  Patch by
  Serhiy Storchaka.

- bpo-14385: It is now possible to use a custom type for the __builtins__
  namespace, instead of a dict. It can be used for sandboxing for example.
  Raise also a NameError instead of ImportError if __build_class__ name if
  not found in __builtins__.

- bpo-12599: Be more strict in accepting None compared to a false-like
  object for importlib.util.module_for_loader and
  importlib.machinery.PathFinder.

- bpo-14612: Fix jumping around with blocks by setting f_lineno.

- bpo-14592: Attempting a relative import w/o __package__ or __name__ set in
  globals raises a KeyError.

- bpo-14607: Fix keyword-only arguments which started with ``__``.

- bpo-10854: The ImportError raised when an extension module on Windows
  fails to import now uses the new path and name attributes from Issue
  #1559549.

- bpo-13889: Check and (if necessary) set FPU control word before calling
  any of the dtoa.c string <-> float conversion functions, on MSVC builds of
  Python. This fixes issues when embedding Python in a Delphi app.

- __import__() now matches PEP 328 and documentation by defaulting 'index'
  to 0 instead of -1 and removing support for negative values.

- bpo-2377: Make importlib the implementation of __import__().

- bpo-1559549: ImportError now has 'name' and 'path' attributes that are set
  using keyword arguments to its constructor. They are currently not set by
  import as they are meant for use by importlib.

- bpo-14474: Save and restore exception state in thread.start_new_thread()
  while writing error message if the thread leaves a unhandled exception.

- bpo-13019: Fix potential reference leaks in bytearray.extend().  Patch by
  Suman Saha.

Library
-------

- bpo-14768: os.path.expanduser('~/a') doesn't works correctly when HOME is
  '/'.

- bpo-14371: Support bzip2 in zipfile module.  Patch by Serhiy Storchaka.

- bpo-13183: Fix pdb skipping frames after hitting a breakpoint and running
  step.  Patch by Xavier de Gaye.

- bpo-14696: Fix parser module to understand 'nonlocal' declarations.

- bpo-10941: Fix imaplib.Internaldate2tuple to produce correct result near
  the DST transition.  Patch by Joe Peterson.

- bpo-9154: Fix parser module to understand function annotations.

- bpo-6085: In http.server.py SimpleHTTPServer.address_string returns the
  client ip address instead client hostname. Patch by Charles-François
  Natali.

- bpo-14309: Deprecate time.clock(), use time.perf_counter() or
  time.process_time() instead.

- bpo-14428: Implement the PEP 418. Add time.get_clock_info(),
  time.perf_counter() and time.process_time() functions, and rename
  time.steady() to time.monotonic().

- bpo-14646: importlib.util.module_for_loader() now sets __loader__ and
  __package__ (when possible).

- bpo-14664: It is now possible to use @unittest.skip{If,Unless} on a test
  class that doesn't inherit from TestCase (i.e. a mixin).

- bpo-4892: multiprocessing Connections can now be transferred over
  multiprocessing Connections.  Patch by Richard Oudkerk (sbt).

- bpo-14160: TarFile.extractfile() failed to resolve symbolic links when the
  links were not located in an archive subdirectory.

- bpo-14638: pydoc now treats non-string __name__ values as if they were
  missing, instead of raising an error.

- bpo-13684: Fix httplib tunnel issue of infinite loops for certain sites
  which send EOF without trailing \r\n.

- bpo-14605: Add importlib.abc.FileLoader, importlib.machinery.(FileFinder,
  SourceFileLoader, SourcelessFileLoader, ExtensionFileLoader).

- bpo-13959: imp.cache_from_source()/source_from_cache() now follow
  os.path.join()/split() semantics for path manipulation instead of its
  prior, custom semantics of caring the right-most path separator forward in
  path joining.

- bpo-2193: Allow ":" character in Cookie NAME values.

- bpo-14629: tokenizer.detect_encoding will specify the filename in the
  SyntaxError exception if found at readline.__self__.name.

- bpo-14629: Raise SyntaxError in tokenizer.detect_encoding if the first two
  lines have non-UTF-8 characters without an encoding declaration.

- bpo-14308: Fix an exception when a "dummy" thread is in the threading
  module's active list after a fork().

- bpo-11750: The Windows API functions scattered in the _subprocess and
  _multiprocessing.win32 modules now live in a single module "_winapi".
  Patch by sbt.

- bpo-14087: multiprocessing: add Condition.wait_for(). Patch by sbt.

- bpo-14538: HTMLParser can now parse correctly start tags that contain a
  bare '/'.

- bpo-14452: SysLogHandler no longer inserts a UTF-8 BOM into the message.

- bpo-14386: Expose the dict_proxy internal type as types.MappingProxyType.

- bpo-13959: Make imp.reload() always use a module's __loader__ to perform
  the reload.

- bpo-13959: Add imp.py and rename the built-in module to _imp, allowing for
  re- implementing parts of the module in pure Python.

- bpo-13496: Fix potential overflow in bisect.bisect algorithm when applied
  to a collection of size > sys.maxsize / 2.

- Have importlib take advantage of ImportError's new 'name' and 'path'
  attributes.

- bpo-14399: zipfile now recognizes that the archive has been modified even
  if only the comment is changed.  In addition, the TypeError that results
  from trying to set a non-binary value as a comment is now raised at the
  time the comment is set rather than at the time the zipfile is written.

- trace.CoverageResults.is_ignored_filename() now ignores any name that
  starts with "<" and ends with ">" instead of special-casing "<string>" and
  "<doctest ".

- bpo-12537: The mailbox module no longer depends on knowledge of internal
  implementation details of the email package Message object.

- bpo-7978: socketserver now restarts the select() call when EINTR is
  returned.  This avoids crashing the server loop when a signal is received.
  Patch by Jerzy Kozera.

- bpo-14522: Avoid duplicating socket handles in multiprocessing.connection.
  Patch by sbt.

- Don't Py_DECREF NULL variable in io.IncrementalNewlineDecoder.

- bpo-3033: Add displayof parameter to tkinter font. Patch by Guilherme
  Polo.

- bpo-14482: Raise a ValueError, not a NameError, when trying to create a
  multiprocessing Client or Listener with an AF_UNIX type address under
  Windows.  Patch by Popa Claudiu.

- bpo-802310: Generate always unique tkinter font names if not directly
  passed.

- bpo-14151: Raise a ValueError, not a NameError, when trying to create a
  multiprocessing Client or Listener with an AF_PIPE type address under non-
  Windows platforms. Patch by Popa Claudiu.

- bpo-14493: Use gvfs-open or xdg-open in webbrowser.

Build
-----

- "make touch" will now touch generated files that are checked into
  Mercurial, after a "hg update" which failed to bring the timestamps into
  the right order.

Tests
-----

- bpo-14026: In test_cmd_line_script, check that sys.argv is populated
  correctly for the various invocation approaches (Patch by Jason Yeo)

- bpo-14032: Fix incorrect variable name in test_cmd_line_script debugging
  message (Patch by Jason Yeo)

- bpo-14589: Update certificate chain for sha256.tbs-internet.com, fixing a
  test failure in test_ssl.

- bpo-14355: Regrtest now supports the standard unittest test loading, and
  will use it if a test file contains no `test_main` method.

IDLE
----

- bpo-8515: Set __file__ when run file in IDLE. Initial patch by Bruce
  Frederiksen.

- bpo-14496: Fix wrong name in idlelib/tabbedpages.py. Patch by Popa
  Claudiu.

Tools/Demos
-----------

- bpo-3561: The Windows installer now has an option, off by default, for
  placing the Python installation into the system "Path" environment
  variable.

- bpo-13165: stringbench is now available in the Tools/stringbench folder.
  It used to live in its own SVN project.

C API
-----

- bpo-14098: New functions PyErr_GetExcInfo and PyErr_SetExcInfo. Patch by
  Stefan Behnel.


What's New in Python 3.3.0 alpha 2?
===================================

*Release date: 01-Apr-2012*

Core and Builtins
-----------------

- bpo-1683368: object.__new__ and object.__init__ raise a TypeError if they
  are passed arguments and their complementary method is not overridden.

- bpo-14378: Fix compiling ast.ImportFrom nodes with a "__future__" string
  as the module name that was not interned.

- bpo-14331: Use significantly less stack space when importing modules by
  allocating path buffers on the heap instead of the stack.

- bpo-14334: Prevent in a segfault in type.__getattribute__ when it was not
  passed strings.

- bpo-1469629: Allow cycles through an object's __dict__ slot to be
  collected. (For example if ``x.__dict__ is x``).

- bpo-14205: dict lookup raises a RuntimeError if the dict is modified
  during a lookup.

- bpo-14220: When a generator is delegating to another iterator with the
  yield from syntax, it needs to have its ``gi_running`` flag set to True.

- bpo-14435: Remove dedicated block allocator from floatobject.c and rely on
  the PyObject_Malloc() api like all other objects.

- bpo-14471: Fix a possible buffer overrun in the winreg module.

- bpo-14288: Allow the serialization of builtin iterators

Library
-------

- bpo-14300: Under Windows, sockets created using socket.dup() now allow
  overlapped I/O. Patch by sbt.

- bpo-13872: socket.detach() now marks the socket closed (as mirrored in the
  socket repr()).  Patch by Matt Joiner.

- bpo-14406: Fix a race condition when using ``concurrent.futures.wait(
  return_when=ALL_COMPLETED)``.  Patch by Matt Joiner.

- bpo-5136: deprecate old, unused functions from tkinter.

- bpo-14416: syslog now defines the LOG_ODELAY and LOG_AUTHPRIV constants if
  they are defined in <syslog.h>.

- bpo-14295: Add unittest.mock

- bpo-7652: Add --with-system-libmpdec option to configure for linking the
  _decimal module against an installed libmpdec.

- bpo-14380: MIMEText now defaults to utf-8 when passed non-ASCII unicode
  with no charset specified.

- bpo-10340: asyncore - properly handle EINVAL in dispatcher constructor on
  OSX; avoid to call handle_connect in case of a disconnected socket which
  was not meant to connect.

- bpo-14204: The ssl module now has support for the Next Protocol
  Negotiation extension, if available in the underlying OpenSSL library.
  Patch by Colin Marc.

- bpo-3035: Unused functions from tkinter are marked as pending deprecated.

- bpo-12757: Fix the skipping of doctests when python is run with -OO so
  that it works in unittest's verbose mode as well as non-verbose mode.

- bpo-7652: Integrate the decimal floating point libmpdec library to speed
  up the decimal module. Performance gains of the new C implementation are
  between 10x and 100x, depending on the application.

- bpo-14269: SMTPD now conforms to the RFC and requires a HELO command
  before MAIL, RCPT, or DATA.

- bpo-13694: asynchronous connect in asyncore.dispatcher does not set addr
  attribute.

- bpo-14344: fixed the repr of email.policy objects.

- bpo-11686: Added missing entries to email package __all__ lists (mostly
  the new Bytes classes).

- bpo-14335: multiprocessing's custom Pickler subclass now inherits from the
  C-accelerated implementation.  Patch by sbt.

- bpo-10484: Fix the CGIHTTPServer's PATH_INFO handling problem.

- bpo-11199: Fix the with urllib which hangs on particular ftp urls.

- Improve the memory utilization and speed of functools.lru_cache.

- bpo-14222: Use the new time.steady() function instead of time.time() for
  timeout in queue and threading modules to not be affected of system time
  update.

- bpo-13248: Remove lib2to3.pytree.Base.get_prefix/set_prefix.

- bpo-14234: CVE-2012-0876: Randomize hashes of xml attributes in the hash
  table internal to the pyexpat module's copy of the expat library to avoid
  a denial of service due to hash collisions.  Patch by David Malcolm with
  some modifications by the expat project.

- bpo-12818: format address no longer needlessly \ escapes ()s in names when
  the name ends up being quoted.

- bpo-14062: BytesGenerator now correctly folds Header objects, including
  using linesep when folding.

- bpo-13839: When invoked on the command-line, the pstats module now accepts
  several filenames of profile stat files and merges them all. Patch by Matt
  Joiner.

- bpo-14291: Email now defaults to utf-8 for non-ASCII unicode headers
  instead of raising an error.  This fixes a regression relative to 2.7.

- bpo-989712: Support using Tk without a mainloop.

- bpo-3835: Refuse to use unthreaded Tcl in threaded Python.

- bpo-2843: Add new Tk API to Tkinter.

- bpo-14184: Increase the default stack size for secondary threads on Mac OS
  X to avoid interpreter crashes when using threads on 10.7.

- bpo-14180: datetime.date.fromtimestamp(),
  datetime.datetime.fromtimestamp() and datetime.datetime.utcfromtimestamp()
  now raise an OSError instead of ValueError if localtime() or gmtime()
  failed.

- bpo-14180: time.ctime(), gmtime(), time.localtime(),
  datetime.date.fromtimestamp(), datetime.datetime.fromtimestamp() and
  datetime.datetime.utcfromtimestamp() now raises an OverflowError, instead
  of a ValueError, if the timestamp does not fit in time_t.

- bpo-14180: datetime.datetime.fromtimestamp() and
  datetime.datetime.utcfromtimestamp() now round microseconds towards zero
  instead of rounding to nearest with ties going away from zero.

- bpo-10543: Fix unittest test discovery with Jython bytecode files.

- bpo-1178863: Separate initialisation from setting when initializing
  Tkinter.Variables; harmonize exceptions to ValueError; only delete
  variables that have not been deleted; assert that variable names are
  strings.

- bpo-14104: Implement time.monotonic() on Mac OS X, patch written by
  Nicholas Riley.

- bpo-13394: the aifc module now uses warnings.warn() to signal warnings.

- bpo-14252: Fix subprocess.Popen.terminate() to not raise an error under
  Windows when the child process has already exited.

- bpo-14223: curses.addch() is no more limited to the range 0-255 when the
  Python curses is not linked to libncursesw. It was a regression introduced
  in Python 3.3a1.

- bpo-14168: Check for presence of Element._attrs in minidom before
  accessing it.

- bpo-12328: Fix multiprocessing's use of overlapped I/O on Windows. Also,
  add a multiprocessing.connection.wait(rlist, timeout=None) function for
  polling multiple objects at once.  Patch by sbt.

- bpo-14007: Accept incomplete TreeBuilder objects (missing start, end, data
  or close method) for the Python implementation as well. Drop the no-op
  TreeBuilder().xml() method from the C implementation.

- bpo-14210: pdb now has tab-completion not only for command names, but also
  for their arguments, wherever possible.

- bpo-14310: Sockets can now be with other processes on Windows using the
  api socket.socket.share() and socket.fromshare().

- bpo-10576: The gc module now has a 'callbacks' member that will get called
  when garbage collection takes place.

Build
-----

- bpo-14557: Fix extensions build on HP-UX. Patch by Adi Roiban.

- bpo-14387: Do not include accu.h from Python.h.

- bpo-14359: Only use O_CLOEXEC in _posixmodule.c if it is defined. Based on
  patch from Hervé Coatanhay.

- bpo-14321: Do not run pgen during the build if files are up to date.

Documentation
-------------

- bpo-14034: added the argparse tutorial.

- bpo-14324: Fix configure tests for cross builds.

- bpo-14327: Call AC_CANONICAL_HOST in configure.ac and check in
  config.{guess,sub}. Don't use uname calls for cross builds.

Library
-------

- bpo-9041: An issue in ctypes.c_longdouble, ctypes.c_double, and
  ctypes.c_float that caused an incorrect exception to be returned in the
  case of overflow has been fixed.

- bpo-14212: The re module didn't retain a reference to buffers it was
  scanning, resulting in segfaults.

- bpo-14259: The finditer() method of re objects did not take any keyword
  arguments, contrary to the documentation.

- bpo-10142: Support for SEEK_HOLE/SEEK_DATA (for example, under ZFS).

Tests
-----

- bpo-14442: Add missing errno import in test_smtplib.

- bpo-8315: (partial fix) python -m unittest test.test_email now works.


What's New in Python 3.3.0 alpha 1?
===================================

*Release date: 05-Mar-2012*

Core and Builtins
-----------------

- bpo-14172: Fix reference leak when marshalling a buffer-like object (other
  than a bytes object).

- bpo-13521: dict.setdefault() now does only one lookup for the given key,
  making it "atomic" for many purposes.  Patch by Filip Gruszczyński.

- PEP 409, Issue #6210: "raise X from None" is now supported as a means of
  suppressing the display of the chained exception context. The chained
  context still remains available as the __context__ attribute.

- bpo-10181: New memoryview implementation fixes multiple ownership and
  lifetime issues of dynamically allocated Py_buffer members (#9990) as well
  as crashes (#8305, #7433). Many new features have been added (See
  whatsnew/3.3), and the documentation has been updated extensively. The
  ndarray test object from _testbuffer.c implements all aspects of PEP-3118,
  so further development towards the complete implementation of the PEP can
  proceed in a test-driven manner.

  Thanks to Nick Coghlan, Antoine Pitrou and Pauli Virtanen for review and
  many ideas.

- bpo-12834: Fix incorrect results of memoryview.tobytes() for non-
  contiguous arrays.

- bpo-5231: Introduce memoryview.cast() method that allows changing format
  and shape without making a copy of the underlying memory.

- bpo-14084: Fix a file descriptor leak when importing a module with a bad
  encoding.

- Upgrade Unicode data to Unicode 6.1.

- bpo-14040: Remove rarely used file name suffixes for C extensions (under
  POSIX mainly).

- bpo-14051: Allow arbitrary attributes to be set of classmethod and
  staticmethod.

- bpo-13703: oCERT-2011-003: Randomize hashes of str and bytes to protect
  against denial of service attacks due to hash collisions within the dict
  and set types. Patch by David Malcolm, based on work by Victor Stinner.

- bpo-13020: Fix a reference leak when allocating a structsequence object
  fails.  Patch by Suman Saha.

- bpo-13908: Ready types returned from PyType_FromSpec.

- bpo-11235: Fix OverflowError when trying to import a source file whose
  modification time doesn't fit in a 32-bit timestamp.

- bpo-12705: A SyntaxError exception is now raised when attempting to
  compile multiple statements as a single interactive statement.

- Fix the builtin module initialization code to store the init function for
  future reinitialization.

- bpo-8052: The posix subprocess module would take a long time closing all
  possible file descriptors in the child process rather than just open file
  descriptors.  It now closes only the open fds if possible for the default
  close_fds=True behavior.

- bpo-13629: Renumber the tokens in token.h so that they match the indexes
  into _PyParser_TokenNames.

- bpo-13752: Add a casefold() method to str.

- bpo-13761: Add a "flush" keyword argument to the print() function, used to
  ensure flushing the output stream.

- bpo-13645: pyc files now contain the size of the corresponding source
  code, to avoid timestamp collisions (especially on filesystems with a low
  timestamp resolution) when checking for freshness of the bytecode.

- PEP 380, Issue #11682: Add "yield from <x>" to support easy delegation to
  subgenerators (initial patch by Greg Ewing, integration into 3.3 by Renaud
  Blanch, Ryan Kelly, Zbigniew Jędrzejewski-Szmek and Nick Coghlan)

- bpo-13748: Raw bytes literals can now be written with the ``rb`` prefix as
  well as ``br``.

- bpo-12736: Use full unicode case mappings for upper, lower, and title
  case.

- bpo-12760: Add a create mode to open(). Patch by David Townshend.

- bpo-13738: Simplify implementation of bytes.lower() and bytes.upper().

- bpo-13577: Built-in methods and functions now have a __qualname__. Patch
  by sbt.

- bpo-6695: Full garbage collection runs now clear the freelist of set
  objects.  Initial patch by Matthias Troffaes.

- Fix OSError.__init__ and OSError.__new__ so that each of them can be
  overriden and take additional arguments (followup to issue #12555).

- Fix the fix for issue #12149: it was incorrect, although it had the side
  effect of appearing to resolve the issue.  Thanks to Mark Shannon for
  noticing.

- bpo-13505: Pickle bytes objects in a way that is compatible with Python 2
  when using protocols <= 2.

- bpo-11147: Fix an unused argument in _Py_ANNOTATE_MEMORY_ORDER.  (Fix
  given by Campbell Barton).

- bpo-13503: Use a more efficient reduction format for bytearrays with
  pickle protocol >= 3.  The old reduction format is kept with older
  protocols in order to allow unpickling under Python 2.  Patch by Irmen de
  Jong.

- bpo-7111: Python can now be run without a stdin, stdout or stderr stream.
  It was already the case with Python 2.  However, the corresponding sys
  module entries are now set to None (instead of an unusable file object).

- bpo-11849: Ensure that free()d memory arenas are really released on POSIX
  systems supporting anonymous memory mappings.  Patch by Charles-François
  Natali.

- PEP 3155 / issue #13448: Qualified name for classes and functions.

- bpo-13436: Fix a bogus error message when an AST object was passed an
  invalid integer value.

- bpo-13411: memoryview objects are now hashable when the underlying object
  is hashable.

- bpo-13338: Handle all enumerations in _Py_ANNOTATE_MEMORY_ORDER to allow
  compiling extension modules with -Wswitch-enum on gcc. Initial patch by
  Floris Bruynooghe.

- bpo-10227: Add an allocation cache for a single slice object.  Patch by
  Stefan Behnel.

- bpo-13393: BufferedReader.read1() now asks the full requested size to the
  raw stream instead of limiting itself to the buffer size.

- bpo-13392: Writing a pyc file should now be atomic under Windows as well.

- bpo-13333: The UTF-7 decoder now accepts lone surrogates (the encoder
  already accepts them).

- bpo-13389: Full garbage collection passes now clear the freelists for list
  and dict objects.  They already cleared other freelists in the
  interpreter.

- bpo-13327: Remove the need for an explicit None as the second argument to
  os.utime, os.lutimes, os.futimes, os.futimens, os.futimesat, in order to
  update to the current time. Also added keyword argument handling to
  os.utimensat in order to remove the need for explicit None.

- bpo-13350: Simplify some C code by replacing most usages of
  PyUnicode_Format by PyUnicode_FromFormat.

- bpo-13342: input() used to ignore sys.stdin's and sys.stdout's unicode
  error handler in interactive mode (when calling into PyOS_Readline()).

- bpo-9896: Add start, stop, and step attributes to range objects.

- bpo-13343: Fix a SystemError when a lambda expression uses a global
  variable in the default value of a keyword-only argument: ``lambda *,
  arg=GLOBAL_NAME: None``

- bpo-12797: Added custom opener parameter to builtin open() and
  FileIO.open().

- bpo-10519: Avoid unnecessary recursive function calls in setobject.c.

- bpo-10363: Deallocate global locks in Py_Finalize().

- bpo-13018: Fix reference leaks in error paths in dictobject.c. Patch by
  Suman Saha.

- bpo-13201: Define '==' and '!=' to compare range objects based on the
  sequence of values they define (instead of comparing based on object
  identity).

- bpo-1294232: In a few cases involving metaclass inheritance, the
  interpreter would sometimes invoke the wrong metaclass when building a new
  class object. These cases now behave correctly. Patch by Daniel Urban.

- bpo-12753: Add support for Unicode name aliases and named sequences. Both
  ``unicodedata.lookup()`` and '\N{...}' now resolve aliases, and
  ``unicodedata.lookup()`` resolves named sequences too.

- bpo-12170: The count(), find(), rfind(), index() and rindex() methods of
  bytes and bytearray objects now accept an integer between 0 and 255 as
  their first argument.  Patch by Petri Lehtinen.

- bpo-12604: VTRACE macro expanded to no-op in _sre.c to avoid compiler
  warnings. Patch by Josh Triplett and Petri Lehtinen.

- bpo-12281: Rewrite the MBCS codec to handle correctly replace and ignore
  error handlers on all Windows versions. The MBCS codec is now supporting
  all error handlers, instead of only replace to encode and ignore to
  decode.

- bpo-13188: When called without an explicit traceback argument,
  generator.throw() now gets the traceback from the passed exception's
  ``__traceback__`` attribute. Patch by Petri Lehtinen.

- bpo-13146: Writing a pyc file is now atomic under POSIX.

- bpo-7833: Extension modules built using distutils on Windows will no
  longer include a "manifest" to prevent them failing at import time in some
  embedded situations.

- PEP 3151 / issue #12555: reworking the OS and IO exception hierarchy.

- Add internal API for static strings (_Py_identifier et al.).

- bpo-13063: the Windows error ERROR_NO_DATA (numbered 232 and described as
  "The pipe is being closed") is now mapped to POSIX errno EPIPE (previously
  EINVAL).

- bpo-12911: Fix memory consumption when calculating the repr() of huge
  tuples or lists.

- PEP 393: flexible string representation. Thanks to Torsten Becker for the
  initial implementation, and Victor Stinner for various bug fixes.

- bpo-14081: The 'sep' and 'maxsplit' parameter to str.split, bytes.split,
  and bytearray.split may now be passed as keyword arguments.

- bpo-13012: The 'keepends' parameter to str.splitlines may now be passed as
  a keyword argument:  "my_string.splitlines(keepends=True)".  The same
  change also applies to bytes.splitlines and bytearray.splitlines.

- bpo-7732: Don't open a directory as a file anymore while importing a
  module. Ignore the direcotry if its name matchs the module name (e.g.
  "__init__.py") and raise a ImportError instead.

- bpo-13021: Missing decref on an error path.  Thanks to Suman Saha for
  finding the bug and providing a patch.

- bpo-12973: Fix overflow checks that relied on undefined behaviour in
  list_repeat (listobject.c) and islice_next (itertoolsmodule.c).  These
  bugs caused test failures with recent versions of Clang.

- bpo-12904: os.utime, os.futimes, os.lutimes, and os.futimesat now write
  atime and mtime with nanosecond precision on modern POSIX platforms.

- bpo-12802: the Windows error ERROR_DIRECTORY (numbered 267) is now mapped
  to POSIX errno ENOTDIR (previously EINVAL).

- bpo-9200: The str.is* methods now work with strings that contain non-BMP
  characters even in narrow Unicode builds.

- bpo-12791: Break reference cycles early when a generator exits with an
  exception.

- bpo-12773: Make __doc__ mutable on user-defined classes.

- bpo-12766: Raise a ValueError when creating a class with a class variable
  that conflicts with a name in __slots__.

- bpo-12266: Fix str.capitalize() to correctly uppercase/lowercase
  titlecased and cased non-letter characters.

- bpo-12732: In narrow unicode builds, allow Unicode identifiers which fall
  outside the BMP.

- bpo-12575: Validate user-generated AST before it is compiled.

- Make type(None), type(Ellipsis), and type(NotImplemented) callable. They
  return the respective singleton instances.

- Forbid summing bytes with sum().

- Verify the types of AST strings and identifiers provided by the user
  before compiling them.

- bpo-12647: The None object now has a __bool__() method that returns False.
  Formerly, bool(None) returned False only because of special case logic in
  PyObject_IsTrue().

- bpo-12579: str.format_map() now raises a ValueError if used on a format
  string that contains positional fields. Initial patch by Julian Berman.

- bpo-10271: Allow warnings.showwarning() be any callable.

- bpo-11627: Fix segfault when __new__ on a exception returns a non-
  exception class.

- bpo-12149: Update the method cache after a type's dictionary gets cleared
  by the garbage collector.  This fixes a segfault when an instance and its
  type get caught in a reference cycle, and the instance's deallocator calls
  one of the methods on the type (e.g. when subclassing IOBase).  Diagnosis
  and patch by Davide Rizzo.

- bpo-9611: FileIO.read() clamps the length to INT_MAX on Windows. (See
  also: bpo-9015)

- bpo-9642: Uniformize the tests on the availability of the mbcs codec, add
  a new HAVE_MBCS define.

- bpo-9642: Fix filesystem encoding initialization: use the ANSI code page
  on Windows if the mbcs codec is not available, and fail with a fatal error
  if we cannot get the locale encoding (if nl_langinfo(CODESET) is not
  available) instead of using UTF-8.

- When a generator yields, do not retain the caller's exception state on the
  generator.

- bpo-12475: Prevent generators from leaking their exception state into the
  caller's frame as they return for the last time.

- bpo-12291: You can now load multiple marshalled objects from a stream,
  with other data interleaved between marshalled objects.

- bpo-12356: When required positional or keyword-only arguments are not
  given, produce a informative error message which includes the name(s) of
  the missing arguments.

- bpo-12370: Fix super with no arguments when __class__ is overriden in the
  class body.

- bpo-12084: os.stat on Windows now works properly with relative symbolic
  links when called from any directory.

- Loosen type restrictions on the __dir__ method. __dir__ can now return any
  sequence, which will be converted to a list and sorted by dir().

- bpo-12265: Make error messages produced by passing an invalid set of
  arguments to a function more informative.

- bpo-12225: Still allow Python to build if Python is not in its hg repo or
  mercurial is not installed.

- bpo-1195: my_fgets() now always clears errors before calling fgets(). Fix
  the following case: sys.stdin.read() stopped with CTRL+d (end of file),
  raw_input() interrupted by CTRL+c.

- bpo-12216: Allow unexpected EOF errors to happen on any line of the file.

- bpo-12199: The TryExcept and TryFinally and AST nodes have been unified
  into a Try node.

- bpo-9670: Increase the default stack size for secondary threads on Mac OS
  X and FreeBSD to reduce the chances of a crash instead of a "maximum
  recursion depth" RuntimeError exception. (patch by Ronald Oussoren)

- bpo-12106: The use of the multiple-with shorthand syntax is now reflected
  in the AST.

- bpo-12190: Try to use the same filename object when compiling
  unmarshalling a code objects in the same file.

- bpo-12166: Move implementations of dir() specialized for various types
  into the __dir__() methods of those types.

- bpo-5715: In socketserver, close the server socket in the child process.

- Correct lookup of __dir__ on objects. Among other things, this causes
  errors besides AttributeError found on lookup to be propagated.

- bpo-12060: Use sig_atomic_t type and volatile keyword in the signal
  module. Patch written by Charles-François Natali.

- bpo-1746656: Added the if_nameindex, if_indextoname, if_nametoindex
  methods to the socket module.

- bpo-12044: Fixed subprocess.Popen when used as a context manager to wait
  for the process to end when exiting the context to avoid unintentionally
  leaving zombie processes around.

- bpo-1195: Fix input() if it is interrupted by CTRL+d and then CTRL+c,
  clear the end- of-file indicator after CTRL+d.

- bpo-1856: Avoid crashes and lockups when daemon threads run while the
  interpreter is shutting down; instead, these threads are now killed when
  they try to take the GIL.

- bpo-9756: When calling a method descriptor or a slot wrapper descriptor,
  the check of the object type doesn't read the __class__ attribute anymore.
  Fix a crash if a class override its __class__ attribute (e.g. a proxy of
  the str type). Patch written by Andreas Stührk.

- bpo-10517: After fork(), reinitialize the TLS used by the PyGILState_*
  APIs, to avoid a crash with the pthread implementation in RHEL 5.  Patch
  by Charles-François Natali.

- bpo-10914: Initialize correctly the filesystem codec when creating a new
  subinterpreter to fix a bootstrap issue with codecs implemented in Python,
  as the ISO-8859-15 codec.

- bpo-11918: OS/2 and VMS are no more supported because of the lack of
  maintainer.

- bpo-6780: fix starts/endswith error message to mention that tuples are
  accepted too.

- bpo-5057: fix a bug in the peepholer that led to non-portable pyc files
  between narrow and wide builds while optimizing BINARY_SUBSCR on non-BMP
  chars (e.g. "\U00012345"[0]).

- bpo-11845: Fix typo in rangeobject.c that caused a crash in
  compute_slice_indices. Patch by Daniel Urban.

- bpo-5673: Added a `timeout` keyword argument to subprocess.Popen.wait,
  subprocess.Popen.communicated, subprocess.call, subprocess.check_call, and
  subprocess.check_output.  If the blocking operation takes more than
  `timeout` seconds, the `subprocess.TimeoutExpired` exception is raised.

- bpo-11650: PyOS_StdioReadline() retries fgets() if it was interrupted
  (EINTR), for example if the program is stopped with CTRL+z on Mac OS X.
  Patch written by Charles-Francois Natali.

- bpo-9319: Include the filename in "Non-UTF8 code ..." syntax error.

- bpo-10785: Store the filename as Unicode in the Python parser.

- bpo-11619: _PyImport_LoadDynamicModule() doesn't encode the path to bytes
  on Windows.

- bpo-10998: Remove mentions of -Q, sys.flags.division_warning and
  Py_DivisionWarningFlag left over from Python 2.

- bpo-11244: Remove an unnecessary peepholer check that was preventing
  negative zeros from being constant-folded properly.

- bpo-11395: io.FileIO().write() clamps the data length to 32,767 bytes on
  Windows if the file is a TTY to workaround a Windows bug. The Windows
  console returns an error (12: not enough space error) on writing into
  stdout if stdout mode is binary and the length is greater than 66,000
  bytes (or less, depending on heap usage).

- bpo-11320: fix bogus memory management in Modules/getpath.c, leading to a
  possible crash when calling Py_SetPath().

- bpo-11432: A bug was introduced in subprocess.Popen on posix systems with
  3.2.0 where the stdout or stderr file descriptor being the same as the
  stdin file descriptor would raise an exception. webbrowser.open would
  fail. fixed.

- bpo-9856: Change object.__format__ with a non-empty format string to be a
  DeprecationWarning. In 3.2 it was a PendingDeprecationWarning. In 3.4 it
  will be a TypeError.

- bpo-11244: The peephole optimizer is now able to constant-fold arbitrarily
  complex expressions.  This also fixes a 3.2 regression where operations
  involving negative numbers were not constant-folded.

- bpo-11450: Don't truncate hg version info in Py_GetBuildInfo() when there
  are many tags (e.g. when using mq).  Patch by Nadeem Vawda.

- bpo-11335: Fixed a memory leak in list.sort when the key function throws
  an exception.

- bpo-8923: When a string is encoded to UTF-8 in strict mode, the result is
  cached into the object. Examples: str.encode(), str.encode('utf-8'),
  PyUnicode_AsUTF8String() and PyUnicode_AsEncodedString(unicode, "utf-8",
  NULL).

- bpo-10829: Refactor PyUnicode_FromFormat(), use the same function to parse
  the format string in the 3 steps, fix crashs on invalid format strings.

- bpo-13007: whichdb should recognize gdbm 1.9 magic numbers.

- bpo-11286: Raise a ValueError from calling PyMemoryView_FromBuffer with a
  buffer struct having a NULL data pointer.

- bpo-11272: On Windows, input() strips '\r' (and not only '\n'), and
  sys.stdin uses universal newline (replace '\r\n' by '\n').

- bpo-11828: startswith and endswith now accept None as slice index. Patch
  by Torsten Becker.

- bpo-11168: Remove filename debug variable from PyEval_EvalFrameEx(). It
  encoded the Unicode filename to UTF-8, but the encoding fails on
  undecodable filename (on surrogate characters) which raises an unexpected
  UnicodeEncodeError on recursion limit.

- bpo-11187: Remove bootstrap code (use ASCII) of
  PyUnicode_AsEncodedString(), it was replaced by a better fallback (use the
  locale encoding) in PyUnicode_EncodeFSDefault().

- Check for NULL result in PyType_FromSpec.

- bpo-10516: New copy() and clear() methods for lists and bytearrays.

- bpo-11386: bytearray.pop() now throws IndexError when the bytearray is
  empty, instead of OverflowError.

- bpo-12380: The rjust, ljust and center methods of bytes and bytearray now
  accept a bytearray argument.

Library
-------

- bpo-14195: An issue that caused weakref.WeakSet instances to incorrectly
  return True for a WeakSet instance 'a' in both 'a < a' and 'a > a' has
  been fixed.

- bpo-14166: Pickler objects now have an optional ``dispatch_table``
  attribute which allows to set custom per-pickler reduction functions.
  Patch by sbt.

- bpo-14177: marshal.loads() now raises TypeError when given an unicode
  string.  Patch by Guilherme Gonçalves.

- bpo-13550: Remove the debug machinery from the threading module: remove
  verbose arguments from all threading classes and functions.

- bpo-14159: Fix the len() of weak containers (WeakSet, WeakKeyDictionary,
  WeakValueDictionary) to return a better approximation when some objects
  are dead or dying.  Moreover, the implementation is now O(1) rather than
  O(n).

- bpo-11841: Fix comparison bug with 'rc' versions in packaging.version.
  Patch by Filip Gruszczyński.

- bpo-6884: Fix long-standing bugs with MANIFEST.in parsing in distutils on
  Windows. Also fixed in packaging.

- bpo-8033: sqlite3: Fix 64-bit integer handling in user functions on 32-bit
  architectures. Initial patch by Philippe Devalkeneer.

- HTMLParser is now able to handle slashes in the start tag.

- bpo-13641: Decoding functions in the base64 module now accept ASCII-only
  unicode strings.  Patch by Catalin Iacob.

- bpo-14043: Speed up importlib's _FileFinder by at least 8x, and add a new
  importlib.invalidate_caches() function.

- bpo-14001: CVE-2012-0845: xmlrpc: Fix an endless loop in
  SimpleXMLRPCServer upon malformed POST request.

- bpo-13961: Move importlib over to using os.replace() for atomic renaming.

- Do away with ambiguous level values (as suggested by PEP 328) in
  importlib.__import__() by raising ValueError when level < 0.

- bpo-2489: pty.spawn could consume 100% cpu when it encountered an EOF.

- bpo-13014: Fix a possible reference leak in SSLSocket.getpeercert().

- bpo-13777: Add PF_SYSTEM sockets on OS X. Patch by Michael Goderbauer.

- bpo-13015: Fix a possible reference leak in defaultdict.__repr__. Patch by
  Suman Saha.

- bpo-1326113: distutils' and packaging's build_ext commands option now
  correctly parses multiple values (separated by whitespace or commas) given
  to their --libraries option.

- bpo-10287: nntplib now queries the server's CAPABILITIES first before
  sending MODE READER, and only sends it if not already in READER mode.
  Patch by Hynek Schlawack.

- bpo-13993: HTMLParser is now able to handle broken end tags when
  strict=False.

- bpo-13930: lib2to3 now supports writing converted output files to another
  directory tree as well as copying unchanged files and altering the file
  suffix.

- bpo-9750: Fix sqlite3.Connection.iterdump on tables and fields with a name
  that is a keyword or contains quotes. Patch by Marko Kohtala.

- bpo-10287: nntplib now queries the server's CAPABILITIES again after
  authenticating (since the result may change, according to RFC 4643). Patch
  by Hynek Schlawack.

- bpo-13590: On OS X 10.7 and 10.6 with Xcode 4.2, building Distutils-based
  packages with C extension modules may fail because Apple has removed
  gcc-4.2, the version used to build python.org 64-bit/32-bit Pythons.  If
  the user does not explicitly override the default C compiler by setting
  the CC environment variable, Distutils will now attempt to compile
  extension modules with clang if gcc-4.2 is required but not found. Also as
  a convenience, if the user does explicitly set CC, substitute its value as
  the default compiler in the Distutils LDSHARED configuration variable for
  OS X. (Note, the python.org 32-bit-only Pythons use gcc-4.0 and the 10.4u
  SDK, neither of which are available in Xcode 4.  This change does not
  attempt to override settings to support their use with Xcode 4.)

- bpo-13960: HTMLParser is now able to handle broken comments when
  strict=False.

- When '' is a path (e.g. in sys.path), make sure __file__ uses the current
  working directory instead of '' in importlib.

- bpo-13609: Add two functions to query the terminal size:
  os.get_terminal_size (low level) and shutil.get_terminal_size (high
  level). Patch by Zbigniew Jędrzejewski-Szmek.

- bpo-13845: On Windows, time.time() now uses GetSystemTimeAsFileTime()
  instead of ftime() to have a resolution of 100 ns instead of 1 ms (the
  clock accuracy is between 0.5 ms and 15 ms).

- bpo-13846: Add time.monotonic(), monotonic clock.

- bpo-8184: multiprocessing: On Windows, don't set SO_REUSEADDR on
  Connection sockets, and set FILE_FLAG_FIRST_PIPE_INSTANCE on named pipes,
  to make sure two listeners can't bind to the same socket/pipe (or any
  existing socket/pipe).

- bpo-10811: Fix recursive usage of cursors. Instead of crashing, raise a
  ProgrammingError now.

- bpo-13734: Add os.fwalk(), a directory walking function yielding file
  descriptors.

- bpo-2945: Make the distutils upload command aware of bdist_rpm products.

- bpo-13712: pysetup create should not convert package_data to extra_files.

- bpo-11805: package_data in setup.cfg should allow more than one value.

- bpo-13676: Handle strings with embedded zeros correctly in sqlite3.

- bpo-8828: Add new function os.replace(), for cross-platform renaming with
  overwriting.

- bpo-13848: open() and the FileIO constructor now check for NUL characters
  in the file name.  Patch by Hynek Schlawack.

- bpo-13806: The size check in audioop decompression functions was too
  strict and could reject valid compressed data.  Patch by Oleg Plakhotnyuk.

- bpo-13812: When a multiprocessing Process child raises an exception, flush
  stderr after printing the exception traceback.

- bpo-13885: CVE-2011-3389: the _ssl module would always disable the CBC IV
  attack countermeasure.

- bpo-13847: time.localtime() and time.gmtime() now raise an OSError instead
  of ValueError on failure. time.ctime() and time.asctime() now raises an
  OSError if localtime() failed. time.clock() now raises a RuntimeError if
  the processor time used is not available or its value cannot be
  represented

- bpo-13772: In os.symlink() under Windows, do not try to guess the link
  target's type (file or directory).  The detection was buggy and made the
  call non-atomic (therefore prone to race conditions).

- bpo-6631: Disallow relative file paths in urllib urlopen methods.

- bpo-13722: Avoid silencing ImportErrors when initializing the codecs
  registry.

- bpo-13781: Fix GzipFile bug that caused an exception to be raised when
  opening for writing using a fileobj returned by os.fdopen().

- bpo-13803: Under Solaris, distutils doesn't include bitness in the
  directory name.

- bpo-10278: Add time.wallclock() function, monotonic clock.

- bpo-13809: Fix regression where bz2 module wouldn't work when threads are
  disabled. Original patch by Amaury Forgeot d'Arc.

- bpo-13589: Fix some serialization primitives in the aifc module. Patch by
  Oleg Plakhotnyuk.

- bpo-13642: Unquote before b64encoding ``user:password`` during Basic
  Authentication. Patch contributed by Joonas Kuorilehto.

- bpo-12364: Fix a hang in concurrent.futures.ProcessPoolExecutor. The hang
  would occur when retrieving the result of a scheduled future after the
  executor had been shut down.

- bpo-13502: threading: Fix a race condition in Event.wait() that made it
  return False when the event was set and cleared right after.

- bpo-9993: When the source and destination are on different filesystems,
  and the source is a symlink, shutil.move() now recreates a symlink on the
  destination instead of copying the file contents.  Patch by Jonathan
  Niehof and Hynek Schlawack.

- bpo-12926: Fix a bug in tarfile's link extraction.

- bpo-13696: Fix the 302 Relative URL Redirection problem.

- bpo-13636: Weak ciphers are now disabled by default in the ssl module
  (except when SSLv2 is explicitly asked for).

- bpo-12715: Add an optional symlinks argument to shutil functions
  (copyfile, copymode, copystat, copy, copy2).  When that parameter is true,
  symlinks aren't dereferenced and the operation instead acts on the symlink
  itself (or creates one, if relevant).  Patch by Hynek Schlawack.

- Add a flags parameter to select.epoll.

- bpo-13626: Add support for SSL Diffie-Hellman key exchange, through the
  SSLContext.load_dh_params() method and the ssl.OP_SINGLE_DH_USE option.

- bpo-11006: Don't issue low level warning in subprocess when pipe2() fails.

- bpo-13620: Support for Chrome browser in webbrowser.  Patch contributed by
  Arnaud Calmettes.

- bpo-11829: Fix code execution holes in inspect.getattr_static for
  metaclasses with metaclasses. Patch by Andreas Stührk.

- bpo-12708: Add starmap() and starmap_async() methods (similar to
  itertools.starmap()) to multiprocessing.Pool.  Patch by Hynek Schlawack.

- bpo-1785: Fix inspect and pydoc with misbehaving descriptors.

- bpo-13637: "a2b" functions in the binascii module now accept ASCII-only
  unicode strings.

- bpo-13634: Add support for querying and disabling SSL compression.

- bpo-13627: Add support for SSL Elliptic Curve-based Diffie-Hellman key
  exchange, through the SSLContext.set_ecdh_curve() method and the
  ssl.OP_SINGLE_ECDH_USE option.

- bpo-13635: Add ssl.OP_CIPHER_SERVER_PREFERENCE, so that SSL servers choose
  the cipher based on their own preferences, rather than on the client's.

- bpo-11813: Fix inspect.getattr_static for modules. Patch by Andreas
  Stührk.

- bpo-7502: Fix equality comparison for DocTestCase instances.  Patch by
  Cédric Krier.

- bpo-11870: threading: Properly reinitialize threads internal locks and
  condition variables to avoid deadlocks in child processes.

- bpo-8035: urllib: Fix a bug where the client could remain stuck after a
  redirection or an error.

- bpo-13560: os.strerror() now uses the current locale encoding instead of
  UTF-8.

- bpo-8373: The filesystem path of AF_UNIX sockets now uses the filesystem
  encoding and the surrogateescape error handler, rather than UTF-8.  Patch
  by David Watson.

- bpo-10350: Read and save errno before calling a function which might
  overwrite it. Original patch by Hallvard B Furuseth.

- bpo-11610: Introduce a more general way to declare abstract properties.

- bpo-13591: A bug in importlib has been fixed that caused import_module to
  load a module twice.

- bpo-13449: sched.scheduler.run() method has a new "blocking" parameter
  which when set to False makes run() execute the scheduled events due to
  expire soonest (if any) and then return.  Patch by Giampaolo Rodolà.

- bpo-8684: sched.scheduler class can be safely used in multi-threaded
  environments. Patch by Josiah Carlson and Giampaolo Rodolà.

- Alias resource.error to OSError ala PEP 3151.

- bpo-5689: Add support for lzma compression to the tarfile module.

- bpo-13248: Turn 3.2's PendingDeprecationWarning into 3.3's
  DeprecationWarning.  It covers 'cgi.escape', 'importlib.abc.PyLoader',
  'importlib.abc.PyPycLoader', 'nntplib.NNTP.xgtitle', 'nntplib.NNTP.xpath',
  and private attributes of 'smtpd.SMTPChannel'.

- bpo-5905: time.strftime() is now using the current locale encoding,
  instead of UTF-8, if the wcsftime() function is not available. (See also:
  bpo-13560)

- bpo-13464: Add a readinto() method to http.client.HTTPResponse.  Patch by
  Jon Kuhn.

- tarfile.py: Correctly detect bzip2 compressed streams with blocksizes
  other than 900k.

- bpo-13439: Fix many errors in turtle docstrings.

- bpo-6715: Add a module 'lzma' for compression using the LZMA algorithm.
  Thanks to Per Øyvind Karlsen for the initial implementation.

- bpo-13487: Make inspect.getmodule robust against changes done to
  sys.modules while it is iterating over it.

- bpo-12618: Fix a bug that prevented py_compile from creating byte compiled
  files in the current directory.  Initial patch by Sjoerd de Vries.

- bpo-13444: When stdout has been closed explicitly, we should not attempt
  to flush it at shutdown and print an error.

- bpo-12567: The curses module uses Unicode functions for Unicode arguments
  when it is linked to the ncurses library. It encodes also Unicode strings
  to the locale encoding instead of UTF-8.

- bpo-12856: Ensure child processes do not inherit the parent's random seed
  for filename generation in the tempfile module.  Patch by Brian Harring.

- bpo-9957: SpooledTemporaryFile.truncate() now accepts an optional size
  parameter, as other file-like objects.  Patch by Ryan Kelly.

- bpo-13458: Fix a memory leak in the ssl module when decoding a certificate
  with a subjectAltName.  Patch by Robert Xiao.

- bpo-13415: os.unsetenv() doesn't ignore errors anymore.

- bpo-13245: sched.scheduler class constructor's timefunc and delayfunct
  parameters are now optional. scheduler.enter and scheduler.enterabs
  methods gained a new kwargs parameter. Patch contributed by Chris Clark.

- bpo-12328: Under Windows, refactor handling of Ctrl-C events and make
  _multiprocessing.win32.WaitForMultipleObjects interruptible when the
  wait_flag parameter is false.  Patch by sbt.

- bpo-13322: Fix BufferedWriter.write() to ensure that BlockingIOError is
  raised when the wrapped raw file is non-blocking and the write would
  block. Previous code assumed that the raw write() would raise
  BlockingIOError, but RawIOBase.write() is defined to returned None when
  the call would block. Patch by sbt.

- bpo-13358: HTMLParser now calls handle_data only once for each CDATA.

- bpo-4147: minidom's toprettyxml no longer adds whitespace around a text
  node when it is the only child of an element.  Initial patch by Dan
  Kenigsberg.

- bpo-13374: The Windows bytes API has been deprecated in the os module. Use
  Unicode filenames instead of bytes filenames to not depend on the ANSI
  code page anymore and to support any filename.

- bpo-13297: Use bytes type to send and receive binary data through XMLRPC.

- bpo-6397: Support "/dev/poll" polling objects in select module, under
  Solaris & derivatives.

- bpo-1745761: HTMLParser now correctly handles non-valid attributes,
  including adjacent and unquoted attributes. (See also: bpo-755670,
  bpo-13357, bpo-12629, bpo-1200313)

- bpo-13193: Fix distutils.filelist.FileList and packaging.manifest.Manifest
  under Windows.

- bpo-13384: Remove unnecessary __future__ import in Lib/random.py

- bpo-13149: Speed up append-only StringIO objects.

- bpo-13373: multiprocessing.Queue.get() could sometimes block indefinitely
  when called with a timeout.  Patch by Arnaud Ysmal.

- bpo-13254: Fix Maildir initialization so that maildir contents are read
  correctly.

- bpo-3067: locale.setlocale() now raises TypeError if the second argument
  is an invalid iterable. Its documentation and docstring were also updated.
  Initial patch by Jyrki Pulliainen.

- bpo-13140: Fix the daemon_threads attribute of ThreadingMixIn.

- bpo-13339: Fix compile error in posixmodule.c due to missing semicolon.
  Thanks to Robert Xiao.

- Byte compilation in packaging is now isolated from the calling Python -B
  or -O options, instead of being disallowed under -B or buggy under -O.

- bpo-10570: curses.putp() and curses.tparm() are now expecting a byte
  string, instead of a Unicode string.

- bpo-13295: http.server now produces valid HTML 4.01 strict.

- bpo-2892: preserve iterparse events in case of SyntaxError.

- bpo-13287: urllib.request and urllib.error now contains an __all__
  attribute to expose only relevant classes and functions.  Patch by Florent
  Xicluna.

- bpo-670664: Fix HTMLParser to correctly handle the content of
  ``<script>...</script>`` and ``<style>...</style>``.

- bpo-10817: Fix urlretrieve function to raise ContentTooShortError even
  when reporthook is None. Patch by Jyrki Pulliainen.

- Fix the xmlrpc.client user agent to return something similar to
  urllib.request user agent: "Python-xmlrpc/3.3".

- bpo-13293: Better error message when trying to marshal bytes using
  xmlrpc.client.

- bpo-13291: NameError in xmlrpc package.

- bpo-13258: Use callable() built-in in the standard library.

- bpo-13273: fix a bug that prevented HTMLParser to properly detect some
  tags when strict=False.

- bpo-11183: Add finer-grained exceptions to the ssl module, so that you
  don't have to inspect the exception's attributes in the common case.

- bpo-13216: Add cp65001 codec, the Windows UTF-8 (CP_UTF8).

- bpo-13226: Add RTLD_xxx constants to the os module. These constants can be
  used with sys.setdlopenflags().

- bpo-10278: Add clock_getres(), clock_gettime() and CLOCK_xxx constants to
  the time module. time.clock_gettime(time.CLOCK_MONOTONIC) provides a
  monotonic clock

- bpo-10332: multiprocessing: fix a race condition when a Pool is closed
  before all tasks have completed.

- bpo-13255: wrong docstrings in array module.

- bpo-8540: Remove deprecated Context._clamp attribute in Decimal module.

- bpo-13235: Added DeprecationWarning to logging.warn() method and function.

- bpo-9168: now smtpd is able to bind privileged port.

- bpo-12529: fix cgi.parse_header issue on strings with double-quotes and
  semicolons together. Patch by Ben Darnell and Petri Lehtinen.

- bpo-13227: functools.lru_cache() now has a option to distinguish calls
  with different argument types.

- bpo-6090: zipfile raises a ValueError when a document with a timestamp
  earlier than 1980 is provided. Patch contributed by Petri Lehtinen.

- bpo-13150: sysconfig no longer parses the Makefile and config.h files when
  imported, instead doing it at build time.  This makes importing sysconfig
  faster and reduces Python startup time by 20%.

- bpo-12448: smtplib now flushes stdout while running ``python -m smtplib``
  in order to display the prompt correctly.

- bpo-12454: The mailbox module is now using ASCII, instead of the locale
  encoding, to read and write .mh_sequences files.

- bpo-13194: zlib.compressobj().copy() and zlib.decompressobj().copy() are
  now available on Windows.

- bpo-1673007: urllib.request now supports HEAD request via new method
  argument. Patch contributions by David Stanek, Patrick Westerhoff and Ezio
  Melotti.

- bpo-12386: packaging does not fail anymore when writing the RESOURCES
  file.

- bpo-13158: Fix decoding and encoding of GNU tar specific base-256 number
  fields in tarfile.

- bpo-13025: mimetypes is now reading MIME types using the UTF-8 encoding,
  instead of the locale encoding.

- bpo-10653: On Windows, use strftime() instead of wcsftime() because
  wcsftime() doesn't format time zone correctly.

- bpo-13150: The tokenize module doesn't compile large regular expressions
  at startup anymore.

- bpo-11171: Fix distutils.sysconfig.get_makefile_filename when Python was
  configured with different prefix and exec-prefix.

- bpo-11254: Teach distutils and packaging to compile .pyc and .pyo files in
  PEP 3147-compliant __pycache__ directories.

- bpo-7367: Fix pkgutil.walk_paths to skip directories whose contents cannot
  be read.

- bpo-3163: The struct module gets new format characters 'n' and 'N'
  supporting C integer types ``ssize_t`` and ``size_t``, respectively.

- bpo-13099: Fix sqlite3.Cursor.lastrowid under a Turkish locale. Reported
  and diagnosed by Thomas Kluyver.

- bpo-13087: BufferedReader.seek() now always raises UnsupportedOperation if
  the underlying raw stream is unseekable, even if the seek could be
  satisfied using the internal buffer.  Patch by John O'Connor.

- bpo-7689: Allow pickling of dynamically created classes when their
  metaclass is registered with copyreg.  Patch by Nicolas M. Thiéry and
  Craig Citro.

- bpo-13034: When decoding some SSL certificates, the subjectAltName
  extension could be unreported.

- bpo-12306: Expose the runtime version of the zlib C library as a constant,
  ZLIB_RUNTIME_VERSION, in the zlib module. Patch by Torsten Landschoff.

- bpo-12959: Add collections.ChainMap to collections.__all__.

- bpo-8933: distutils' PKG-INFO files and packaging's METADATA files will
  now correctly report Metadata-Version: 1.1 instead of 1.0 if a Classifier
  or Download-URL field is present.

- bpo-12567: Add curses.unget_wch() function. Push a character so the next
  get_wch() will return it.

- bpo-9561: distutils and packaging now writes egg-info files using UTF-8,
  instead of the locale encoding.

- bpo-8286: The distutils command sdist will print a warning message instead
  of crashing when an invalid path is given in the manifest template.

- bpo-12841: tarfile unnecessarily checked the existence of numerical user
  and group ids on extraction. If one of them did not exist the respective
  id of the current user (i.e. root) was used for the file and ownership
  information was lost.

- bpo-12888: Fix a bug in HTMLParser.unescape that prevented it to escape
  more than 128 entities.  Patch by Peter Otten.

- bpo-12878: Expose a __dict__ attribute on io.IOBase and its subclasses.

- bpo-12494: On error, call(), check_call(), check_output() and
  getstatusoutput() functions of the subprocess module now kill the process,
  read its status (to avoid zombis) and close pipes.

- bpo-12720: Expose low-level Linux extended file attribute functions in os.

- bpo-10946: The distutils commands bdist_dumb, bdist_wininst and bdist_msi
  now respect a --skip-build option given to bdist.  The packaging commands
  were fixed too.

- bpo-12847: Fix a crash with negative PUT and LONG_BINPUT arguments in the
  C pickle implementation.

- bpo-11564: Avoid crashes when trying to pickle huge objects or containers
  (more than 2**31 items).  Instead, in most cases, an OverflowError is
  raised.

- bpo-12287: Fix a stack corruption in ossaudiodev module when the FD is
  greater than FD_SETSIZE.

- bpo-12839: Fix crash in zlib module due to version mismatch. Fix by
  Richard M. Tew.

- bpo-9923: The mailcap module now correctly uses the platform path
  separator for the MAILCAP environment variable on non-POSIX platforms.

- bpo-12835: Follow up to #6560 that unconditionally prevents use of the
  unencrypted sendmsg/recvmsg APIs on SSL wrapped sockets. Patch by David
  Watson.

- bpo-12803: SSLContext.load_cert_chain() now accepts a password argument to
  be used if the private key is encrypted.  Patch by Adam Simpkins.

- bpo-11657: Fix sending file descriptors over 255 over a multiprocessing
  Pipe.

- bpo-12811: tabnanny.check() now promptly closes checked files. Patch by
  Anthony Briggs.

- bpo-6560: The sendmsg/recvmsg API is now exposed by the socket module when
  provided by the underlying platform, supporting processing of ancillary
  data in pure Python code. Patch by David Watson and Heiko Wundram.

- bpo-12326: On Linux, sys.platform doesn't contain the major version
  anymore. It is now always 'linux', instead of 'linux2' or 'linux3'
  depending on the Linux version used to build Python.

- bpo-12213: Fix a buffering bug with interleaved reads and writes that
  could appear on BufferedRandom streams.

- bpo-12778: Reduce memory consumption when JSON-encoding a large container
  of many small objects.

- bpo-12650: Fix a race condition where a subprocess.Popen could leak
  resources (FD/zombie) when killed at the wrong time.

- bpo-12744: Fix inefficient representation of integers between 2**31 and
  2**63 on systems with a 64-bit C "long".

- bpo-12646: Add an 'eof' attribute to zlib.Decompress, to make it easier to
  detect truncated input streams.

- bpo-11513: Fix exception handling ``tarfile.TarFile.gzopen()`` when the
  file cannot be opened.

- bpo-12687: Fix a possible buffering bug when unpickling text mode
  (protocol 0, mostly) pickles.

- bpo-10087: Fix the html output format of the calendar module.

- bpo-13121: add support for inplace math operators to collections.Counter.

- Add support for unary plus and unary minus to collections.Counter.

- bpo-12683: urlparse updated to include svn as schemes that uses relative
  paths. (svn from 1.5 onwards support relative path).

- bpo-12655: Expose functions from sched.h in the os module: sched_yield(),
  sched_setscheduler(), sched_getscheduler(), sched_setparam(),
  sched_get_min_priority(), sched_get_max_priority(),
  sched_rr_get_interval(), sched_getaffinity(), sched_setaffinity().

- Add ThreadError to threading.__all__.

- bpo-11104: Fix the behavior of distutils' sdist command with manually-
  maintained MANIFEST files. (See also: bpo-8688)

- bpo-11281: smtplib.STMP gets source_address parameter, which adds the
  ability to bind to specific source address on a machine with multiple
  interfaces. Patch by Paulo Scardine.

- bpo-12464: tempfile.TemporaryDirectory.cleanup() should not follow
  symlinks: fix it. Patch by Petri Lehtinen.

- bpo-8887: "pydoc somebuiltin.somemethod" (or
  help('somebuiltin.somemethod') in Python code) now finds the doc of the
  method.

- bpo-10968: Remove indirection in threading.  The public names (Event,
  Condition, etc.) used to be factory functions returning instances of
  hidden classes (_Event, _Condition, etc.), because (if Guido recalls
  correctly) this code pre-dates the ability to subclass extension types.
  It is now possible to inherit from these classes, without having to import
  the private underscored names like multiprocessing did.

- bpo-9723: Add shlex.quote functions, to escape filenames and command
  lines.

- bpo-12603: Fix pydoc.synopsis() on files with non-negative st_mtime.

- bpo-12514: Use try/finally to assure the timeit module restores garbage
  collections when it is done.

- bpo-12607: In subprocess, fix issue where if stdin, stdout or stderr is
  given as a low fd, it gets overwritten.

- bpo-12576: Fix urlopen behavior on sites which do not send (or obfuscate)
  a ``Connection: close`` header.

- bpo-12560: Build libpython.so on OpenBSD. Patch by Stefan Sperling.

- bpo-1813: Fix codec lookup under Turkish locales.

- bpo-12591: Improve support of "universal newlines" in the subprocess
  module: the piped streams can now be properly read from or written to.

- bpo-12591: Allow io.TextIOWrapper to work with raw IO objects (without a
  read1() method), and add a *write_through* parameter to mandate unbuffered
  writes.

- bpo-10883: Fix socket leaks in urllib.request when using FTP.

- bpo-12592: Make Python build on OpenBSD 5 (and future major releases).

- bpo-12372: POSIX semaphores are broken on AIX: don't use them.

- bpo-12551: Provide a get_channel_binding() method on SSL sockets so as to
  get channel binding data for the current SSL session (only the "tls-
  unique" channel binding is implemented).  This allows the implementation
  of certain authentication mechanisms such as SCRAM-SHA-1-PLUS.  Patch by
  Jacek Konieczny.

- bpo-665194: email.utils now has format_datetime and parsedate_to_datetime
  functions, allowing for round tripping of RFC2822 format dates.

- bpo-12571: Add a plat-linux3 directory mirroring the plat-linux2
  directory, so that "import DLFCN" and other similar imports work on Linux
  3.0.

- bpo-7484: smtplib no longer puts <> around addresses in VRFY and EXPN
  commands; they aren't required and in fact postfix doesn't support that
  form.

- bpo-12273: Remove ast.__version__. AST changes can be accounted for by
  checking sys.version_info or sys._mercurial.

- Silence spurious "broken pipe" tracebacks when shutting down a
  ProcessPoolExecutor.

- Fix potential resource leaks in concurrent.futures.ProcessPoolExecutor by
  joining all queues and processes when shutdown() is called.

- bpo-11603: Fix a crash when __str__ is rebound as __repr__.  Patch by
  Andreas Stührk.

- bpo-11321: Fix a crash with multiple imports of the _pickle module when
  embedding Python.  Patch by Andreas Stührk.

- bpo-6755: Add get_wch() method to curses.window class. Patch by Iñigo
  Serna.

- Add cgi.closelog() function to close the log file.

- bpo-12502: asyncore: fix polling loop with AF_UNIX sockets.

- bpo-4376: ctypes now supports nested structures in a endian different than
  the parent structure. Patch by Vlad Riscutia.

- Raise ValueError when attempting to set the _CHUNK_SIZE attribute of a
  TextIOWrapper to a huge value, not TypeError.

- bpo-12504: Close file handles in a timely manner in packaging.database.
  This fixes a bug with the remove (uninstall) feature on Windows.

- bpo-12169: Factor out code used by various packaging commands to make HTTP
  POST requests, and make sure it uses CRLF. (See also: bpo-10510)

- bpo-12016: Multibyte CJK decoders now resynchronize faster. They only
  ignore the first byte of an invalid byte sequence. For example,
  b'\xff\n'.decode('gb2312', 'replace') gives '\ufffd\n' instead of
  '\ufffd'.

- bpo-12459: time.sleep() now raises a ValueError if the sleep length is
  negative, instead of an infinite sleep on Windows or raising an IOError on
  Linux for example, to have the same behaviour on all platforms.

- bpo-12451: pydoc: html_getfile() now uses tokenize.open() to support
  Python scripts using a encoding different than UTF-8 (read the coding
  cookie of the script).

- bpo-12493: subprocess: Popen.communicate() now also handles EINTR errors
  if the process has only one pipe.

- bpo-12467: warnings: fix a race condition if a warning is emitted at
  shutdown, if globals()['__file__'] is None.

- bpo-12451: pydoc: importfile() now opens the Python script in binary mode,
  instead of text mode using the locale encoding, to avoid encoding issues.

- bpo-12451: runpy: run_path() now opens the Python script in binary mode,
  instead of text mode using the locale encoding, to support other encodings
  than UTF-8 (scripts using the coding cookie).

- bpo-12451: xml.dom.pulldom: parse() now opens files in binary mode instead
  of the text mode (using the locale encoding) to avoid encoding issues.

- bpo-12147: Adjust the new-in-3.2 smtplib.send_message method for better
  conformance to the RFCs:  correctly handle Sender and Resent- headers.

- bpo-12352: Fix a deadlock in multiprocessing.Heap when a block is freed by
  the garbage collector while the Heap lock is held.

- bpo-12462: time.sleep() now immediately calls the (Python) signal handler
  if it is interrupted by a signal, instead of having to wait until the next
  instruction.

- bpo-12442: new shutil.disk_usage function, providing total, used and free
  disk space statistics.

- bpo-12451: The XInclude default loader of xml.etree now decodes files from
  UTF-8 instead of the locale encoding if the encoding is not specified. It
  now also opens XML files for the parser in binary mode instead of the text
  mode to avoid encoding issues.

- bpo-12451: doctest.debug_script() doesn't create a temporary file anymore
  to avoid encoding issues.

- bpo-12451: pydoc.synopsis() now reads the encoding cookie if available, to
  read the Python script from the right encoding.

- bpo-12451: distutils now opens the setup script in binary mode to read the
  encoding cookie, instead of opening it in UTF-8.

- bpo-9516: On Mac OS X, change Distutils to no longer globally attempt to
  check or set the MACOSX_DEPLOYMENT_TARGET environment variable for the
  interpreter process.  This could cause failures in non-Distutils
  subprocesses and was unreliable since tests or user programs could modify
  the interpreter environment after Distutils set it.  Instead, have
  Distutils set the deployment target only in the environment of each build
  subprocess.  It is still possible to globally override the default by
  setting MACOSX_DEPLOYMENT_TARGET before launching the interpreter; its
  value must be greater or equal to the default value, the value with which
  the interpreter was built.  Also, implement the same handling in
  packaging.

- bpo-12422: In the copy module, don't store objects that are their own copy
  in the memo dict.

- bpo-12303: Add sigwaitinfo() and sigtimedwait() to the signal module.

- bpo-12404: Remove C89 incompatible code from mmap module. Patch by Akira
  Kitada.

- bpo-1874: email now detects and reports as a defect the presence of any
  CTE other than 7bit, 8bit, or binary on a multipart.

- bpo-12383: Fix subprocess module with env={}: don't copy the environment
  variables, start with an empty environment.

- bpo-11637: Fix support for importing packaging setup hooks from the
  project directory.

- bpo-6771: Moved the curses.wrapper function from the single-function
  wrapper module into __init__, eliminating the module.  Since __init__ was
  already importing the function to curses.wrapper, there is no API change.

- bpo-11584: email.header.decode_header no longer fails if the header passed
  to it is a Header object, and Header/make_header no longer fail if given
  binary unknown-8bit input.

- bpo-11700: mailbox proxy object close methods can now be called multiple
  times without error.

- bpo-11767: Correct file descriptor leak in mailbox's __getitem__ method.

- bpo-12133: AbstractHTTPHandler.do_open() of urllib.request closes the HTTP
  connection if its getresponse() method fails with a socket error. Patch
  written by Ezio Melotti.

- bpo-12240: Allow multiple setup hooks in packaging's setup.cfg files.
  Original patch by Erik Bray.

- bpo-9284: Allow inspect.findsource() to find the source of doctest
  functions.

- bpo-11595: Fix assorted bugs in packaging.util.cfg_to_args, a
  compatibility helper for the distutils-packaging transition.  Original
  patch by Erik Bray.

- bpo-12287: In ossaudiodev, check that the device isn't closed in several
  methods.

- bpo-12009: Fixed regression in netrc file comment handling.

- bpo-12246: Warn and fail when trying to install a third-party project from
  an uninstalled Python (built in a source checkout).  Original patch by
  Tshepang Lekhonkhobe.

- bpo-10694: zipfile now ignores garbage at the end of a zipfile.

- bpo-12283: Fixed regression in smtplib quoting of leading dots in DATA.

- bpo-10424: Argparse now includes the names of the missing required
  arguments in the missing arguments error message.

- bpo-12168: SysLogHandler now allows NUL termination to be controlled using
  a new 'append_nul' attribute on the handler.

- bpo-11583: Speed up os.path.isdir on Windows by using GetFileAttributes
  instead of os.stat.

- bpo-12021: Make mmap's read() method argument optional. Patch by Petri
  Lehtinen.

- bpo-9205: concurrent.futures.ProcessPoolExecutor now detects killed
  children and raises BrokenProcessPool in such a situation.  Previously it
  would reliably freeze/deadlock.

- bpo-12040: Expose a new attribute ``sentinel`` on instances of
  ``multiprocessing.Process``.  Also, fix Process.join() to not use polling
  anymore, when given a timeout.

- bpo-11893: Remove obsolete internal wrapper class ``SSLFakeFile`` in the
  smtplib module.  Patch by Catalin Iacob.

- bpo-12080: Fix a Decimal.power() case that took an unreasonably long time
  to compute.

- bpo-12221: Remove __version__ attributes from pyexpat, pickle, tarfile,
  pydoc, tkinter, and xml.parsers.expat. This were useless version constants
  left over from the Mercurial transition

- Named tuples now work correctly with vars().

- bpo-12085: Fix an attribute error in subprocess.Popen destructor if the
  constructor has failed, e.g. because of an undeclared keyword argument.
  Patch written by Oleg Oshmyan.

- bpo-12028: Make threading._get_ident() public, rename it to
  threading.get_ident() and document it. This function was already used
  using _thread.get_ident().

- bpo-12171: IncrementalEncoder.reset() of CJK codecs (multibytecodec) calls
  encreset() instead of decreset().

- bpo-12218: Removed wsgiref.egg-info.

- bpo-12196: Add pipe2() to the os module.

- bpo-985064: Make plistlib more resilient to faulty input plists. Patch by
  Mher Movsisyan.

- bpo-1625: BZ2File and bz2.decompress() now support multi-stream files.
  Initial patch by Nir Aides.

- bpo-12175: BufferedReader.read(-1) now calls raw.readall() if available.

- bpo-12175: FileIO.readall() now only reads the file position and size
  once.

- bpo-12175: RawIOBase.readall() now returns None if read() returns None.

- bpo-12175: FileIO.readall() now raises a ValueError instead of an IOError
  if the file is closed.

- bpo-11109: New service_action method for BaseServer, used by ForkingMixin
  class for cleanup. Initial Patch by Justin Warkentin.

- bpo-12045: Avoid duplicate execution of command in
  ctypes.util._get_soname().  Patch by Sijin Joseph.

- bpo-10818: Remove the Tk GUI and the serve() function of the pydoc module,
  pydoc -g has been deprecated in Python 3.2 and it has a new enhanced web
  server.

- bpo-1441530: In imaplib, read the data in one chunk to speed up large
  reads and simplify code.

- bpo-12070: Fix the Makefile parser of the sysconfig module to handle
  correctly references to "bogus variable" (e.g. "prefix=$/opt/python").

- bpo-12100: Don't reset incremental encoders of CJK codecs at each call to
  their encode() method anymore, but continue to call the reset() method if
  the final argument is True.

- bpo-12049: Add RAND_bytes() and RAND_pseudo_bytes() functions to the ssl
  module.

- bpo-6501: os.device_encoding() returns None on Windows if the application
  has no console.

- bpo-12105: Add O_CLOEXEC to the os module.

- bpo-12079: Decimal('Infinity').fma(Decimal('0'),
  (3.91224318126786e+19+0j)) now raises TypeError (reflecting the invalid
  type of the 3rd argument) rather than Decimal.InvalidOperation.

- bpo-12124: zipimport doesn't keep a reference to zlib.decompress() anymore
  to be able to unload the module.

- Add the packaging module, an improved fork of distutils (also known as
  distutils2).

- bpo-12065: connect_ex() on an SSL socket now returns the original errno
  when the socket's timeout expires (it used to return None).

- bpo-8809: The SMTP_SSL constructor and SMTP.starttls() now support passing
  a ``context`` argument pointing to an ssl.SSLContext instance. Patch by
  Kasun Herath.

- bpo-9516: avoid errors in sysconfig when MACOSX_DEPLOYMENT_TARGET is set
  in shell. (See also: bpo-9516)

- bpo-8650: Make zlib module 64-bit clean. compress(), decompress() and
  their incremental counterparts now raise OverflowError if given an input
  larger than 4GB, instead of silently truncating the input and returning an
  incorrect result.

- bpo-12050: zlib.decompressobj().decompress() now clears the
  unconsumed_tail attribute when called without a max_length argument.

- bpo-12062: Fix a flushing bug when doing a certain type of I/O sequence on
  a file opened in read+write mode (namely: reading, seeking a bit forward,
  writing, then seeking before the previous write but still within buffered
  data, and writing again).

- bpo-9971: Write an optimized implementation of BufferedReader.readinto().
  Patch by John O'Connor.

- bpo-11799: urllib.request Authentication Handlers will raise a ValueError
  when presented with an unsupported Authentication Scheme. Patch
  contributed by Yuval Greenfield.

- bpo-10419: build_scripts command of distutils handles correctly non-ASCII
  path (path to the Python executable). Open and write the script in binary
  mode, but ensure that the shebang is decodable from UTF-8 and from the
  encoding of the script. (See also: bpo-6011)

- bpo-8498: In socket.accept(), allow to specify 0 as a backlog value in
  order to accept exactly one connection.  Patch by Daniel Evers.

- bpo-12011: signal.signal() and signal.siginterrupt() raise an OSError,
  instead of a RuntimeError: OSError has an errno attribute.

- bpo-3709: add a flush_headers method to BaseHTTPRequestHandler, which
  manages the sending of headers to output stream and flushing the internal
  headers buffer. Patch contribution by Andrew Schaaf

- bpo-11743: Rewrite multiprocessing connection classes in pure Python.

- bpo-11164: Stop trying to use _xmlplus in the xml module.

- bpo-11888: Add log2 function to math module. Patch written by Mark
  Dickinson.

- bpo-12012: ssl.PROTOCOL_SSLv2 becomes optional.

- bpo-8407: The signal handler writes the signal number as a single byte
  instead of a nul byte into the wakeup file descriptor. So it is possible
  to wait more than one signal and know which signals were raised.

- bpo-8407: Add pthread_kill(), sigpending() and sigwait() functions to the
  signal module.

- bpo-11927: SMTP_SSL now uses port 465 by default as documented.  Patch by
  Kasun Herath.

- bpo-12002: ftplib's abort() method raises TypeError.

- bpo-11916: Add a number of MacOSX specific definitions to the errno
  module. Patch by Pierre Carrier.

- bpo-11999: fixed sporadic sync failure mailbox.Maildir due to its trying
  to detect mtime changes by comparing to the system clock instead of to the
  previous value of the mtime.

- bpo-11072: added MLSD command (RFC-3659) support to ftplib.

- bpo-8808: The IMAP4_SSL constructor now allows passing an SSLContext
  parameter to control parameters of the secure channel.  Patch by Sijin
  Joseph.

- ntpath.samefile failed to notice that "a.txt" and "A.TXT" refer to the
  same file on Windows XP. As noticed in issue #10684.

- bpo-12000: When a SSL certificate has a subjectAltName without any dNSName
  entry, ssl.match_hostname() should use the subject's commonName. Patch by
  Nicolas Bareil.

- bpo-10775: assertRaises, assertRaisesRegex, assertWarns, and
  assertWarnsRegex now accept a keyword argument 'msg' when used as context
  managers.  Initial patch by Winston Ewert.

- bpo-10684: shutil.move used to delete a folder on case insensitive
  filesystems when the source and destination name where the same except for
  the case.

- bpo-11647: objects created using contextlib.contextmanager now support
  more than one call to the function when used as a decorator. Initial patch
  by Ysj Ray.

- bpo-11930: Removed deprecated time.accept2dyear variable. Removed year >=
  1000 restriction from datetime.strftime.

- logging: don't define QueueListener if Python has no thread support.

- functools.cmp_to_key() now works with collections.Hashable().

- bpo-11277: mmap.mmap() calls fcntl(fd, F_FULLFSYNC) on Mac OS X to get
  around a mmap bug with sparse files. Patch written by Steffen Daode
  Nurpmeso.

- bpo-8407: Add signal.pthread_sigmask() function to fetch and/or change the
  signal mask of the calling thread.

- bpo-11858: configparser.ExtendedInterpolation expected lower-case section
  names.

- bpo-11324: ConfigParser(interpolation=None) now works correctly.

- bpo-11811: ssl.get_server_certificate() is now IPv6-compatible.  Patch by
  Charles- François Natali.

- bpo-11763: don't use difflib in TestCase.assertMultiLineEqual if the
  strings are too long.

- bpo-11236: getpass.getpass responds to ctrl-c or ctrl-z on terminal.

- bpo-11856: Speed up parsing of JSON numbers.

- bpo-11005: threading.RLock()._release_save() raises a RuntimeError if the
  lock was not acquired.

- bpo-11258: Speed up ctypes.util.find_library() under Linux by a factor of
  5 to 10. Initial patch by Jonas H.

- bpo-11382: Trivial system calls, such as dup() or pipe(), needn't release
  the GIL. Patch by Charles-François Natali.

- bpo-11223: Add threading._info() function providing informations about the
  thread implementation.

- bpo-11731: simplify/enhance email parser/generator API by introducing
  policy objects.

- bpo-11768: The signal handler of the signal module only calls
  Py_AddPendingCall() for the first signal to fix a deadlock on reentrant or
  parallel calls. PyErr_SetInterrupt() writes also into the wake up file.

- bpo-11492: fix several issues with header folding in the email package.

- bpo-11852: Add missing imports and update tests.

- bpo-11875: collections.OrderedDict's __reduce__ was temporarily mutating
  the object instead of just working on a copy.

- bpo-11467: Fix urlparse behavior when handling urls which contains scheme
  specific part only digits. Patch by Santoso Wijaya.

- collections.Counter().copy() now works correctly for subclasses.

- bpo-11474: Fix the bug with url2pathname() handling of '/C|/' on Windows.
  Patch by Santoso Wijaya.

- bpo-11684: complete email.parser bytes API by adding BytesHeaderParser.

- The bz2 module now handles 4GiB+ input buffers correctly.

- bpo-9233: Fix json.loads('{}') to return a dict (instead of a list), when
  _json is not available.

- bpo-11830: Remove unnecessary introspection code in the decimal module.

- bpo-11703: urllib2.geturl() does not return correct url when the original
  url contains #fragment.

- bpo-10019: Fixed regression in json module where an indent of 0 stopped
  adding newlines and acted instead like 'None'.

- bpo-11186: pydoc ignores a module if its name contains a surrogate
  character in the index of modules.

- bpo-11815: Use a light-weight SimpleQueue for the result queue in
  concurrent.futures.ProcessPoolExecutor.

- bpo-5162: Treat services like frozen executables to allow child spawning
  from multiprocessing.forking on Windows.

- logging.basicConfig now supports an optional 'handlers' argument taking an
  iterable of handlers to be added to the root logger. Additional parameter
  checks were also added to basicConfig.

- bpo-11814: Fix likely typo in multiprocessing.Pool._terminate().

- bpo-11747: Fix range formatting in difflib.context_diff() and
  difflib.unified_diff().

- bpo-8428: Fix a race condition in multiprocessing.Pool when terminating
  worker processes: new processes would be spawned while the pool is being
  shut down. Patch by Charles-François Natali.

- bpo-2650: re.escape() no longer escapes the '_'.

- bpo-11757: select.select() now raises ValueError when a negative timeout
  is passed (previously, a select.error with EINVAL would be raised).  Patch
  by Charles- François Natali.

- bpo-7311: fix html.parser to accept non-ASCII attribute values.

- bpo-11605: email.parser.BytesFeedParser was incorrectly converting
  multipart subparts with an 8-bit CTE into unicode instead of preserving
  the bytes.

- bpo-1690608: email.util.formataddr is now RFC 2047 aware:  it now has a
  charset parameter that defaults to utf-8 and is used as the charset for
  RFC 2047 encoding when the realname contains non-ASCII characters.

- bpo-10963: Ensure that subprocess.communicate() never raises EPIPE.

- bpo-10791: Implement missing method GzipFile.read1(), allowing GzipFile to
  be wrapped in a TextIOWrapper.  Patch by Nadeem Vawda.

- bpo-11707: Added a fast C version of functools.cmp_to_key(). Patch by
  Filip Gruszczyński.

- bpo-11688: Add sqlite3.Connection.set_trace_callback().  Patch by Torsten
  Landschoff.

- bpo-11746: Fix SSLContext.load_cert_chain() to accept elliptic curve
  private keys.

- bpo-5863: Rewrite BZ2File in pure Python, and allow it to accept file-like
  objects using a new ``fileobj`` constructor argument.  Patch by Nadeem
  Vawda.

- unittest.TestCase.assertSameElements has been removed.

- sys.getfilesystemencoding() raises a RuntimeError if initfsencoding() was
  not called yet: detect bootstrap (startup) issues earlier.

- bpo-11393: Add the new faulthandler module.

- bpo-11618: Fix the timeout logic in threading.Lock.acquire() under
  Windows.

- Removed the 'strict' argument to email.parser.Parser, which has been
  deprecated since Python 2.4.

- bpo-11256: Fix inspect.getcallargs on functions that take only keyword
  arguments.

- bpo-11696: Fix ID generation in msilib.

- itertools.accumulate now supports an optional *func* argument for a user-
  supplied binary function.

- bpo-11692: Remove unnecessary demo functions in subprocess module.

- bpo-9696: Fix exception incorrectly raised by xdrlib.Packer.pack_int when
  trying to pack a negative (in-range) integer.

- bpo-11675: multiprocessing.[Raw]Array objects created from an integer size
  are now zeroed on creation.  This matches the behaviour specified by the
  documentation.

- bpo-7639: Fix short file name generation in bdist_msi

- bpo-11635: Don't use polling in worker threads and processes launched by
  concurrent.futures.

- bpo-6811: Allow importlib to change a code object's co_filename attribute
  to match the path to where the source code currently is, not where the
  code object originally came from.

- bpo-8754: Have importlib use the repr of a module name in error messages.

- bpo-11591: Prevent "import site" from modifying sys.path when python was
  started with -S.

- collections.namedtuple() now adds a _source attribute to the generated
  class.  This make the source more accessible than the outdated "verbose"
  option which prints to stdout but doesn't make the source string
  available.

- bpo-11371: Mark getopt error messages as localizable.  Patch by Filip
  Gruszczyński.

- bpo-11333: Add __slots__ to collections ABCs.

- bpo-11628: cmp_to_key generated class should use __slots__.

- bpo-11666: let help() display named tuple attributes and methods that
  start with a leading underscore.

- bpo-11662: Make urllib and urllib2 ignore redirections if the scheme is
  not HTTP, HTTPS or FTP (CVE-2011-1521).

- bpo-5537: Fix time2isoz() and time2netscape() functions of
  httplib.cookiejar for expiration year greater than 2038 on 32-bit systems.

- bpo-4391: Use proper gettext plural forms in optparse.

- bpo-11127: Raise a TypeError when trying to pickle a socket object.

- bpo-11563: ``Connection: close`` header is sent by requests using
  URLOpener class which helps in closing of sockets after connection is
  over. Patch contributions by Jeff McNeil and Nadeem Vawda.

- bpo-11459: A ``bufsize`` value of 0 in subprocess.Popen() really creates
  unbuffered pipes, such that select() works properly on them.

- bpo-5421: Fix misleading error message when one of socket.sendto()'s
  arguments has the wrong type.  Patch by Nikita Vetoshkin.

- bpo-10812: Add some extra posix functions to the os module.

- bpo-10979: unittest stdout buffering now works with class and module setup
  and teardown.

- bpo-11243: fix the parameter querying methods of Message to work if the
  headers contain un-encoded non-ASCII data.

- bpo-11401: fix handling of headers with no value; this fixes a regression
  relative to Python2 and the result is now the same as it was in Python2.

- bpo-9298: base64 bodies weren't being folded to line lengths less than 78,
  which was a regression relative to Python2.  Unlike Python2, the last line
  of the folded body now ends with a carriage return.

- bpo-11560: shutil.unpack_archive now correctly handles the format
  parameter. Patch by Evan Dandrea.

- bpo-5870: Add `subprocess.DEVNULL` constant.

- bpo-11133: fix two cases where inspect.getattr_static can trigger code
  execution. Patch by Andreas Stührk.

- bpo-11569: use absolute path to the sysctl command in multiprocessing to
  ensure that it will be found regardless of the shell PATH. This ensures
  that multiprocessing.cpu_count works on default installs of MacOSX.

- bpo-11501: disutils.archive_utils.make_zipfile no longer fails if zlib is
  not installed. Instead, the zipfile.ZIP_STORED compression is used to
  create the ZipFile. Patch by Natalia B. Bidart.

- bpo-11289: `smtp.SMTP` class is now a context manager so it can be used in
  a `with` statement.  Contributed by Giampaolo Rodola.

- bpo-11554: Fixed support for Japanese codecs; previously the body output
  encoding was not done if euc-jp or shift-jis was specified as the charset.

- bpo-11407: `TestCase.run` returns the result object used or created.
  Contributed by Janathan Hartley.

- bpo-11500: Fixed a bug in the OS X proxy bypass code for fully qualified
  IP addresses in the proxy exception list.

- bpo-11491: dbm.error is no longer raised when dbm.open is called with the
  "n" as the flag argument and the file exists. The behavior matches the
  documentation and general logic.

- bpo-1162477: Postel Principle adjustment to email date parsing: handle the
  fact that some non-compliant MUAs use '.' instead of ':' in time specs.

- bpo-11131: Fix sign of zero in decimal.Decimal plus and minus operations
  when the rounding mode is ROUND_FLOOR.

- bpo-9935: Speed up pickling of instances of user-defined classes.

- bpo-5622: Fix curses.wrapper to raise correct exception if curses
  initialization fails.

- bpo-11408: In threading.Lock.acquire(), only call gettimeofday() when
  really necessary. Patch by Charles-François Natali.

- bpo-11391: Writing to a mmap object created with
  ``mmap.PROT_READ|mmap.PROT_EXEC`` would segfault instead of raising a
  TypeError.  Patch by Charles-François Natali.

- bpo-9795: add context manager protocol support for nntplib.NNTP class.

- bpo-11306: mailbox in certain cases adapts to an inability to open certain
  files in read-write mode.  Previously it detected this by checking for
  EACCES, now it also checks for EROFS.

- bpo-11265: asyncore now correctly handles EPIPE, EBADF and EAGAIN errors
  on accept(), send() and recv().

- bpo-11377: Deprecate platform.popen() and reimplement it with os.popen().

- bpo-8513: On UNIX, subprocess supports bytes command string.

- bpo-10866: Add socket.sethostname().  Initial patch by Ross Lagerwall.

- bpo-11140: Lock.release() now raises a RuntimeError when attempting to
  release an unacquired lock, as claimed in the threading documentation. The
  _thread.error exception is now an alias of RuntimeError.  Patch by Filip
  Gruszczyński.  Patch for _dummy_thread by Aymeric Augustin.

- bpo-8594: ftplib now provides a source_address parameter to specify which
  (address, port) to bind to before connecting.

- bpo-11326: Add the missing connect_ex() implementation for SSL sockets,
  and make it work for non-blocking connects.

- bpo-11297: Add collections.ChainMap().

- bpo-10755: Add the posix.flistdir() function.  Patch by Ross Lagerwall.

- bpo-4761: Add the ``*at()`` family of functions (openat(), etc.) to the
  posix module. Patch by Ross Lagerwall.

- bpo-7322: Trying to read from a socket's file-like object after a timeout
  occurred now raises an error instead of silently losing data.

- bpo-11291: poplib.POP no longer suppresses errors on quit().

- bpo-11177: asyncore's create_socket() arguments can now be omitted.

- bpo-6064: Add a ``daemon`` keyword argument to the threading.Thread and
  multiprocessing.Process constructors in order to override the default
  behaviour of inheriting the daemonic property from the current
  thread/process.

- bpo-10956: Buffered I/O classes retry reading or writing after a signal
  has arrived and the handler returned successfully.

- bpo-10784: New os.getpriority() and os.setpriority() functions.

- bpo-11114: Fix catastrophic performance of tell() on text files (up to
  1000x faster in some cases).  It is still one to two order of magnitudes
  slower than binary tell().

- bpo-10882: Add os.sendfile function.

- bpo-10868: Allow usage of the register method of an ABC as a class
  decorator.

- bpo-11224: Fixed a regression in tarfile that affected the file-like
  objects returned by TarFile.extractfile() regarding performance, memory
  consumption and failures with the stream interface.

- bpo-10924: Adding salt and Modular Crypt Format to crypt library. Moved
  old C wrapper to _crypt, and added a Python wrapper with enhanced salt
  generation and simpler API for password generation.

- bpo-11074: Make 'tokenize' so it can be reloaded.

- bpo-11085: Moved collections abstract base classes into a separate module
  called collections.abc, following the pattern used by importlib.abc. For
  backwards compatibility, the names are imported into the collections
  module.

- bpo-4681: Allow mmap() to work on file sizes and offsets larger than 4GB,
  even on 32-bit builds.  Initial patch by Ross Lagerwall, adapted for
  32-bit Windows.

- bpo-11169: compileall module uses repr() to format filenames and paths to
  escape surrogate characters and show spaces.

- bpo-11089: Fix performance issue limiting the use of ConfigParser() with
  large config files.

- bpo-10276: Fix the results of zlib.crc32() and zlib.adler32() on buffers
  larger than 4GB.  Patch by Nadeem Vawda.

- bpo-11388: Added a clear() method to MutableSequence

- bpo-11174: Add argparse.MetavarTypeHelpFormatter, which uses type names
  for the names of optional and positional arguments in help messages.

- bpo-9348: Raise an early error if argparse nargs and metavar don't match.

- bpo-9026: Fix order of argparse sub-commands in help messages.

- bpo-9347: Fix formatting for tuples in argparse type= error messages.

- bpo-12191: Added shutil.chown() to change user and/or group owner of a
  given path also specifying their names.

- bpo-13988: The _elementtree accelerator is used whenever available. Now
  xml.etree.cElementTree becomes a deprecated alias to ElementTree.

Build
-----

- bpo-6807: Run msisupport.mak earlier.

- bpo-10580: Minor grammar change in Windows installer.

- bpo-13326: Clean __pycache__ directories correctly on OpenBSD.

- PEP 393: the configure option --with-wide-unicode is removed.

- bpo-12852: Set _XOPEN_SOURCE to 700, instead of 600, to get POSIX 2008
  functions on OpenBSD (e.g. fdopendir).

- bpo-11863: Remove support for legacy systems deprecated in Python 3.2
  (following PEP 11).  These systems are systems using Mach C Threads, SunOS
  lightweight processes, GNU pth threads and IRIX threads.

- bpo-8746: Correct faulty configure checks so that os.chflags() and
  os.lchflags() are once again built on systems that support these functions
  (BSD and OS X). Also add new stat file flags for OS X (UF_HIDDEN and
  UF_COMPRESSED).

- bpo-10645: Installing Python no longer creates a Python-X.Y.Z-pyX.Y.egg-
  info file in the lib-dynload directory.

- Do not accidentally include the directory containing sqlite.h twice when
  building sqlite3.

- bpo-11217: For 64-bit/32-bit Mac OS X universal framework builds, ensure
  "make install" creates symlinks in --prefix bin for the "-32" files in the
  framework bin directory like the installer does.

- bpo-11347: Use --no-as-needed when linking libpython3.so.

- bpo-11411: Fix 'make DESTDIR=' with a relative destination.

- bpo-11268: Prevent Mac OS X Installer failure if Documentation package had
  previously been installed.

- bpo-11495: OSF support is eliminated. It was deprecated in Python 3.2.

IDLE
----

- bpo-14409: IDLE now properly executes commands in the Shell window when it
  cannot read the normal config files on startup and has to use the built-in
  default key bindings. There was previously a bug in one of the defaults.

- IDLE can be launched as python -m idlelib

- bpo-3573: IDLE hangs when passing invalid command line args
  (directory(ies) instead of file(s)) (Patch by Guilherme Polo)

- bpo-14200: IDLE shell crash on printing non-BMP unicode character.

- bpo-5219: Prevent event handler cascade in IDLE.

- bpo-964437: Make IDLE help window non-modal. Patch by Guilherme Polo and
  Roger Serwy.

- bpo-13933: IDLE auto-complete did not work with some imported module, like
  hashlib. (Patch by Roger Serwy)

- bpo-13506: Add '' to path for IDLE Shell when started and restarted with
  Restart Shell. Original patches by Marco Scataglini and Roger Serwy.

- bpo-4625: If IDLE cannot write to its recent file or breakpoint files,
  display a message popup and continue rather than crash.  Original patch by
  Roger Serwy.

- bpo-8641: Update IDLE 3 syntax coloring to recognize b".." and not u"..".
  Patch by Tal Einat.

- bpo-13296: Fix IDLE to clear compile __future__ flags on shell restart.
  (Patch by Roger Serwy)

- bpo-9871: Prevent IDLE 3 crash when given byte stings with invalid hex
  escape sequences, like b'\x0'. (Original patch by Claudiu Popa.)

- bpo-12636: IDLE reads the coding cookie when executing a Python script.

- bpo-12540: Prevent zombie IDLE processes on Windows due to changes in
  os.kill().

- bpo-12590: IDLE editor window now always displays the first line when
  opening a long file.  With Tk 8.5, the first line was hidden.

- bpo-11088: don't crash when using F5 to run a script in IDLE on MacOSX
  with Tk 8.5.

- bpo-1028: Tk returns invalid Unicode null in %A: UnicodeDecodeError. With
  Tk < 8.5 _tkinter.c:PythonCmd() raised UnicodeDecodeError, caused IDLE to
  exit. Converted to valid Unicode null in PythonCmd().

- bpo-11718: IDLE's open module dialog couldn't find the __init__.py file in
  a package.

Tools/Demos
-----------

- bpo-14053: patchcheck.py ("make patchcheck") now works with MQ patches.
  Patch by Francisco Martín Brugué.

- bpo-13930: 2to3 is now able to write its converted output files to another
  directory tree as well as copying unchanged files and altering the file
  suffix.  See its new -o, -W and --add-suffix options.  This makes it more
  useful in many automated code translation workflows.

- bpo-13628: python-gdb.py is now able to retrieve more frames in the Python
  traceback if Python is optimized.

- bpo-11996: libpython (gdb), replace "py-bt" command by "py-bt-full" and
  add a smarter "py-bt" command printing a classic Python traceback.

- bpo-11179: Make ccbench work under Python 3.1 and 2.7 again.

- bpo-10639: reindent.py no longer converts newlines and will raise an error
  if attempting to convert a file with mixed newlines. "--newline" option
  added to specify new line character.

Library
-------

- bpo-16847: Fixed improper use of _PyUnicode_CheckConsistency() in non-
  pydebug builds. Several extension modules now compile cleanly when
  assert()s are enabled in standard builds (-DDEBUG flag).

- bpo-13840: The error message produced by ctypes.create_string_buffer when
  given a Unicode string has been fixed.

- bpo-9975: socket: Fix incorrect use of flowinfo and scope_id. Patch by
  Vilmos Nebehaj.

- bpo-7777: socket: Add Reliable Datagram Sockets (PF_RDS) support.

- bpo-13159: FileIO and BZ2Compressor/BZ2Decompressor now use a linear-time
  buffer growth strategy instead of a quadratic-time one.

- bpo-10141: socket: Add SocketCAN (PF_CAN) support. Initial patch by
  Matthias Fuchs, updated by Tiago Gonçalves.

- bpo-13070: Fix a crash when a TextIOWrapper caught in a reference cycle
  would be finalized after the reference to its underlying BufferedRWPair's
  writer got cleared by the GC.

- bpo-12881: ctypes: Fix segfault with large structure field names.

- bpo-13058: ossaudiodev: fix a file descriptor leak on error. Patch by
  Thomas Jarosch.

- bpo-13013: ctypes: Fix a reference leak in PyCArrayType_from_ctype. Thanks
  to Suman Saha for finding the bug and providing a patch.

- bpo-13022: Fix: _multiprocessing.recvfd() doesn't check that file
  descriptor was actually received.

- bpo-1172711: Add 'long long' support to the array module. Initial patch by
  Oren Tirosh and Hirokazu Yamamoto.

- bpo-12483: ctypes: Fix a crash when the destruction of a callback object
  triggers the garbage collector.

- bpo-12950: Fix passing file descriptors in multiprocessing, under
  OpenIndiana/Illumos.

- bpo-12764: Fix a crash in ctypes when the name of a Structure field is not
  a string.

- bpo-11241: subclasses of ctypes.Array can now be subclassed.

- bpo-9651: Fix a crash when ctypes.create_string_buffer(0) was passed to
  some functions like file.write().

- bpo-10309: Define _GNU_SOURCE so that mremap() gets the proper signature.
  Without this, architectures where sizeof void* != sizeof int are broken.
  Patch given by Hallvard B Furuseth.

- bpo-12051: Fix segfault in json.dumps() while encoding highly-nested
  objects using the C accelerations.

- bpo-12017: Fix segfault in json.loads() while decoding highly-nested
  objects using the C accelerations.

- bpo-1838: Prevent segfault in ctypes, when _as_parameter_ on a class is
  set to an instance of the class.

Tests
-----

- bpo-13125: Silence spurious test_lib2to3 output when in non-verbose mode.
  Patch by Mikhail Novikov.

- bpo-13447: Add a test file to host regression tests for bugs in the
  scripts found in the Tools directory.

- bpo-10881: Fix test_site failure with OS X framework builds.

- bpo-13901: Prevent test_distutils failures on OS X with --enable-shared.

- bpo-13862: Fix spurious failure in test_zlib due to runtime/compile time
  minor versions not matching.

- bpo-12804: Fix test_socket and test_urllib2net failures when running tests
  on a system without internet access.

- bpo-13726: Fix the ambiguous -S flag in regrtest. It is -o/--slow for slow
  tests.

- bpo-11659: Fix ResourceWarning in test_subprocess introduced by #11459.
  Patch by Ben Hayden.

- bpo-11577: fix ResourceWarning triggered by improved binhex test coverage

- bpo-11509: Significantly increase test coverage of fileinput. Patch by
  Denver Coneybeare at PyCon 2011 Sprints.

- bpo-11689: Fix a variable scoping error in an sqlite3 test

- bpo-13786: Remove unimplemented 'trace' long option from regrtest.py.

- bpo-13725: Fix regrtest to recognize the documented -d flag. Patch by Erno
  Tukia.

- bpo-13304: Skip test case if user site-packages disabled (-s or
  PYTHONNOUSERSITE). (Patch by Carl Meyer)

- bpo-5661: Add a test for ECONNRESET/EPIPE handling to test_asyncore. Patch
  by Xavier de Gaye.

- bpo-13218: Fix test_ssl failures on Debian/Ubuntu.

- Re-enable lib2to3's test_parser.py tests, though with an expected failure
  (see issue 13125).

- bpo-12656: Add tests for IPv6 and Unix sockets to test_asyncore.

- bpo-6484: Add unit tests for mailcap module (patch by Gregory Nofi)

- bpo-11651: Improve the Makefile test targets to run more of the test suite
  more quickly. The --multiprocess option is now enabled by default,
  reducing the amount of time needed to run the tests. "make test" and "make
  quicktest" now include some resource-intensive tests, but no longer run
  the test suite twice to check for bugs in .pyc generation.
  Tools/scripts/run_test.py provides an easy platform-independent way to run
  test suite with sensible defaults.

- bpo-12331: The test suite for the packaging module can now run from an
  installed Python.

- bpo-12331: The test suite for lib2to3 can now run from an installed
  Python.

- bpo-12626: In regrtest, allow to filter tests using a glob filter with the
  ``-m`` (or ``--match``) option.  This works with all test cases using the
  unittest module.  This is useful with long test suites such as test_io or
  test_subprocess.

- bpo-12624: It is now possible to fail after the first failure when running
  in verbose mode (``-v`` or ``-W``), by using the ``--failfast`` (or
  ``-G``) option to regrtest.  This is useful with long test suites such as
  test_io or test_subprocess.

- bpo-12587: Correct faulty test file and reference in test_tokenize. (Patch
  by Robert Xiao)

- bpo-12573: Add resource checks for dangling Thread and Process objects.

- bpo-12549: Correct test_platform to not fail when OS X returns 'x86_64' as
  the processor type on some Mac systems.

- Skip network tests when getaddrinfo() returns EAI_AGAIN, meaning a
  temporary failure in name resolution.

- bpo-11812: Solve transient socket failure to connect to 'localhost' in
  test_telnetlib.py.

- Solved a potential deadlock in test_telnetlib.py. Related to issue #11812.

- Avoid failing in test_robotparser when mueblesmoraleda.com is flaky and an
  overzealous DNS service (e.g. OpenDNS) redirects to a placeholder Web
  site.

- Avoid failing in test_urllibnet.test_bad_address when some overzealous DNS
  service (e.g. OpenDNS) resolves a non-existent domain name.  The test is
  now skipped instead.

- bpo-12440: When testing whether some bits in SSLContext.options can be
  reset, check the version of the OpenSSL headers Python was compiled
  against, rather than the runtime version of the OpenSSL library.

- bpo-11512: Add a test suite for the cgitb module. Patch by Robbie Clemons.

- bpo-12497: Install test/data to prevent failures of the various codecmaps
  tests.

- bpo-12496: Install test/capath directory to prevent test_connect_capath
  testcase failure in test_ssl.

- bpo-12469: Run wakeup and pending signal tests in a subprocess to run the
  test in a fresh process with only one thread and to not change signal
  handling of the parent process.

- bpo-8716: Avoid crashes caused by Aqua Tk on OSX when attempting to run
  test_tk or test_ttk_guionly under a username that is not currently logged
  in to the console windowserver (as may be the case under buildbot or ssh).

- bpo-12407: Explicitly skip test_capi.EmbeddingTest under Windows.

- bpo-12400: regrtest -W doesn't rerun the tests twice anymore, but captures
  the output and displays it on failure instead. regrtest -v doesn't print
  the error twice anymore if there is only one error.

- bpo-12141: Install copies of template C module file so that test_build_ext
  of test_distutils and test_command_build_ext of test_packaging are no
  longer silently skipped when run outside of a build directory.

- bpo-8746: Add additional tests for os.chflags() and os.lchflags(). Patch
  by Garrett Cooper.

- bpo-10736: Fix test_ttk test_widgets failures with Cocoa Tk 8.5.9 2.8 +
  on Mac OS X. (Patch by Ronald Oussoren)

- bpo-12057: Add tests for ISO 2022 codecs (iso2022_jp, iso2022_jp_2,
  iso2022_kr).

- bpo-12096: Fix a race condition in test_threading.test_waitfor(). Patch
  written by Charles-François Natali.

- bpo-11614: import __hello__ prints "Hello World!". Patch written by
  Andreas Stührk.

- bpo-5723: Improve json tests to be executed with and without
  accelerations.

- bpo-12041: Make test_wait3 more robust.

- bpo-11873: Change regex in test_compileall to fix occasional failures when
  when the randomly generated temporary path happened to match the regex.

- bpo-11958: Fix FTP tests for IPv6, bind to "::1" instead of "localhost".
  Patch written by Charles-Francois Natali.

- bpo-8407: Fix tests of test_io using threads and an alarm: use
  pthread_sigmask() to ensure that the SIGALRM signal is received by the
  main thread. (See also: bpo-11859)

- bpo-11811: Factor out detection of IPv6 support on the current host and
  make it available as ``test.support.IPV6_ENABLED``.  Patch by Charles-
  François Natali.

- bpo-10914: Add a minimal embedding test to test_capi.

- bpo-11223: Skip test_lock_acquire_interruption() and
  test_rlock_acquire_interruption() of test_threadsignals if a thread lock
  is implemented using a POSIX mutex and a POSIX condition variable. A POSIX
  condition variable cannot be interrupted by a signal (e.g. on Linux, the
  futex system call is restarted).

- bpo-11790: Fix sporadic failures in
  test_multiprocessing.WithProcessesTestCondition.

- Fix possible "file already exists" error when running the tests in
  parallel.

- bpo-11719: Fix message about unexpected test_msilib skip on non-Windows
  platforms. Patch by Nadeem Vawda.

- bpo-11727: Add a --timeout option to regrtest: if a test takes more than
  TIMEOUT seconds, dumps the traceback of all threads and exits.

- bpo-11653: fix -W with -j in regrtest.

- The email test suite now lives in the Lib/test/test_email package.  The
  test harness code has also been modernized to allow use of new unittest
  features.

- regrtest now discovers test packages as well as test modules.

- bpo-11577: improve test coverage of binhex.py. Patch by Arkady Koplyarov.

- New test_crashers added to exercise the scripts in the Lib/test/crashers
  directory and confirm they fail as expected

- bpo-11578: added test for the timeit module.  Patch by Michael Henry.

- bpo-11503: improve test coverage of posixpath.py. Patch by Evan Dandrea.

- bpo-11505: improves test coverage of string.py, increases granularity of
  string.Formatter tests. Initial patch by Alicia Arlen.

- bpo-11548: Improve test coverage of the shutil module. Patch by Evan
  Dandrea.

- bpo-11554: Reactivated test_email_codecs.

- bpo-11505: improves test coverage of string.py. Patch by Alicia Arlen

- bpo-11490: test_subprocess.test_leaking_fds_on_error no longer gives a
  false positive if the last directory in the path is inaccessible.

- bpo-11223: Fix test_threadsignals to fail, not hang, when the non-
  semaphore implementation of locks is used under POSIX.

- bpo-10911: Add tests on CGI with non-ASCII characters. Patch written by
  Pierre Quentel.

- bpo-9931: Fix hangs in GUI tests under Windows in certain conditions.
  Patch by Hirokazu Yamamoto.

- bpo-10512: Properly close sockets under test.test_cgi.

- bpo-10992: Make tests pass under coverage.

- bpo-10826: Prevent sporadic failure in test_subprocess on Solaris due to
  open door files.

- bpo-10990: Prevent tests from clobbering a set trace function.

C API
-----

- bpo-13452: PyUnicode_EncodeDecimal() doesn't support error handlers
  different than "strict" anymore. The caller was unable to compute the size
  of the output buffer: it depends on the error handler.

- bpo-13560: Add PyUnicode_DecodeLocale(), PyUnicode_DecodeLocaleAndSize()
  and PyUnicode_EncodeLocale() functions to the C API to decode/encode
  from/to the current locale encoding.

- bpo-10831: PyUnicode_FromFormat() supports %li, %lli and %zi formats.

- bpo-11246: Fix PyUnicode_FromFormat("%V") to decode the byte string from
  UTF-8 (with replace error handler) instead of ISO-8859-1 (in strict mode).
  Patch written by Ray Allen.

- bpo-10830: Fix PyUnicode_FromFormatV("%c") for non-BMP characters on
  narrow build.

- Add PyObject_GenericGetDict and PyObject_GeneriSetDict. They are generic
  implementations for the getter and setter of a ``__dict__`` descriptor of
  C types.

- bpo-13727: Add 3 macros to access PyDateTime_Delta members:
  PyDateTime_DELTA_GET_DAYS, PyDateTime_DELTA_GET_SECONDS,
  PyDateTime_DELTA_GET_MICROSECONDS.

- bpo-10542: Add 4 macros to work with surrogates: Py_UNICODE_IS_SURROGATE,
  Py_UNICODE_IS_HIGH_SURROGATE, Py_UNICODE_IS_LOW_SURROGATE,
  Py_UNICODE_JOIN_SURROGATES.

- bpo-12724: Add Py_RETURN_NOTIMPLEMENTED macro for returning
  NotImplemented.

- PY_PATCHLEVEL_REVISION has been removed, since it's meaningless with
  Mercurial.

- bpo-12173: The first argument of PyImport_ImportModuleLevel is now `const
  char *` instead of `char *`.

- bpo-12380: PyArg_ParseTuple now accepts a bytearray for the 'c' format.

Documentation
-------------

- bpo-13989: Document that GzipFile does not support text mode, and give a
  more helpful error message when opened with an invalid mode string.

- bpo-13921: Undocument and clean up sqlite3.OptimizedUnicode, which is
  obsolete in Python 3.x. It's now aliased to str for backwards
  compatibility.

- bpo-12102: Document that buffered files must be flushed before being used
  with mmap. Patch by Steffen Daode Nurpmeso.

- bpo-8982: Improve the documentation for the argparse Namespace object.

- bpo-9343: Document that argparse parent parsers must be configured before
  their children.

- bpo-13498: Clarify docs of os.makedirs()'s exist_ok argument.  Done with
  great native- speaker help from R. David Murray.

- bpo-13491: Fix many errors in sqlite3 documentation. Initial patch for
  #13491 by Johannes Vogel. (See also: bpo-13995)

- bpo-13402: Document absoluteness of sys.executable.

- bpo-13883: PYTHONCASEOK also works on OS X.

- bpo-9021: Add an introduction to the copy module documentation.

- bpo-6005: Examples in the socket library documentation use sendall, where
  relevant, instead send method.

- bpo-12798: Updated the mimetypes documentation.

- bpo-12949: Document the kwonlyargcount argument for the PyCode_New C API
  function.

- bpo-13513: Fix io.IOBase documentation to correctly link to the
  io.IOBase.readline method instead of the readline module.

- bpo-13237: Reorganise subprocess documentation to emphasise convenience
  functions and the most commonly needed arguments to Popen.

- bpo-13141: Demonstrate recommended style for socketserver examples.

- bpo-11818: Fix tempfile examples for Python 3.


**(For information about older versions, consult the HISTORY file.)**
